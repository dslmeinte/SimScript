grammar nl.dslmeinte.simscript.simpleDb.SimpleDbDsl with nl.dslmeinte.simscript.structure.SimStructureDsl

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

import "http://www.dslconsultancy.com/simscript/structure/StructureDsl" as struct
import "http://www.dslconsultancy.com/simscript/simpleDb/SimpleDbDsl" as db


DatabaseModel returns db::DatabaseModel:
	{db::DatabaseModel}
	'database'
	definitions+=Definition*
	;
	// TODO  consider adding database modules to modularize the database definition

Definition returns db::Definition:
	TableDefinition | DataTypeDefinition
	;


/*
 * +--------+
 * | tables |
 * +--------+
 */

TableDefinition returns db::Table:
	'table' name=ID '{'
		columns+=ColumnDefinition*
	'}' ( timestamped?='timestamped' (timestampIndexed?='with-index')? )?
	;
	// validation: !columns.empty		[√]

ColumnDefinition returns db::Column:
	SimpleColumnDefinition | ForeignKeyColumnDefinition
	;

SimpleColumnDefinition returns db::SimpleColumn:
	name=ID ':' type=SqlTypeLiteral
		( autoIncrement?='auto-increment'? & index?='index'? & primary?='primary'? & unique?='unique'? & nullable?='nullable'? )	// <== modifiers
	;
	/* validation:
	 * 		1-  some of the modifiers are mutually exclusive	[ ]
	 * 		2-  auto-increment implies int-type					[√]
	 */

ForeignKeyColumnDefinition returns db::ForeignKeyColumn:
	name=ID '->' primaryId=TablePrimaryIdentification
		( nullable?='nullable'? )	// <== modifier
	;

TablePrimaryIdentification returns db::TablePrimaryIdentification hidden():
	table=[db::Table] '.' primary=[db::SimpleColumn]
	;
	// scoping: column in primary table.columns		[√]


/*
 * +-------+
 * | types |
 * +-------+
 */

SqlTypeLiteral returns db::SqlTypeLiteral:
	  NativeSqlTypeLiteral
	| {db::DataTypeReference} datatype=[db::DataType]
	| {db::EnumerationReference} 'enum' enumeration=[struct::Enumeration]	// ignore error!
	;

NativeSqlTypeLiteral returns db::SqlTypeLiteral:
	  {db::BooleanLiteral} 'boolean'
	| {db::DateLiteral} 'date'
	| {db::IntLiteral} 'int' '(' size=INT ')'
	| {db::FloatLiteral} 'float' '(' digits=INT ',' decimals=INT ')'
	| {db::TextLiteral} 'text'
	| {db::VarCharLiteral} 'varchar' '(' size=INT ')'
	;

DataTypeDefinition returns db::DataType:
	'datatype' name=ID ':' type=SqlTypeLiteral
	;

