module nl.dslmeinte.simscript.backend.GenerateSimBackendDsl

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var grammarURI = "classpath:/nl/dslmeinte/simscript/backend/SimBackendDsl.xtext"
var file.extensions = "sim_back"
var projectName = "nl.dslmeinte.simscript.backend"
var runtimeProject = "../${projectName}"

Workflow {

    bean = StandaloneSetup {
        scanClassPath = true
        platformUri = "${runtimeProject}/.."
        registerGeneratedEPackage = "org.eclipse.emf.ecore.EcorePackage"
    }

    component = DirectoryCleaner {
        directory = "${runtimeProject}/src-gen/com"
    }

    component = DirectoryCleaner {
        directory = "${runtimeProject}.ui/src-gen/com"
    }

    component = Generator {
        pathRtProject = runtimeProject
        pathUiProject = "${runtimeProject}.ui"
        pathTestProject = "${runtimeProject}.tests"
        projectNameRt = projectName
        projectNameUi = "${projectName}.ui"
        language = auto-inject {
        	loadedResource = "platform:/resource/nl.dslmeinte.simscript.core/model/Types.xcore"
        	loadedResource = "platform:/resource/nl.dslmeinte.simscript.core/model/StructureDsl.xcore"
        	loadedResource = "platform:/resource/nl.dslmeinte.simscript.core/model/BackendDsl.xcore"
            uri = grammarURI
            fileExtensions = file.extensions

            fragment = grammarAccess.GrammarAccessFragment {}
            fragment = ecore.EMFGeneratorFragment auto-inject {}
            fragment = parser.antlr.XtextAntlrGeneratorFragment {}
            fragment = resourceFactory.ResourceFactoryFragment { fileExtensions = file.extensions }

            fragment = exporting.SimpleNamesFragment {}
            fragment = scoping.ImportNamespacesScopingFragment { generateStub = false }
            fragment = validation.JavaValidatorFragment {
                composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
            }

            fragment = formatting.FormatterFragment {}
            fragment = serializer.SerializerFragment {}

			fragment = generator.GeneratorFragment {
				generateMwe = false
				generateJavaMain = false
			}
            fragment = builder.BuilderIntegrationFragment {}

            fragment = parser.antlr.XtextAntlrUiGeneratorFragment {}
            fragment = labeling.LabelProviderFragment {}
            fragment = outline.OutlineTreeProviderFragment {}
            fragment = outline.QuickOutlineFragment {}
            fragment = quickfix.QuickfixProviderFragment {}
            fragment = contentAssist.JavaBasedContentAssistFragment {}
            fragment = refactoring.RefactorElementNameFragment {}
            fragment = templates.CodetemplatesGeneratorFragment {}
            fragment = compare.CompareFragment { fileExtensions = file.extensions }

        }
    }

}
