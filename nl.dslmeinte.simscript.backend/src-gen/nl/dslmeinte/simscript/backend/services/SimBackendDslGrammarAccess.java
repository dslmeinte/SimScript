/*
* generated by Xtext
*/
package nl.dslmeinte.simscript.backend.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import nl.dslmeinte.simscript.structure.services.SimStructureDslGrammarAccess;

@Singleton
public class SimBackendDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class BackendModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BackendModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBackendModelAction_0 = (Action)cGroup.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1 = (UnorderedGroup)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cUnorderedGroup_1.eContents().get(0);
		private final Keyword cConfigKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_0_2 = (Group)cGroup_1_0.eContents().get(2);
		private final Keyword cBaseURLKeyword_1_0_2_0 = (Keyword)cGroup_1_0_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_0_2_1 = (Keyword)cGroup_1_0_2.eContents().get(1);
		private final Assignment cBaseUrlAssignment_1_0_2_2 = (Assignment)cGroup_1_0_2.eContents().get(2);
		private final RuleCall cBaseUrlSTRINGTerminalRuleCall_1_0_2_2_0 = (RuleCall)cBaseUrlAssignment_1_0_2_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cUnorderedGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final Keyword cFlavorKeyword_1_1_0_0 = (Keyword)cGroup_1_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1_0_1 = (Keyword)cGroup_1_1_0.eContents().get(1);
		private final Assignment cFlavorAssignment_1_1_0_2 = (Assignment)cGroup_1_1_0.eContents().get(2);
		private final RuleCall cFlavorFlavorsEnumRuleCall_1_1_0_2_0 = (RuleCall)cFlavorAssignment_1_1_0_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cAuthOptsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAuthOptsAuthenticationDeclarationParserRuleCall_2_0 = (RuleCall)cAuthOptsAssignment_2.eContents().get(0);
		private final Assignment cDeclarationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDeclarationsServiceParserRuleCall_3_0 = (RuleCall)cDeclarationsAssignment_3.eContents().get(0);
		
		//BackendModel:
		//	{BackendModel} ("config" "{" ("baseURL" "=" baseUrl=STRING)? // base URL, prepended to all (?) URLs in AJAX calls (default="http://fb.DSLConsultancy.com/")
		//	& ("flavor" "=" flavor=Flavors)? // determines flavor, e.g. use a '.php' suffix when flavor == PHP
		//	"}")? authOpts+=AuthenticationDeclaration* declarations+=Service*;
		public ParserRule getRule() { return rule; }

		//{BackendModel} ("config" "{" ("baseURL" "=" baseUrl=STRING)? // base URL, prepended to all (?) URLs in AJAX calls (default="http://fb.DSLConsultancy.com/")
		//& ("flavor" "=" flavor=Flavors)? // determines flavor, e.g. use a '.php' suffix when flavor == PHP
		//"}")? authOpts+=AuthenticationDeclaration* declarations+=Service*
		public Group getGroup() { return cGroup; }

		//{BackendModel}
		public Action getBackendModelAction_0() { return cBackendModelAction_0; }

		//("config" "{" ("baseURL" "=" baseUrl=STRING)? // base URL, prepended to all (?) URLs in AJAX calls (default="http://fb.DSLConsultancy.com/")
		//& ("flavor" "=" flavor=Flavors)? // determines flavor, e.g. use a '.php' suffix when flavor == PHP
		//"}")?
		public UnorderedGroup getUnorderedGroup_1() { return cUnorderedGroup_1; }

		//"config" "{" ("baseURL" "=" baseUrl=STRING)? // base URL, prepended to all (?) URLs in AJAX calls (default="http://fb.DSLConsultancy.com/")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"config"
		public Keyword getConfigKeyword_1_0_0() { return cConfigKeyword_1_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_0_1() { return cLeftCurlyBracketKeyword_1_0_1; }

		//("baseURL" "=" baseUrl=STRING)?
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }

		//"baseURL"
		public Keyword getBaseURLKeyword_1_0_2_0() { return cBaseURLKeyword_1_0_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_0_2_1() { return cEqualsSignKeyword_1_0_2_1; }

		//baseUrl=STRING
		public Assignment getBaseUrlAssignment_1_0_2_2() { return cBaseUrlAssignment_1_0_2_2; }

		//STRING
		public RuleCall getBaseUrlSTRINGTerminalRuleCall_1_0_2_2_0() { return cBaseUrlSTRINGTerminalRuleCall_1_0_2_2_0; }

		//("flavor" "=" flavor=Flavors)? // determines flavor, e.g. use a '.php' suffix when flavor == PHP
		//"}"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//("flavor" "=" flavor=Flavors)?
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//"flavor"
		public Keyword getFlavorKeyword_1_1_0_0() { return cFlavorKeyword_1_1_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_1_0_1() { return cEqualsSignKeyword_1_1_0_1; }

		//flavor=Flavors
		public Assignment getFlavorAssignment_1_1_0_2() { return cFlavorAssignment_1_1_0_2; }

		//Flavors
		public RuleCall getFlavorFlavorsEnumRuleCall_1_1_0_2_0() { return cFlavorFlavorsEnumRuleCall_1_1_0_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_1_1() { return cRightCurlyBracketKeyword_1_1_1; }

		//authOpts+=AuthenticationDeclaration*
		public Assignment getAuthOptsAssignment_2() { return cAuthOptsAssignment_2; }

		//AuthenticationDeclaration
		public RuleCall getAuthOptsAuthenticationDeclarationParserRuleCall_2_0() { return cAuthOptsAuthenticationDeclarationParserRuleCall_2_0; }

		//declarations+=Service*
		public Assignment getDeclarationsAssignment_3() { return cDeclarationsAssignment_3; }

		//Service
		public RuleCall getDeclarationsServiceParserRuleCall_3_0() { return cDeclarationsServiceParserRuleCall_3_0; }
	}

	public class AuthenticationDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AuthenticationDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAuthenticationOptionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cPrincipalKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPrincipalAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPrincipalAuthenticationParameterParserRuleCall_4_0 = (RuleCall)cPrincipalAssignment_4.eContents().get(0);
		private final Keyword cCredentialsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cCredentialAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cCredentialAuthenticationParameterParserRuleCall_6_0 = (RuleCall)cCredentialAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//AuthenticationDeclaration:
		//	"authentication-option" name=ID "{" "principal" principal=AuthenticationParameter "credentials"
		//	credential=AuthenticationParameter "}";
		public ParserRule getRule() { return rule; }

		//"authentication-option" name=ID "{" "principal" principal=AuthenticationParameter "credentials"
		//credential=AuthenticationParameter "}"
		public Group getGroup() { return cGroup; }

		//"authentication-option"
		public Keyword getAuthenticationOptionKeyword_0() { return cAuthenticationOptionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"principal"
		public Keyword getPrincipalKeyword_3() { return cPrincipalKeyword_3; }

		//principal=AuthenticationParameter
		public Assignment getPrincipalAssignment_4() { return cPrincipalAssignment_4; }

		//AuthenticationParameter
		public RuleCall getPrincipalAuthenticationParameterParserRuleCall_4_0() { return cPrincipalAuthenticationParameterParserRuleCall_4_0; }

		//"credentials"
		public Keyword getCredentialsKeyword_5() { return cCredentialsKeyword_5; }

		//credential=AuthenticationParameter
		public Assignment getCredentialAssignment_6() { return cCredentialAssignment_6; }

		//AuthenticationParameter
		public RuleCall getCredentialAuthenticationParameterParserRuleCall_6_0() { return cCredentialAuthenticationParameterParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class AuthenticationParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AuthenticationParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeLiteralParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//AuthenticationParameter:
		//	name=ID ":" type=TypeLiteral;
		public ParserRule getRule() { return rule; }

		//name=ID ":" type=TypeLiteral
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=TypeLiteral
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//TypeLiteral
		public RuleCall getTypeTypeLiteralParserRuleCall_2_0() { return cTypeTypeLiteralParserRuleCall_2_0; }
	}

	public class ServiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Service");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNamedServiceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCrudServiceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Service:
		//	NamedService | CrudService;
		public ParserRule getRule() { return rule; }

		//NamedService | CrudService
		public Alternatives getAlternatives() { return cAlternatives; }

		//NamedService
		public RuleCall getNamedServiceParserRuleCall_0() { return cNamedServiceParserRuleCall_0; }

		//CrudService
		public RuleCall getCrudServiceParserRuleCall_1() { return cCrudServiceParserRuleCall_1; }
	}

	public class NamedServiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamedService");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInterfaceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLegacyServletParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NamedService:
		//	Interface | LegacyServlet;
		public ParserRule getRule() { return rule; }

		//Interface | LegacyServlet
		public Alternatives getAlternatives() { return cAlternatives; }

		//Interface
		public RuleCall getInterfaceParserRuleCall_0() { return cInterfaceParserRuleCall_0; }

		//LegacyServlet
		public RuleCall getLegacyServletParserRuleCall_1() { return cLegacyServletParserRuleCall_1; }
	}

	public class InterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Interface");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInterfaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cMethodAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMethodHttpMethodsEnumRuleCall_2_0 = (RuleCall)cMethodAssignment_2.eContents().get(0);
		private final Assignment cInputTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInputTypeDefinedTypeLiteralParserRuleCall_3_0 = (RuleCall)cInputTypeAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOutputTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOutputTypeTypeLiteralParserRuleCall_4_1_0 = (RuleCall)cOutputTypeAssignment_4_1.eContents().get(0);
		private final Assignment cNotAuthenticatedAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cNotAuthenticatedNotAuthenticatedKeyword_5_0 = (Keyword)cNotAuthenticatedAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cImplementedByKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cLegacyServletAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cLegacyServletLegacyServletCrossReference_6_1_0 = (CrossReference)cLegacyServletAssignment_6_1.eContents().get(0);
		private final RuleCall cLegacyServletLegacyServletIDTerminalRuleCall_6_1_0_1 = (RuleCall)cLegacyServletLegacyServletCrossReference_6_1_0.eContents().get(1);
		private final Assignment cDocumentationAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDocumentationSTRINGTerminalRuleCall_7_0 = (RuleCall)cDocumentationAssignment_7.eContents().get(0);
		
		//// regular interfaces:
		//Interface:
		//	"interface" name=ID method=HttpMethods inputType=DefinedTypeLiteral? ("->" outputType=TypeLiteral)?
		//	notAuthenticated?="not-authenticated"? ("implemented-by" legacyServlet=[LegacyServlet])? documentation=STRING?;
		public ParserRule getRule() { return rule; }

		//"interface" name=ID method=HttpMethods inputType=DefinedTypeLiteral? ("->" outputType=TypeLiteral)?
		//notAuthenticated?="not-authenticated"? ("implemented-by" legacyServlet=[LegacyServlet])? documentation=STRING?
		public Group getGroup() { return cGroup; }

		//"interface"
		public Keyword getInterfaceKeyword_0() { return cInterfaceKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//method=HttpMethods
		public Assignment getMethodAssignment_2() { return cMethodAssignment_2; }

		//HttpMethods
		public RuleCall getMethodHttpMethodsEnumRuleCall_2_0() { return cMethodHttpMethodsEnumRuleCall_2_0; }

		//inputType=DefinedTypeLiteral?
		public Assignment getInputTypeAssignment_3() { return cInputTypeAssignment_3; }

		//DefinedTypeLiteral
		public RuleCall getInputTypeDefinedTypeLiteralParserRuleCall_3_0() { return cInputTypeDefinedTypeLiteralParserRuleCall_3_0; }

		//("->" outputType=TypeLiteral)?
		public Group getGroup_4() { return cGroup_4; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_4_0() { return cHyphenMinusGreaterThanSignKeyword_4_0; }

		//outputType=TypeLiteral
		public Assignment getOutputTypeAssignment_4_1() { return cOutputTypeAssignment_4_1; }

		//TypeLiteral
		public RuleCall getOutputTypeTypeLiteralParserRuleCall_4_1_0() { return cOutputTypeTypeLiteralParserRuleCall_4_1_0; }

		//notAuthenticated?="not-authenticated"?
		public Assignment getNotAuthenticatedAssignment_5() { return cNotAuthenticatedAssignment_5; }

		//"not-authenticated"
		public Keyword getNotAuthenticatedNotAuthenticatedKeyword_5_0() { return cNotAuthenticatedNotAuthenticatedKeyword_5_0; }

		//("implemented-by" legacyServlet=[LegacyServlet])?
		public Group getGroup_6() { return cGroup_6; }

		//"implemented-by"
		public Keyword getImplementedByKeyword_6_0() { return cImplementedByKeyword_6_0; }

		//legacyServlet=[LegacyServlet]
		public Assignment getLegacyServletAssignment_6_1() { return cLegacyServletAssignment_6_1; }

		//[LegacyServlet]
		public CrossReference getLegacyServletLegacyServletCrossReference_6_1_0() { return cLegacyServletLegacyServletCrossReference_6_1_0; }

		//ID
		public RuleCall getLegacyServletLegacyServletIDTerminalRuleCall_6_1_0_1() { return cLegacyServletLegacyServletIDTerminalRuleCall_6_1_0_1; }

		//documentation=STRING?
		public Assignment getDocumentationAssignment_7() { return cDocumentationAssignment_7; }

		//STRING
		public RuleCall getDocumentationSTRINGTerminalRuleCall_7_0() { return cDocumentationSTRINGTerminalRuleCall_7_0; }
	}

	public class LegacyServletElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LegacyServlet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLegacyServletKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cUrlPatternAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUrlPatternURLTerminalRuleCall_3_0 = (RuleCall)cUrlPatternAssignment_3.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFqClassNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFqClassNameQualifiedNameParserRuleCall_5_0 = (RuleCall)cFqClassNameAssignment_5.eContents().get(0);
		
		//// legacy servlets:
		//LegacyServlet:
		//	"legacy-servlet" name=ID ":" urlPattern=URL "->" fqClassName=QualifiedName;
		public ParserRule getRule() { return rule; }

		//"legacy-servlet" name=ID ":" urlPattern=URL "->" fqClassName=QualifiedName
		public Group getGroup() { return cGroup; }

		//"legacy-servlet"
		public Keyword getLegacyServletKeyword_0() { return cLegacyServletKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//urlPattern=URL
		public Assignment getUrlPatternAssignment_3() { return cUrlPatternAssignment_3; }

		//URL
		public RuleCall getUrlPatternURLTerminalRuleCall_3_0() { return cUrlPatternURLTerminalRuleCall_3_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_4() { return cHyphenMinusGreaterThanSignKeyword_4; }

		//fqClassName=QualifiedName
		public Assignment getFqClassNameAssignment_5() { return cFqClassNameAssignment_5; }

		//QualifiedName
		public RuleCall getFqClassNameQualifiedNameParserRuleCall_5_0() { return cFqClassNameQualifiedNameParserRuleCall_5_0; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class CrudServiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CrudService");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCrudServiceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStructureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cStructureStructureCrossReference_1_0 = (CrossReference)cStructureAssignment_1.eContents().get(0);
		private final RuleCall cStructureStructureIDTerminalRuleCall_1_0_1 = (RuleCall)cStructureStructureCrossReference_1_0.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cServicesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cServicesCrudTypesEnumRuleCall_3_0 = (RuleCall)cServicesAssignment_3.eContents().get(0);
		
		//// CRUD services:
		//CrudService:
		//	"crud-service" structure=[struct::Structure] ":" services+=CrudTypes*;
		public ParserRule getRule() { return rule; }

		//"crud-service" structure=[struct::Structure] ":" services+=CrudTypes*
		public Group getGroup() { return cGroup; }

		//"crud-service"
		public Keyword getCrudServiceKeyword_0() { return cCrudServiceKeyword_0; }

		//structure=[struct::Structure]
		public Assignment getStructureAssignment_1() { return cStructureAssignment_1; }

		//[struct::Structure]
		public CrossReference getStructureStructureCrossReference_1_0() { return cStructureStructureCrossReference_1_0; }

		//ID
		public RuleCall getStructureStructureIDTerminalRuleCall_1_0_1() { return cStructureStructureIDTerminalRuleCall_1_0_1; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//services+=CrudTypes*
		public Assignment getServicesAssignment_3() { return cServicesAssignment_3; }

		//CrudTypes
		public RuleCall getServicesCrudTypesEnumRuleCall_3_0() { return cServicesCrudTypesEnumRuleCall_3_0; }
	}
	
	
	public class FlavorsElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Flavors");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cJavaEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cJavaJavaKeyword_0_0 = (Keyword)cJavaEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPhpEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPhpPHPKeyword_1_0 = (Keyword)cPhpEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Flavors:
		//	java="Java" / * default * / | php="PHP";
		public EnumRule getRule() { return rule; }

		//java="Java" / * default * / | php="PHP"
		public Alternatives getAlternatives() { return cAlternatives; }

		//java="Java"
		public EnumLiteralDeclaration getJavaEnumLiteralDeclaration_0() { return cJavaEnumLiteralDeclaration_0; }

		//"Java"
		public Keyword getJavaJavaKeyword_0_0() { return cJavaJavaKeyword_0_0; }

		//php="PHP"
		public EnumLiteralDeclaration getPhpEnumLiteralDeclaration_1() { return cPhpEnumLiteralDeclaration_1; }

		//"PHP"
		public Keyword getPhpPHPKeyword_1_0() { return cPhpPHPKeyword_1_0; }
	}

	public class HttpMethodsElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "HttpMethods");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cGetEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cGetGETKeyword_0_0 = (Keyword)cGetEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPostEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPostPOSTKeyword_1_0 = (Keyword)cPostEnumLiteralDeclaration_1.eContents().get(0);
		
		/// *
		//	 * validation:
		//	 * 		1-  outputType is either a DefinedTypeLiteral or an ListTypeLiteral		[√]
		//	 * 		2-  inputType != null if method == POST									[√]
		//	 * 		3-  !(inputType == null && outputType == null)							[√]
		//	 * / enum HttpMethods:
		//	get="GET" | post="POST";
		public EnumRule getRule() { return rule; }

		//get="GET" | post="POST"
		public Alternatives getAlternatives() { return cAlternatives; }

		//get="GET"
		public EnumLiteralDeclaration getGetEnumLiteralDeclaration_0() { return cGetEnumLiteralDeclaration_0; }

		//"GET"
		public Keyword getGetGETKeyword_0_0() { return cGetGETKeyword_0_0; }

		//post="POST"
		public EnumLiteralDeclaration getPostEnumLiteralDeclaration_1() { return cPostEnumLiteralDeclaration_1; }

		//"POST"
		public Keyword getPostPOSTKeyword_1_0() { return cPostPOSTKeyword_1_0; }
	}

	public class CrudTypesElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "CrudTypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCreateEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCreateCreateKeyword_0_0 = (Keyword)cCreateEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGetByIdEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGetByIdGetByIdKeyword_1_0 = (Keyword)cGetByIdEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cUpdateEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cUpdateUpdateKeyword_2_0 = (Keyword)cUpdateEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDeleteEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDeleteDeleteKeyword_3_0 = (Keyword)cDeleteEnumLiteralDeclaration_3.eContents().get(0);
		
		//// TODO  consider ditching this and just picking up what CRUD services are required from the .sim_ui models;
		//// on the other hand: it might be wise to be able to restrict the available CRUD services for security reasons.
		//enum CrudTypes:
		//	create | getById="get-by-id" | update | delete;
		public EnumRule getRule() { return rule; }

		//create | getById="get-by-id" | update | delete
		public Alternatives getAlternatives() { return cAlternatives; }

		//create
		public EnumLiteralDeclaration getCreateEnumLiteralDeclaration_0() { return cCreateEnumLiteralDeclaration_0; }

		//"create"
		public Keyword getCreateCreateKeyword_0_0() { return cCreateCreateKeyword_0_0; }

		//getById="get-by-id"
		public EnumLiteralDeclaration getGetByIdEnumLiteralDeclaration_1() { return cGetByIdEnumLiteralDeclaration_1; }

		//"get-by-id"
		public Keyword getGetByIdGetByIdKeyword_1_0() { return cGetByIdGetByIdKeyword_1_0; }

		//update
		public EnumLiteralDeclaration getUpdateEnumLiteralDeclaration_2() { return cUpdateEnumLiteralDeclaration_2; }

		//"update"
		public Keyword getUpdateUpdateKeyword_2_0() { return cUpdateUpdateKeyword_2_0; }

		//delete
		public EnumLiteralDeclaration getDeleteEnumLiteralDeclaration_3() { return cDeleteEnumLiteralDeclaration_3; }

		//"delete"
		public Keyword getDeleteDeleteKeyword_3_0() { return cDeleteDeleteKeyword_3_0; }
	}
	
	private BackendModelElements pBackendModel;
	private FlavorsElements unknownRuleFlavors;
	private AuthenticationDeclarationElements pAuthenticationDeclaration;
	private AuthenticationParameterElements pAuthenticationParameter;
	private ServiceElements pService;
	private NamedServiceElements pNamedService;
	private InterfaceElements pInterface;
	private HttpMethodsElements unknownRuleHttpMethods;
	private LegacyServletElements pLegacyServlet;
	private QualifiedNameElements pQualifiedName;
	private CrudServiceElements pCrudService;
	private CrudTypesElements unknownRuleCrudTypes;
	private TerminalRule tURL;
	
	private final Grammar grammar;

	private SimStructureDslGrammarAccess gaSimStructureDsl;

	@Inject
	public SimBackendDslGrammarAccess(GrammarProvider grammarProvider,
		SimStructureDslGrammarAccess gaSimStructureDsl) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaSimStructureDsl = gaSimStructureDsl;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("nl.dslmeinte.simscript.backend.SimBackendDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public SimStructureDslGrammarAccess getSimStructureDslGrammarAccess() {
		return gaSimStructureDsl;
	}

	
	//BackendModel:
	//	{BackendModel} ("config" "{" ("baseURL" "=" baseUrl=STRING)? // base URL, prepended to all (?) URLs in AJAX calls (default="http://fb.DSLConsultancy.com/")
	//	& ("flavor" "=" flavor=Flavors)? // determines flavor, e.g. use a '.php' suffix when flavor == PHP
	//	"}")? authOpts+=AuthenticationDeclaration* declarations+=Service*;
	public BackendModelElements getBackendModelAccess() {
		return (pBackendModel != null) ? pBackendModel : (pBackendModel = new BackendModelElements());
	}
	
	public ParserRule getBackendModelRule() {
		return getBackendModelAccess().getRule();
	}

	//enum Flavors:
	//	java="Java" / * default * / | php="PHP";
	public FlavorsElements getFlavorsAccess() {
		return (unknownRuleFlavors != null) ? unknownRuleFlavors : (unknownRuleFlavors = new FlavorsElements());
	}
	
	public EnumRule getFlavorsRule() {
		return getFlavorsAccess().getRule();
	}

	//AuthenticationDeclaration:
	//	"authentication-option" name=ID "{" "principal" principal=AuthenticationParameter "credentials"
	//	credential=AuthenticationParameter "}";
	public AuthenticationDeclarationElements getAuthenticationDeclarationAccess() {
		return (pAuthenticationDeclaration != null) ? pAuthenticationDeclaration : (pAuthenticationDeclaration = new AuthenticationDeclarationElements());
	}
	
	public ParserRule getAuthenticationDeclarationRule() {
		return getAuthenticationDeclarationAccess().getRule();
	}

	//AuthenticationParameter:
	//	name=ID ":" type=TypeLiteral;
	public AuthenticationParameterElements getAuthenticationParameterAccess() {
		return (pAuthenticationParameter != null) ? pAuthenticationParameter : (pAuthenticationParameter = new AuthenticationParameterElements());
	}
	
	public ParserRule getAuthenticationParameterRule() {
		return getAuthenticationParameterAccess().getRule();
	}

	//Service:
	//	NamedService | CrudService;
	public ServiceElements getServiceAccess() {
		return (pService != null) ? pService : (pService = new ServiceElements());
	}
	
	public ParserRule getServiceRule() {
		return getServiceAccess().getRule();
	}

	//NamedService:
	//	Interface | LegacyServlet;
	public NamedServiceElements getNamedServiceAccess() {
		return (pNamedService != null) ? pNamedService : (pNamedService = new NamedServiceElements());
	}
	
	public ParserRule getNamedServiceRule() {
		return getNamedServiceAccess().getRule();
	}

	//// regular interfaces:
	//Interface:
	//	"interface" name=ID method=HttpMethods inputType=DefinedTypeLiteral? ("->" outputType=TypeLiteral)?
	//	notAuthenticated?="not-authenticated"? ("implemented-by" legacyServlet=[LegacyServlet])? documentation=STRING?;
	public InterfaceElements getInterfaceAccess() {
		return (pInterface != null) ? pInterface : (pInterface = new InterfaceElements());
	}
	
	public ParserRule getInterfaceRule() {
		return getInterfaceAccess().getRule();
	}

	/// *
	//	 * validation:
	//	 * 		1-  outputType is either a DefinedTypeLiteral or an ListTypeLiteral		[√]
	//	 * 		2-  inputType != null if method == POST									[√]
	//	 * 		3-  !(inputType == null && outputType == null)							[√]
	//	 * / enum HttpMethods:
	//	get="GET" | post="POST";
	public HttpMethodsElements getHttpMethodsAccess() {
		return (unknownRuleHttpMethods != null) ? unknownRuleHttpMethods : (unknownRuleHttpMethods = new HttpMethodsElements());
	}
	
	public EnumRule getHttpMethodsRule() {
		return getHttpMethodsAccess().getRule();
	}

	//// legacy servlets:
	//LegacyServlet:
	//	"legacy-servlet" name=ID ":" urlPattern=URL "->" fqClassName=QualifiedName;
	public LegacyServletElements getLegacyServletAccess() {
		return (pLegacyServlet != null) ? pLegacyServlet : (pLegacyServlet = new LegacyServletElements());
	}
	
	public ParserRule getLegacyServletRule() {
		return getLegacyServletAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//// CRUD services:
	//CrudService:
	//	"crud-service" structure=[struct::Structure] ":" services+=CrudTypes*;
	public CrudServiceElements getCrudServiceAccess() {
		return (pCrudService != null) ? pCrudService : (pCrudService = new CrudServiceElements());
	}
	
	public ParserRule getCrudServiceRule() {
		return getCrudServiceAccess().getRule();
	}

	//// TODO  consider ditching this and just picking up what CRUD services are required from the .sim_ui models;
	//// on the other hand: it might be wise to be able to restrict the available CRUD services for security reasons.
	//enum CrudTypes:
	//	create | getById="get-by-id" | update | delete;
	public CrudTypesElements getCrudTypesAccess() {
		return (unknownRuleCrudTypes != null) ? unknownRuleCrudTypes : (unknownRuleCrudTypes = new CrudTypesElements());
	}
	
	public EnumRule getCrudTypesRule() {
		return getCrudTypesAccess().getRule();
	}

	//// custom terminal:
	//terminal URL:
	//	"/" ("a".."z" | "A".."Z" | "0".."9" | "_" | "/" | ".")+;
	public TerminalRule getURLRule() {
		return (tURL != null) ? tURL : (tURL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "URL"));
	} 

	//StructureModel:
	//	typeDefinitions+=DefinedType*;
	public SimStructureDslGrammarAccess.StructureModelElements getStructureModelAccess() {
		return gaSimStructureDsl.getStructureModelAccess();
	}
	
	public ParserRule getStructureModelRule() {
		return getStructureModelAccess().getRule();
	}

	//DefinedType:
	//	StructureDefinition | EnumerationDefinition;
	public SimStructureDslGrammarAccess.DefinedTypeElements getDefinedTypeAccess() {
		return gaSimStructureDsl.getDefinedTypeAccess();
	}
	
	public ParserRule getDefinedTypeRule() {
		return getDefinedTypeAccess().getRule();
	}

	//StructureDefinition returns Structure:
	//	"structure" name=ID persistent?="persistent"? "{" features+=Feature* "}";
	public SimStructureDslGrammarAccess.StructureDefinitionElements getStructureDefinitionAccess() {
		return gaSimStructureDsl.getStructureDefinitionAccess();
	}
	
	public ParserRule getStructureDefinitionRule() {
		return getStructureDefinitionAccess().getRule();
	}

	/// *
	//	 * validation:
	//	 * 		1-  #features > 0														[√]
	//	 * 		2-  !persistent || structure-typed-features.forAll[type.persistent] 	[√]
	//	 * / / *
	//	 * semantics: corresponds to a JSON structure (+ all associated semantics, no references)
	//	 * 		as well as POJOs, controllers and CRUD servlets on the backend in case of the `persistent` marking
	//	 * / Feature:
	//	name=ID optional?="optional"? ":" type=TypeLiteral;
	public SimStructureDslGrammarAccess.FeatureElements getFeatureAccess() {
		return gaSimStructureDsl.getFeatureAccess();
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}

	//EnumerationDefinition returns Enumeration:
	//	"enumeration" name=ID "{" literals+=EnumerationLiteral* "}";
	public SimStructureDslGrammarAccess.EnumerationDefinitionElements getEnumerationDefinitionAccess() {
		return gaSimStructureDsl.getEnumerationDefinitionAccess();
	}
	
	public ParserRule getEnumerationDefinitionRule() {
		return getEnumerationDefinitionAccess().getRule();
	}

	/// *
	//	 * validation:
	//	 * 		1-  #literals > 0					[√]
	//	 * 		2-  literals are uniquely-named		[ ]
	//	 * / EnumerationLiteral:
	//	name=EnumerationName "->" displayName=STRING;
	public SimStructureDslGrammarAccess.EnumerationLiteralElements getEnumerationLiteralAccess() {
		return gaSimStructureDsl.getEnumerationLiteralAccess();
	}
	
	public ParserRule getEnumerationLiteralRule() {
		return getEnumerationLiteralAccess().getRule();
	}

	//EnumerationName returns ecore::EString:
	//	ID | STRING | INT;
	public SimStructureDslGrammarAccess.EnumerationNameElements getEnumerationNameAccess() {
		return gaSimStructureDsl.getEnumerationNameAccess();
	}
	
	public ParserRule getEnumerationNameRule() {
		return getEnumerationNameAccess().getRule();
	}

	/// *
	// * +-------------+
	// * | type system |
	// * +-------------+
	// * / TypeLiteral:
	//	BuiltinTypeLiteral | DefinedTypeLiteral | ListTypeLiteral | SyntheticTypeLiteral;
	public SimStructureDslGrammarAccess.TypeLiteralElements getTypeLiteralAccess() {
		return gaSimStructureDsl.getTypeLiteralAccess();
	}
	
	public ParserRule getTypeLiteralRule() {
		return getTypeLiteralAccess().getRule();
	}

	//BuiltinTypeLiteral:
	//	builtin=BuiltinTypes;
	public SimStructureDslGrammarAccess.BuiltinTypeLiteralElements getBuiltinTypeLiteralAccess() {
		return gaSimStructureDsl.getBuiltinTypeLiteralAccess();
	}
	
	public ParserRule getBuiltinTypeLiteralRule() {
		return getBuiltinTypeLiteralAccess().getRule();
	}

	/// *
	// * Any changes made to this enum should be reflected in:
	// * - JavascriptGenerator.asEmptyJsMap
	// * - TestGenerator.getTestThingy and getTestEquals
	// * - SimpleTypeFactory and SimpleTypeConverter
	// * - JavaGeneratorHelper.asJavaTypeLiteral
	// * - SimStructureDslExtensions.isSimpleTyped
	// * - TypeSystemExtension.isPrimitiveTyped
	// * / enum BuiltinTypes:
	//	string="String" | boolean="Boolean" | integer="Integer" | url="URL" | text="Text" | number="Number" | email="Email" |
	//	phone="Phone" | date="Date" | password="Password";
	public SimStructureDslGrammarAccess.BuiltinTypesElements getBuiltinTypesAccess() {
		return gaSimStructureDsl.getBuiltinTypesAccess();
	}
	
	public EnumRule getBuiltinTypesRule() {
		return getBuiltinTypesAccess().getRule();
	}

	//// highlighting: just colored, not bold (=fugly)	[ ]
	//DefinedTypeLiteral:
	//	type=[DefinedType];
	public SimStructureDslGrammarAccess.DefinedTypeLiteralElements getDefinedTypeLiteralAccess() {
		return gaSimStructureDsl.getDefinedTypeLiteralAccess();
	}
	
	public ParserRule getDefinedTypeLiteralRule() {
		return getDefinedTypeLiteralAccess().getRule();
	}

	//// highlighting: render in italics					[ ]
	//ListTypeLiteral:
	//	"[" itemType=TypeLiteral "]";
	public SimStructureDslGrammarAccess.ListTypeLiteralElements getListTypeLiteralAccess() {
		return gaSimStructureDsl.getListTypeLiteralAccess();
	}
	
	public ParserRule getListTypeLiteralRule() {
		return getListTypeLiteralAccess().getRule();
	}

	//// validation: synthetic types can't be used in SimScript-Structure		[√]
	//// TODO  move expressions to here
	/// *
	// * Challenge: the expressions sub language refers to some concepts which are not intrinsic to the SimScript-Structure DSL,
	// * such as interfaces (or NamedService-s) from SimScript-Backend. It should be able to "inject" those things in SimScript-UI
	// * even though they are not defined in SimScript-Structure.
	// * / SyntheticTypeLiteral:
	//	{CallbackLiteral} // semantics: the (type literal of) a [ui::StatementBlock] in a `callback` feature
	//	"Callback" | {CallbackErrorResponseLiteral} // semantics: the (type literal of) the response returned when an interface (AJAX) call fails
	//	"Error" | {VoidLiteral} // semantics: the (type literal of) void type
	//	"$Void";
	public SimStructureDslGrammarAccess.SyntheticTypeLiteralElements getSyntheticTypeLiteralAccess() {
		return gaSimStructureDsl.getSyntheticTypeLiteralAccess();
	}
	
	public ParserRule getSyntheticTypeLiteralRule() {
		return getSyntheticTypeLiteralAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaSimStructureDsl.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaSimStructureDsl.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaSimStructureDsl.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaSimStructureDsl.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaSimStructureDsl.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaSimStructureDsl.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaSimStructureDsl.getANY_OTHERRule();
	} 
}
