/*
* generated by Xtext
*/
grammar InternalSimStructureDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package nl.dslmeinte.simscript.structure.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package nl.dslmeinte.simscript.structure.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import nl.dslmeinte.simscript.structure.services.SimStructureDslGrammarAccess;

}

@parser::members {

 	private SimStructureDslGrammarAccess grammarAccess;
 	
    public InternalSimStructureDslParser(TokenStream input, SimStructureDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "StructureModel";	
   	}
   	
   	@Override
   	protected SimStructureDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleStructureModel
entryRuleStructureModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStructureModelRule()); }
	 iv_ruleStructureModel=ruleStructureModel 
	 { $current=$iv_ruleStructureModel.current; } 
	 EOF 
;

// Rule StructureModel
ruleStructureModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getStructureModelAccess().getTypeDefinitionsDefinedTypeParserRuleCall_0()); 
	    }
		lv_typeDefinitions_0_0=ruleDefinedType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStructureModelRule());
	        }
       		add(
       			$current, 
       			"typeDefinitions",
        		lv_typeDefinitions_0_0, 
        		"DefinedType");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleDefinedType
entryRuleDefinedType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefinedTypeRule()); }
	 iv_ruleDefinedType=ruleDefinedType 
	 { $current=$iv_ruleDefinedType.current; } 
	 EOF 
;

// Rule DefinedType
ruleDefinedType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDefinedTypeAccess().getStructureDefinitionParserRuleCall_0()); 
    }
    this_StructureDefinition_0=ruleStructureDefinition
    { 
        $current = $this_StructureDefinition_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDefinedTypeAccess().getEnumerationDefinitionParserRuleCall_1()); 
    }
    this_EnumerationDefinition_1=ruleEnumerationDefinition
    { 
        $current = $this_EnumerationDefinition_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleStructureDefinition
entryRuleStructureDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStructureDefinitionRule()); }
	 iv_ruleStructureDefinition=ruleStructureDefinition 
	 { $current=$iv_ruleStructureDefinition.current; } 
	 EOF 
;

// Rule StructureDefinition
ruleStructureDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='structure' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStructureDefinitionAccess().getStructureKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getStructureDefinitionAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStructureDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		lv_persistent_2_0=	'persistent' 
    {
        newLeafNode(lv_persistent_2_0, grammarAccess.getStructureDefinitionAccess().getPersistentPersistentKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStructureDefinitionRule());
	        }
       		setWithLastConsumed($current, "persistent", true, "persistent");
	    }

)
)?	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getStructureDefinitionAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStructureDefinitionAccess().getFeaturesFeatureParserRuleCall_4_0()); 
	    }
		lv_features_4_0=ruleFeature		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStructureDefinitionRule());
	        }
       		add(
       			$current, 
       			"features",
        		lv_features_4_0, 
        		"Feature");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getStructureDefinitionAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleFeature
entryRuleFeature returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFeatureRule()); }
	 iv_ruleFeature=ruleFeature 
	 { $current=$iv_ruleFeature.current; } 
	 EOF 
;

// Rule Feature
ruleFeature returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getFeatureAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFeatureRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(
(
		lv_optional_1_0=	'optional' 
    {
        newLeafNode(lv_optional_1_0, grammarAccess.getFeatureAccess().getOptionalOptionalKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFeatureRule());
	        }
       		setWithLastConsumed($current, "optional", true, "optional");
	    }

)
)?	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFeatureAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFeatureAccess().getTypeTypeLiteralParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleTypeLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeatureRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"TypeLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleEnumerationDefinition
entryRuleEnumerationDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumerationDefinitionRule()); }
	 iv_ruleEnumerationDefinition=ruleEnumerationDefinition 
	 { $current=$iv_ruleEnumerationDefinition.current; } 
	 EOF 
;

// Rule EnumerationDefinition
ruleEnumerationDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='enumeration' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEnumerationDefinitionAccess().getEnumerationKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getEnumerationDefinitionAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumerationDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEnumerationDefinitionAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumerationDefinitionAccess().getLiteralsEnumerationLiteralParserRuleCall_3_0()); 
	    }
		lv_literals_3_0=ruleEnumerationLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumerationDefinitionRule());
	        }
       		add(
       			$current, 
       			"literals",
        		lv_literals_3_0, 
        		"EnumerationLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getEnumerationDefinitionAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleEnumerationLiteral
entryRuleEnumerationLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumerationLiteralRule()); }
	 iv_ruleEnumerationLiteral=ruleEnumerationLiteral 
	 { $current=$iv_ruleEnumerationLiteral.current; } 
	 EOF 
;

// Rule EnumerationLiteral
ruleEnumerationLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEnumerationLiteralAccess().getNameEnumerationNameParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleEnumerationName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumerationLiteralRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"EnumerationName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='->' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEnumerationLiteralAccess().getHyphenMinusGreaterThanSignKeyword_1());
    }
(
(
		lv_displayName_2_0=RULE_STRING
		{
			newLeafNode(lv_displayName_2_0, grammarAccess.getEnumerationLiteralAccess().getDisplayNameSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumerationLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"displayName",
        		lv_displayName_2_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleEnumerationName
entryRuleEnumerationName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumerationNameRule()); } 
	 iv_ruleEnumerationName=ruleEnumerationName 
	 { $current=$iv_ruleEnumerationName.current.getText(); }  
	 EOF 
;

// Rule EnumerationName
ruleEnumerationName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getEnumerationNameAccess().getIDTerminalRuleCall_0()); 
    }

    |    this_STRING_1=RULE_STRING    {
		$current.merge(this_STRING_1);
    }

    { 
    newLeafNode(this_STRING_1, grammarAccess.getEnumerationNameAccess().getSTRINGTerminalRuleCall_1()); 
    }

    |    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getEnumerationNameAccess().getINTTerminalRuleCall_2()); 
    }
)
    ;





// Entry rule entryRuleTypeLiteral
entryRuleTypeLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeLiteralRule()); }
	 iv_ruleTypeLiteral=ruleTypeLiteral 
	 { $current=$iv_ruleTypeLiteral.current; } 
	 EOF 
;

// Rule TypeLiteral
ruleTypeLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTypeLiteralAccess().getBuiltinTypeLiteralParserRuleCall_0()); 
    }
    this_BuiltinTypeLiteral_0=ruleBuiltinTypeLiteral
    { 
        $current = $this_BuiltinTypeLiteral_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeLiteralAccess().getDefinedTypeLiteralParserRuleCall_1()); 
    }
    this_DefinedTypeLiteral_1=ruleDefinedTypeLiteral
    { 
        $current = $this_DefinedTypeLiteral_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeLiteralAccess().getListTypeLiteralParserRuleCall_2()); 
    }
    this_ListTypeLiteral_2=ruleListTypeLiteral
    { 
        $current = $this_ListTypeLiteral_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeLiteralAccess().getSyntheticTypeLiteralParserRuleCall_3()); 
    }
    this_SyntheticTypeLiteral_3=ruleSyntheticTypeLiteral
    { 
        $current = $this_SyntheticTypeLiteral_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBuiltinTypeLiteral
entryRuleBuiltinTypeLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBuiltinTypeLiteralRule()); }
	 iv_ruleBuiltinTypeLiteral=ruleBuiltinTypeLiteral 
	 { $current=$iv_ruleBuiltinTypeLiteral.current; } 
	 EOF 
;

// Rule BuiltinTypeLiteral
ruleBuiltinTypeLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getBuiltinTypeLiteralAccess().getBuiltinBuiltinTypesEnumRuleCall_0()); 
	    }
		lv_builtin_0_0=ruleBuiltinTypes		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBuiltinTypeLiteralRule());
	        }
       		set(
       			$current, 
       			"builtin",
        		lv_builtin_0_0, 
        		"BuiltinTypes");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleDefinedTypeLiteral
entryRuleDefinedTypeLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefinedTypeLiteralRule()); }
	 iv_ruleDefinedTypeLiteral=ruleDefinedTypeLiteral 
	 { $current=$iv_ruleDefinedTypeLiteral.current; } 
	 EOF 
;

// Rule DefinedTypeLiteral
ruleDefinedTypeLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefinedTypeLiteralRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getDefinedTypeLiteralAccess().getTypeDefinedTypeCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleListTypeLiteral
entryRuleListTypeLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getListTypeLiteralRule()); }
	 iv_ruleListTypeLiteral=ruleListTypeLiteral 
	 { $current=$iv_ruleListTypeLiteral.current; } 
	 EOF 
;

// Rule ListTypeLiteral
ruleListTypeLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getListTypeLiteralAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getListTypeLiteralAccess().getItemTypeTypeLiteralParserRuleCall_1_0()); 
	    }
		lv_itemType_1_0=ruleTypeLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListTypeLiteralRule());
	        }
       		set(
       			$current, 
       			"itemType",
        		lv_itemType_1_0, 
        		"TypeLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=']' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getListTypeLiteralAccess().getRightSquareBracketKeyword_2());
    }
)
;





// Entry rule entryRuleSyntheticTypeLiteral
entryRuleSyntheticTypeLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSyntheticTypeLiteralRule()); }
	 iv_ruleSyntheticTypeLiteral=ruleSyntheticTypeLiteral 
	 { $current=$iv_ruleSyntheticTypeLiteral.current; } 
	 EOF 
;

// Rule SyntheticTypeLiteral
ruleSyntheticTypeLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSyntheticTypeLiteralAccess().getCallbackLiteralAction_0_0(),
            $current);
    }
)	otherlv_1='Callback' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSyntheticTypeLiteralAccess().getCallbackKeyword_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSyntheticTypeLiteralAccess().getCallbackErrorResponseLiteralAction_1_0(),
            $current);
    }
)	otherlv_3='Error' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSyntheticTypeLiteralAccess().getErrorKeyword_1_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSyntheticTypeLiteralAccess().getVoidLiteralAction_2_0(),
            $current);
    }
)	otherlv_5='$Void' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSyntheticTypeLiteralAccess().getVoidKeyword_2_1());
    }
))
;





// Rule BuiltinTypes
ruleBuiltinTypes returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='String' 
	{
        $current = grammarAccess.getBuiltinTypesAccess().getStringEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getBuiltinTypesAccess().getStringEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='Boolean' 
	{
        $current = grammarAccess.getBuiltinTypesAccess().getBooleanEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getBuiltinTypesAccess().getBooleanEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='Integer' 
	{
        $current = grammarAccess.getBuiltinTypesAccess().getIntegerEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getBuiltinTypesAccess().getIntegerEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='URL' 
	{
        $current = grammarAccess.getBuiltinTypesAccess().getUrlEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getBuiltinTypesAccess().getUrlEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='Text' 
	{
        $current = grammarAccess.getBuiltinTypesAccess().getTextEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getBuiltinTypesAccess().getTextEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='Number' 
	{
        $current = grammarAccess.getBuiltinTypesAccess().getNumberEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getBuiltinTypesAccess().getNumberEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='Email' 
	{
        $current = grammarAccess.getBuiltinTypesAccess().getEmailEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getBuiltinTypesAccess().getEmailEnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='Phone' 
	{
        $current = grammarAccess.getBuiltinTypesAccess().getPhoneEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getBuiltinTypesAccess().getPhoneEnumLiteralDeclaration_7()); 
    }
)
    |(	enumLiteral_8='Date' 
	{
        $current = grammarAccess.getBuiltinTypesAccess().getDateEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_8, grammarAccess.getBuiltinTypesAccess().getDateEnumLiteralDeclaration_8()); 
    }
)
    |(	enumLiteral_9='Password' 
	{
        $current = grammarAccess.getBuiltinTypesAccess().getPasswordEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_9, grammarAccess.getBuiltinTypesAccess().getPasswordEnumLiteralDeclaration_9()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


