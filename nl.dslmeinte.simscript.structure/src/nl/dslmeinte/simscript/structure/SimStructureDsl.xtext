grammar nl.dslmeinte.simscript.structure.SimStructureDsl with org.eclipse.xtext.common.Terminals

import "http://www.dslconsultancy.com/simscript/structure/StructureDsl" as struct


StructureModel returns struct::StructureModel:
	typeDefinitions+=DefinedType*
	;

DefinedType returns struct::DefinedType:
	StructureDefinition | EnumerationDefinition
	;

StructureDefinition returns struct::Structure:
	'structure' name=ID  persistent?='persistent'?
	'{'
		features+=Feature*
	'}'
	;
	/*
	 * validation:
	 * 		1-  #features > 0														[√]
	 * 		2-  !persistent || structure-typed-features.forAll[type.persistent] 	[√]
	 */
	/*
	 * semantics: corresponds to a JSON structure (+ all associated semantics, no references)
	 * 		as well as POJOs, controllers and CRUD servlets on the backend in case of the `persistent` marking
	 */

Feature returns struct::Feature:
	name=ID optional?='optional'? ':' type=TypeLiteral
	;

EnumerationDefinition returns struct::Enumeration:
	'enumeration' name=ID
	'{'
		literals+=EnumerationLiteral*
	'}'
	;
	/*
	 * validation:
	 * 		1-  #literals > 0					[√]
	 * 		2-  literals are uniquely-named		[ ]
	 */

EnumerationLiteral returns struct::EnumerationLiteral:
	name=EnumerationName '->' displayName=STRING
	;

EnumerationName:
	ID | STRING | INT
	;


/*
 * +-------------+
 * | type system |
 * +-------------+
 */

TypeLiteral returns struct::TypeLiteral:
	BuiltinTypeLiteral | DefinedTypeLiteral | ListTypeLiteral | SyntheticTypeLiteral
	;

BuiltinTypeLiteral returns struct::BuiltinTypeLiteral:
	builtin=BuiltinTypes
	;

/*
 * Any changes made to this enum should be reflected in:
 * - JavascriptGenerator.asEmptyJsMap
 * - TestGenerator.getTestThingy and getTestEquals
 * - SimpleTypeFactory and SimpleTypeConverter
 * - JavaGeneratorHelper.asJavaTypeLiteral
 * - SimStructureDslExtensions.isSimpleTyped
 * - TypeSystemExtension.isPrimitiveTyped
 */
enum BuiltinTypes returns struct::BuiltinTypes:
	  string='String'
	| boolean='Boolean'
	| integer='Integer'
	| url='URL'
	| text='Text'
	| number='Number'
	| email='Email'
	| phone='Phone'
	| date='Date'
	| password='Password'
	;
	// highlighting: just colored, not bold (=fugly)	[ ]

DefinedTypeLiteral returns struct::DefinedTypeLiteral:
	type=[struct::DefinedType]
	;
	// highlighting: render in italics					[ ]

ListTypeLiteral returns struct::ListTypeLiteral:
	'[' itemType=TypeLiteral ']'
	;

SyntheticTypeLiteral returns struct::SyntheticTypeLiteral:
	  {struct::CallbackLiteral} 'Callback'				// semantics: the (type literal of) a [ui::StatementBlock] in a `callback` feature
	| {struct::CallbackErrorResponseLiteral} 'Error'	// semantics: the (type literal of) the response returned when an interface (AJAX) call fails
	| {struct::VoidLiteral} '$Void'						// semantics: the (type literal of) void type
	;
	// validation: synthetic types can't be used in SimScript-Structure		[√]


// TODO  move expressions to here
/*
 * Challenge: the expressions sub language refers to some concepts which are not intrinsic to the SimScript-Structure DSL,
 * such as interfaces (or NamedService-s) from SimScript-Backend. It should be able to "inject" those things in SimScript-UI
 * even though they are not defined in SimScript-Structure.
 */

