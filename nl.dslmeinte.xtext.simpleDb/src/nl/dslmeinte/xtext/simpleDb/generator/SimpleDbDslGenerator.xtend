package nl.dslmeinte.xtext.simpleDb.generator

import com.google.inject.Inject
import nl.dslmeinte.xtext.simpleDb.extensions.SimpleDbExtensions
import nl.dslmeinte.xtext.simpleDb.simpleDbDsl.BooleanLiteral
import nl.dslmeinte.xtext.simpleDb.simpleDbDsl.Column
import nl.dslmeinte.xtext.simpleDb.simpleDbDsl.DataTypeReference
import nl.dslmeinte.xtext.simpleDb.simpleDbDsl.DatabaseModel
import nl.dslmeinte.xtext.simpleDb.simpleDbDsl.DateLiteral
import nl.dslmeinte.xtext.simpleDb.simpleDbDsl.EnumerationReference
import nl.dslmeinte.xtext.simpleDb.simpleDbDsl.FloatLiteral
import nl.dslmeinte.xtext.simpleDb.simpleDbDsl.ForeignKeyColumn
import nl.dslmeinte.xtext.simpleDb.simpleDbDsl.IntLiteral
import nl.dslmeinte.xtext.simpleDb.simpleDbDsl.SimpleColumn
import nl.dslmeinte.xtext.simpleDb.simpleDbDsl.SqlTypeLiteral
import nl.dslmeinte.xtext.simpleDb.simpleDbDsl.Table
import nl.dslmeinte.xtext.simpleDb.simpleDbDsl.TextLiteral
import nl.dslmeinte.xtext.simpleDb.simpleDbDsl.VarCharLiteral
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator

class SimpleDbDslGenerator implements IGenerator {

	@Inject extension SimpleDbExtensions


	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		val db = resource.contents.head as DatabaseModel

		val dbGenPath = "../db/gen/"	// relative to ${project}/src-gen/

		fsa.generateFile(dbGenPath + "create_" + db.name + ".sql", db.createSql)
		fsa.generateFile(dbGenPath + "drop_tables_" + db.name + ".sql", db.drop)
	}


	def private createSql(DatabaseModel it)
		'''
		--
		-- Database: `«name»`
		-- (Schema generated by nl.dslmeinte.xtext.simpleDb plug-in.)
		--

		«FOR table : tables»
			«table.createSql»
		«ENDFOR»

		«FOR table : tables»
			«FOR column : table.foreignKeyColumns»
				ALTER TABLE «table.name» ADD FOREIGN KEY («column.name») REFERENCES «column.primaryId.table.name»(«column.primaryId.primary.name»);
			«ENDFOR»
		«ENDFOR»
		'''

	def private createSql(Table it)
		'''
		CREATE TABLE `«name»` (
			«FOR line : sqlLines SEPARATOR ","»
				«line»
			«ENDFOR»
		) ENGINE=InnoDB DEFAULT CHARSET=latin1«IF simpleColumns.exists[autoIncrement]» AUTO_INCREMENT=100«ENDIF»;

		'''


	def private createSql(Column it) {
		switch it {
			SimpleColumn:		'''`«name»` «it.type.toSql»«IF !nullable» NOT NULL«ENDIF»«IF it.autoIncrement» AUTO_INCREMENT«ENDIF»'''
			ForeignKeyColumn:	'''`«name»` «it.primaryId.primary.type.toSql»«IF !nullable» NOT NULL«ENDIF»'''
		}
	}


	def private toSql(SqlTypeLiteral it) {
		switch it {
			BooleanLiteral:			"boolean"
			DateLiteral:			"date"
			IntLiteral:				'''int(«it.size»)'''
			FloatLiteral:			'''float(«it.digits», «it.decimals»)'''
			TextLiteral:			"text"
			DataTypeReference:		it.datatype.type.toSql as CharSequence		// cast required to coerce return type in spite of recursiveness
			EnumerationReference:	'''enum(«it.enumeration.literals.map[name.surround].join(", ")»)'''
			VarCharLiteral:			'''varchar(«it.size»)'''
			default:
				'''???  -- «it.^class.simpleName» is not mapped by toSql'''
		}
	}

	def private surround(CharSequence text) {
		"'" + text + "'"
	}

	def private sqlLines(Table it) {
		  columns.map[it.createSql]
		+ addIf('''`timestamp` TIMESTAMP NOT NULL''', timestamped)
		+ simpleColumns.filter[key].map['''«IF primary»PRIMARY «ENDIF»«IF unique»UNIQUE «ENDIF»KEY «IF !primary»`«name»` «ENDIF»(`«name»`)''']
		+ addIf('''KEY `timestamp` (`timestamp`)''', timestamped && timestampIndexed)
	}

	def private <T> addIf(T object, CharSequence line, boolean add) {
		if( add ) {
			newArrayList(line)
		} else {
			<CharSequence>emptyList
		}
	}


	def private drop(DatabaseModel it)
		'''
		-- (generated by Simple-DB DSL implementation)
		SET foreign_key_checks = 0;
		DROP TABLE IF EXISTS «FOR table : tables SEPARATOR ', '»«table.name»«ENDFOR»;
		SET foreign_key_checks = 1;
		'''
	
}
