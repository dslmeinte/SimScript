/*
* generated by Xtext
*/
package nl.dslmeinte.simscript.ui.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IEObjectConsumer;

import nl.dslmeinte.simscript.ui.services.SimUiDslGrammarAccess;

import com.google.inject.Inject;

@SuppressWarnings("all")
public class SimUiDslParsetreeConstructor extends org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor {
		
	@Inject
	private SimUiDslGrammarAccess grammarAccess;
	
	@Override
	protected AbstractToken getRootToken(IEObjectConsumer inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IEObjectConsumer inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UiModule_Group(this, this, 0, inst);
			case 1: return new TopLevelDefinition_Alternatives(this, this, 1, inst);
			case 2: return new TableRowsDefinition_Group(this, this, 2, inst);
			case 3: return new Viewable_Alternatives(this, this, 3, inst);
			case 4: return new DefinedViewable_Group(this, this, 4, inst);
			case 5: return new ManualViewable_Group(this, this, 5, inst);
			case 6: return new LocalViewableDefinition_Alternatives(this, this, 6, inst);
			case 7: return new ValuesBlock_Group(this, this, 7, inst);
			case 8: return new ValueDeclaration_Group(this, this, 8, inst);
			case 9: return new Value_NameAssignment(this, this, 9, inst);
			case 10: return new AbstractValueDeclaration_Alternatives(this, this, 10, inst);
			case 11: return new Parameter_Group(this, this, 11, inst);
			case 12: return new ParameterList_Group(this, this, 12, inst);
			case 13: return new MethodDefinition_Group(this, this, 13, inst);
			case 14: return new Method_NameAssignment(this, this, 14, inst);
			case 15: return new Element_Alternatives(this, this, 15, inst);
			case 16: return new Quotation_PathAssignment(this, this, 16, inst);
			case 17: return new Binding_Group(this, this, 17, inst);
			case 18: return new ElementBody_Group(this, this, 18, inst);
			case 19: return new ComponentInvocation_Group(this, this, 19, inst);
			case 20: return new Argument_Group(this, this, 20, inst);
			case 21: return new ArgumentList_Group(this, this, 21, inst);
			case 22: return new InputElement_Group(this, this, 22, inst);
			case 23: return new RadioOption_Group(this, this, 23, inst);
			case 24: return new StructureOption_Group(this, this, 24, inst);
			case 25: return new ButtonElement_Group(this, this, 25, inst);
			case 26: return new BlockElement_Group(this, this, 26, inst);
			case 27: return new ListElement_Group(this, this, 27, inst);
			case 28: return new ListVariable_NameAssignment(this, this, 28, inst);
			case 29: return new TableElement_Group(this, this, 29, inst);
			case 30: return new TableBodyElement_Alternatives(this, this, 30, inst);
			case 31: return new TableRowsInvocation_Group(this, this, 31, inst);
			case 32: return new TableRow_Group(this, this, 32, inst);
			case 33: return new LabeledTableElement_Group(this, this, 33, inst);
			case 34: return new LabeledTableRow_Group(this, this, 34, inst);
			case 35: return new ProgressBarTabSet_Group(this, this, 35, inst);
			case 36: return new TabDeclaration_UnorderedGroup(this, this, 36, inst);
			case 37: return new GroupElement_Group(this, this, 37, inst);
			case 38: return new CountdownTimer_Group(this, this, 38, inst);
			case 39: return new ObserveElement_Group(this, this, 39, inst);
			case 40: return new CalendarElement_Group(this, this, 40, inst);
			case 41: return new TimeSlotListElement_Group(this, this, 41, inst);
			case 42: return new SlotAddElement_Group(this, this, 42, inst);
			case 43: return new WhenElement_Group(this, this, 43, inst);
			case 44: return new ImageElement_Group(this, this, 44, inst);
			case 45: return new FrameElement_Group(this, this, 45, inst);
			case 46: return new LineBreakElement_Group(this, this, 46, inst);
			case 47: return new StatementBlock_Group(this, this, 47, inst);
			case 48: return new Statement_Alternatives(this, this, 48, inst);
			case 49: return new ExitingStatement_Alternatives(this, this, 49, inst);
			case 50: return new NonExitingStatement_Alternatives(this, this, 50, inst);
			case 51: return new ForStatement_Group(this, this, 51, inst);
			case 52: return new ListRemoveStatement_Group(this, this, 52, inst);
			case 53: return new AssignmentOrExpressionStatement_Group(this, this, 53, inst);
			case 54: return new ShowModalStatement_Group(this, this, 54, inst);
			case 55: return new ExitModalStatement_Group(this, this, 55, inst);
			case 56: return new GotoScreenStatement_Group(this, this, 56, inst);
			case 57: return new GotoModuleStatement_Group(this, this, 57, inst);
			case 58: return new PrincipalArgument_Group(this, this, 58, inst);
			case 59: return new CredentialArgument_Group(this, this, 59, inst);
			case 60: return new IfStatement_Group(this, this, 60, inst);
			case 61: return new LocalValueDeclarationStatement_Group(this, this, 61, inst);
			case 62: return new ViewableCallSite_Alternatives(this, this, 62, inst);
			case 63: return new Expression_TernaryExpressionParserRuleCall(this, this, 63, inst);
			case 64: return new TernaryExpression_Group(this, this, 64, inst);
			case 65: return new OrExpression_Group(this, this, 65, inst);
			case 66: return new AndExpression_Group(this, this, 66, inst);
			case 67: return new ComparisonExpression_Group(this, this, 67, inst);
			case 68: return new AdditiveExpression_Group(this, this, 68, inst);
			case 69: return new MultiplicativeExpression_Group(this, this, 69, inst);
			case 70: return new NotExpression_Alternatives(this, this, 70, inst);
			case 71: return new InterfaceCallExpression_Alternatives(this, this, 71, inst);
			case 72: return new ServiceIdentification_Alternatives(this, this, 72, inst);
			case 73: return new FeatureAccessExpression_Group(this, this, 73, inst);
			case 74: return new PrimaryExpression_Alternatives(this, this, 74, inst);
			case 75: return new DateExpression_Alternatives(this, this, 75, inst);
			case 76: return new BuiltinFunctionExpression_Group(this, this, 76, inst);
			case 77: return new LiteralExpression_Alternatives(this, this, 77, inst);
			case 78: return new ListLiteralExpression_Group(this, this, 78, inst);
			case 79: return new EnumerationLiteralExpression_Group(this, this, 79, inst);
			case 80: return new DecisionExpression_Group(this, this, 80, inst);
			case 81: return new DecisionCase_Group(this, this, 81, inst);
			case 82: return new CallbackExpressions_Alternatives(this, this, 82, inst);
			case 83: return new CallbackExpression_StatementBlockAssignment(this, this, 83, inst);
			case 84: return new StructureCreationExpression_Group(this, this, 84, inst);
			case 85: return new FeatureAssignment_Group(this, this, 85, inst);
			case 86: return new ValueReferenceOrMethodCallExpression_Group(this, this, 86, inst);
			case 87: return new ReferenceExpression_RefAssignment(this, this, 87, inst);
			case 88: return new Referable_Alternatives(this, this, 88, inst);
			case 89: return new StructureModel_TypeDefinitionsAssignment(this, this, 89, inst);
			case 90: return new DefinedType_Alternatives(this, this, 90, inst);
			case 91: return new StructureDefinition_Group(this, this, 91, inst);
			case 92: return new Feature_Group(this, this, 92, inst);
			case 93: return new EnumerationDefinition_Group(this, this, 93, inst);
			case 94: return new EnumerationLiteral_Group(this, this, 94, inst);
			case 95: return new TypeLiteral_Alternatives(this, this, 95, inst);
			case 96: return new BuiltinTypeLiteral_BuiltinAssignment(this, this, 96, inst);
			case 97: return new DefinedTypeLiteral_TypeAssignment(this, this, 97, inst);
			case 98: return new ListTypeLiteral_Group(this, this, 98, inst);
			case 99: return new SyntheticTypeLiteral_Alternatives(this, this, 99, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule UiModule ****************
 *
 * / **
 *  * General Dependencies/Assumptions:
 *  * 1.)	All widgets need framework js code (which should also be included in the HTML file) to work.
 *  * / / *
 *  * +------------+
 *  * | structural |
 *  * +------------+
 *  * / UiModule:
 * 	{UiModule} "ui-module" notAuthenticated?="not-authenticated"? definitions+=TopLevelDefinition*;
 *
 **/

// {UiModule} "ui-module" notAuthenticated?="not-authenticated"? definitions+=TopLevelDefinition*
protected class UiModule_Group extends GroupToken {
	
	public UiModule_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUiModuleAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UiModule_DefinitionsAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new UiModule_NotAuthenticatedAssignment_2(lastRuleCallOrigin, this, 1, inst);
			case 2: return new UiModule_UiModuleKeyword_1(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getUiModuleAccess().getUiModuleAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {UiModule}
protected class UiModule_UiModuleAction_0 extends ActionToken  {

	public UiModule_UiModuleAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getUiModuleAccess().getUiModuleAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "ui-module"
protected class UiModule_UiModuleKeyword_1 extends KeywordToken  {
	
	public UiModule_UiModuleKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUiModuleAccess().getUiModuleKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UiModule_UiModuleAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// notAuthenticated?="not-authenticated"?
protected class UiModule_NotAuthenticatedAssignment_2 extends AssignmentToken  {
	
	public UiModule_NotAuthenticatedAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUiModuleAccess().getNotAuthenticatedAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UiModule_UiModuleKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("notAuthenticated",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("notAuthenticated");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getUiModuleAccess().getNotAuthenticatedNotAuthenticatedKeyword_2_0();
			return obj;
		}
		return null;
	}

}

// definitions+=TopLevelDefinition*
protected class UiModule_DefinitionsAssignment_3 extends AssignmentToken  {
	
	public UiModule_DefinitionsAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUiModuleAccess().getDefinitionsAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TopLevelDefinition_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("definitions",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("definitions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTopLevelDefinitionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getUiModuleAccess().getDefinitionsTopLevelDefinitionParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new UiModule_DefinitionsAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new UiModule_NotAuthenticatedAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new UiModule_UiModuleKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule UiModule ****************/


/************ begin Rule TopLevelDefinition ****************
 *
 * // TODO  consider adding "module globals" such as (immutable) parameters and error handling
 * / *
 * 	 * validation:
 * 	 * 	the first screen of a module should not take any parameters, or the GotoModuleStatement should have arguments
 * 	 * / TopLevelDefinition:
 * 	Viewable | TableRowsDefinition | MethodDefinition;
 *
 **/

// Viewable | TableRowsDefinition | MethodDefinition
protected class TopLevelDefinition_Alternatives extends AlternativesToken {

	public TopLevelDefinition_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTopLevelDefinitionAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TopLevelDefinition_ViewableParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TopLevelDefinition_TableRowsDefinitionParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new TopLevelDefinition_MethodDefinitionParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDefinedViewableRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getManualViewableRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMethodDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTableRowsDefinitionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Viewable
protected class TopLevelDefinition_ViewableParserRuleCall_0 extends RuleCallToken {
	
	public TopLevelDefinition_ViewableParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTopLevelDefinitionAccess().getViewableParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Viewable_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDefinedViewableRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getManualViewableRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Viewable_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// TableRowsDefinition
protected class TopLevelDefinition_TableRowsDefinitionParserRuleCall_1 extends RuleCallToken {
	
	public TopLevelDefinition_TableRowsDefinitionParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTopLevelDefinitionAccess().getTableRowsDefinitionParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TableRowsDefinition_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTableRowsDefinitionRule().getType().getClassifier())
			return null;
		if(checkForRecursion(TableRowsDefinition_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// MethodDefinition
protected class TopLevelDefinition_MethodDefinitionParserRuleCall_2 extends RuleCallToken {
	
	public TopLevelDefinition_MethodDefinitionParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTopLevelDefinitionAccess().getMethodDefinitionParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MethodDefinition_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMethodDefinitionRule().getType().getClassifier())
			return null;
		if(checkForRecursion(MethodDefinition_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule TopLevelDefinition ****************/


/************ begin Rule TableRowsDefinition ****************
 *
 * TableRowsDefinition:
 * 	"table-rows" name=ID parameterList=ParameterList "{" rows+=TableRow* "}";
 *
 **/

// "table-rows" name=ID parameterList=ParameterList "{" rows+=TableRow* "}"
protected class TableRowsDefinition_Group extends GroupToken {
	
	public TableRowsDefinition_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTableRowsDefinitionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TableRowsDefinition_RightCurlyBracketKeyword_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTableRowsDefinitionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "table-rows"
protected class TableRowsDefinition_TableRowsKeyword_0 extends KeywordToken  {
	
	public TableRowsDefinition_TableRowsKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTableRowsDefinitionAccess().getTableRowsKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name=ID
protected class TableRowsDefinition_NameAssignment_1 extends AssignmentToken  {
	
	public TableRowsDefinition_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTableRowsDefinitionAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TableRowsDefinition_TableRowsKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getTableRowsDefinitionAccess().getNameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getTableRowsDefinitionAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// parameterList=ParameterList
protected class TableRowsDefinition_ParameterListAssignment_2 extends AssignmentToken  {
	
	public TableRowsDefinition_ParameterListAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTableRowsDefinitionAccess().getParameterListAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParameterList_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("parameterList",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("parameterList");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterListRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTableRowsDefinitionAccess().getParameterListParameterListParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TableRowsDefinition_NameAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "{"
protected class TableRowsDefinition_LeftCurlyBracketKeyword_3 extends KeywordToken  {
	
	public TableRowsDefinition_LeftCurlyBracketKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTableRowsDefinitionAccess().getLeftCurlyBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TableRowsDefinition_ParameterListAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// rows+=TableRow*
protected class TableRowsDefinition_RowsAssignment_4 extends AssignmentToken  {
	
	public TableRowsDefinition_RowsAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTableRowsDefinitionAccess().getRowsAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TableRow_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("rows",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("rows");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTableRowRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTableRowsDefinitionAccess().getRowsTableRowParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TableRowsDefinition_RowsAssignment_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new TableRowsDefinition_LeftCurlyBracketKeyword_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class TableRowsDefinition_RightCurlyBracketKeyword_5 extends KeywordToken  {
	
	public TableRowsDefinition_RightCurlyBracketKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTableRowsDefinitionAccess().getRightCurlyBracketKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TableRowsDefinition_RowsAssignment_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TableRowsDefinition_LeftCurlyBracketKeyword_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule TableRowsDefinition ****************/


/************ begin Rule Viewable ****************
 *
 * Viewable:
 * 	DefinedViewable | ManualViewable;
 *
 **/

// DefinedViewable | ManualViewable
protected class Viewable_Alternatives extends AlternativesToken {

	public Viewable_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getViewableAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Viewable_DefinedViewableParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Viewable_ManualViewableParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDefinedViewableRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getManualViewableRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// DefinedViewable
protected class Viewable_DefinedViewableParserRuleCall_0 extends RuleCallToken {
	
	public Viewable_DefinedViewableParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getViewableAccess().getDefinedViewableParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DefinedViewable_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDefinedViewableRule().getType().getClassifier())
			return null;
		if(checkForRecursion(DefinedViewable_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ManualViewable
protected class Viewable_ManualViewableParserRuleCall_1 extends RuleCallToken {
	
	public Viewable_ManualViewableParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getViewableAccess().getManualViewableParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ManualViewable_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getManualViewableRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ManualViewable_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Viewable ****************/


/************ begin Rule DefinedViewable ****************
 *
 * // derived feature: =screen(Viewable it) ::= type == _screen_	[√]
 * // pulled-up features: type, name, parameterList
 * DefinedViewable:
 * 	type=ViewableTypes name=ID parameterList=ParameterList "{" // (feature's value may be null)
 * 	valuesBlock=ValuesBlock? // (feature's value is always non-null)
 * 	definitions+=LocalViewableDefinition* "}";
 *
 **/

// type=ViewableTypes name=ID parameterList=ParameterList "{" // (feature's value may be null)
// valuesBlock=ValuesBlock? // (feature's value is always non-null)
// definitions+=LocalViewableDefinition* "}"
protected class DefinedViewable_Group extends GroupToken {
	
	public DefinedViewable_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDefinedViewableAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DefinedViewable_RightCurlyBracketKeyword_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDefinedViewableRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// type=ViewableTypes
protected class DefinedViewable_TypeAssignment_0 extends AssignmentToken  {
	
	public DefinedViewable_TypeAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDefinedViewableAccess().getTypeAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("type",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type");
		if(enumLitSerializer.isValid(obj.getEObject(), grammarAccess.getDefinedViewableAccess().getTypeViewableTypesEnumRuleCall_0_0(), value, null)) { 
			type = AssignmentType.ENUM_RULE_CALL;
			element = grammarAccess.getDefinedViewableAccess().getTypeViewableTypesEnumRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// name=ID
protected class DefinedViewable_NameAssignment_1 extends AssignmentToken  {
	
	public DefinedViewable_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDefinedViewableAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DefinedViewable_TypeAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getDefinedViewableAccess().getNameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getDefinedViewableAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// parameterList=ParameterList
protected class DefinedViewable_ParameterListAssignment_2 extends AssignmentToken  {
	
	public DefinedViewable_ParameterListAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDefinedViewableAccess().getParameterListAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParameterList_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("parameterList",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("parameterList");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterListRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDefinedViewableAccess().getParameterListParameterListParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new DefinedViewable_NameAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "{"
protected class DefinedViewable_LeftCurlyBracketKeyword_3 extends KeywordToken  {
	
	public DefinedViewable_LeftCurlyBracketKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDefinedViewableAccess().getLeftCurlyBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DefinedViewable_ParameterListAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// // (feature's value may be null)
// valuesBlock=ValuesBlock?
protected class DefinedViewable_ValuesBlockAssignment_4 extends AssignmentToken  {
	
	public DefinedViewable_ValuesBlockAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDefinedViewableAccess().getValuesBlockAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ValuesBlock_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("valuesBlock",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("valuesBlock");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getValuesBlockRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDefinedViewableAccess().getValuesBlockValuesBlockParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new DefinedViewable_LeftCurlyBracketKeyword_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// // (feature's value is always non-null)
// definitions+=LocalViewableDefinition*
protected class DefinedViewable_DefinitionsAssignment_5 extends AssignmentToken  {
	
	public DefinedViewable_DefinitionsAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDefinedViewableAccess().getDefinitionsAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LocalViewableDefinition_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("definitions",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("definitions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLocalViewableDefinitionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDefinedViewableAccess().getDefinitionsLocalViewableDefinitionParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new DefinedViewable_DefinitionsAssignment_5(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new DefinedViewable_ValuesBlockAssignment_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new DefinedViewable_LeftCurlyBracketKeyword_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class DefinedViewable_RightCurlyBracketKeyword_6 extends KeywordToken  {
	
	public DefinedViewable_RightCurlyBracketKeyword_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDefinedViewableAccess().getRightCurlyBracketKeyword_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DefinedViewable_DefinitionsAssignment_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new DefinedViewable_ValuesBlockAssignment_4(lastRuleCallOrigin, this, 1, inst);
			case 2: return new DefinedViewable_LeftCurlyBracketKeyword_3(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}


/************ end Rule DefinedViewable ****************/


/************ begin Rule ManualViewable ****************
 *
 * // validation: warning in case of 0 elements					[√]
 * // derived feature: =screen(Viewable it) ::= type == _screen_	[√]
 * / *
 * 	 * TODO  consider making a modal a separate viewable type
 * 	 * The idea is that a modal should often be able to act as a confirm or an obligatory
 * 	 * choice between a few actions in a way that's quite functional - e.g., persistent dialog box.
 * 	 * / ManualViewable:
 * 	"manual" type=ViewableTypes name=ID parameterList=ParameterList "in" namespace=QualifiedName;
 *
 **/

// "manual" type=ViewableTypes name=ID parameterList=ParameterList "in" namespace=QualifiedName
protected class ManualViewable_Group extends GroupToken {
	
	public ManualViewable_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getManualViewableAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ManualViewable_NamespaceAssignment_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getManualViewableRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "manual"
protected class ManualViewable_ManualKeyword_0 extends KeywordToken  {
	
	public ManualViewable_ManualKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getManualViewableAccess().getManualKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// type=ViewableTypes
protected class ManualViewable_TypeAssignment_1 extends AssignmentToken  {
	
	public ManualViewable_TypeAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getManualViewableAccess().getTypeAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ManualViewable_ManualKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("type",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type");
		if(enumLitSerializer.isValid(obj.getEObject(), grammarAccess.getManualViewableAccess().getTypeViewableTypesEnumRuleCall_1_0(), value, null)) { 
			type = AssignmentType.ENUM_RULE_CALL;
			element = grammarAccess.getManualViewableAccess().getTypeViewableTypesEnumRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// name=ID
protected class ManualViewable_NameAssignment_2 extends AssignmentToken  {
	
	public ManualViewable_NameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getManualViewableAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ManualViewable_TypeAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getManualViewableAccess().getNameIDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getManualViewableAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// parameterList=ParameterList
protected class ManualViewable_ParameterListAssignment_3 extends AssignmentToken  {
	
	public ManualViewable_ParameterListAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getManualViewableAccess().getParameterListAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParameterList_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("parameterList",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("parameterList");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterListRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getManualViewableAccess().getParameterListParameterListParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ManualViewable_NameAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "in"
protected class ManualViewable_InKeyword_4 extends KeywordToken  {
	
	public ManualViewable_InKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getManualViewableAccess().getInKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ManualViewable_ParameterListAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// namespace=QualifiedName
protected class ManualViewable_NamespaceAssignment_5 extends AssignmentToken  {
	
	public ManualViewable_NamespaceAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getManualViewableAccess().getNamespaceAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ManualViewable_InKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("namespace",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("namespace");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getManualViewableAccess().getNamespaceQualifiedNameParserRuleCall_5_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getManualViewableAccess().getNamespaceQualifiedNameParserRuleCall_5_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule ManualViewable ****************/



/************ begin Rule LocalViewableDefinition ****************
 *
 * LocalViewableDefinition:
 * 	Element | MethodDefinition;
 *
 **/

// Element | MethodDefinition
protected class LocalViewableDefinition_Alternatives extends AlternativesToken {

	public LocalViewableDefinition_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getLocalViewableDefinitionAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LocalViewableDefinition_ElementParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new LocalViewableDefinition_MethodDefinitionParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBindingRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBlockElementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getButtonElementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCalendarElementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getComponentInvocationRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCountdownTimerRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFrameElementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getGroupElementAccess().getGroupElementAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImageElementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getInputElementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLabeledTableElementAccess().getLabeledTableElementAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLabeledTableRowRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLineBreakElementAccess().getLineBreakElementAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListElementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMethodDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getObserveElementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getProgressBarTabSetAccess().getProgressBarTabSetAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getQuotationRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSlotAddElementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTableElementAccess().getTableElementAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTimeSlotListElementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWhenElementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Element
protected class LocalViewableDefinition_ElementParserRuleCall_0 extends RuleCallToken {
	
	public LocalViewableDefinition_ElementParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getLocalViewableDefinitionAccess().getElementParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Element_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBindingRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBlockElementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getButtonElementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCalendarElementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getComponentInvocationRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCountdownTimerRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFrameElementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getGroupElementAccess().getGroupElementAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImageElementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getInputElementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLabeledTableElementAccess().getLabeledTableElementAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLabeledTableRowRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLineBreakElementAccess().getLineBreakElementAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListElementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getObserveElementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getProgressBarTabSetAccess().getProgressBarTabSetAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getQuotationRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSlotAddElementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTableElementAccess().getTableElementAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTimeSlotListElementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWhenElementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Element_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// MethodDefinition
protected class LocalViewableDefinition_MethodDefinitionParserRuleCall_1 extends RuleCallToken {
	
	public LocalViewableDefinition_MethodDefinitionParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getLocalViewableDefinitionAccess().getMethodDefinitionParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MethodDefinition_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMethodDefinitionRule().getType().getClassifier())
			return null;
		if(checkForRecursion(MethodDefinition_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule LocalViewableDefinition ****************/


/************ begin Rule ValuesBlock ****************
 *
 * ValuesBlock:
 * 	{ValuesBlock} "values" "{" declarations+=ValueDeclaration* "}";
 *
 **/

// {ValuesBlock} "values" "{" declarations+=ValueDeclaration* "}"
protected class ValuesBlock_Group extends GroupToken {
	
	public ValuesBlock_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getValuesBlockAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ValuesBlock_RightCurlyBracketKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getValuesBlockAccess().getValuesBlockAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {ValuesBlock}
protected class ValuesBlock_ValuesBlockAction_0 extends ActionToken  {

	public ValuesBlock_ValuesBlockAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getValuesBlockAccess().getValuesBlockAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "values"
protected class ValuesBlock_ValuesKeyword_1 extends KeywordToken  {
	
	public ValuesBlock_ValuesKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getValuesBlockAccess().getValuesKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ValuesBlock_ValuesBlockAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "{"
protected class ValuesBlock_LeftCurlyBracketKeyword_2 extends KeywordToken  {
	
	public ValuesBlock_LeftCurlyBracketKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getValuesBlockAccess().getLeftCurlyBracketKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ValuesBlock_ValuesKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// declarations+=ValueDeclaration*
protected class ValuesBlock_DeclarationsAssignment_3 extends AssignmentToken  {
	
	public ValuesBlock_DeclarationsAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getValuesBlockAccess().getDeclarationsAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ValueDeclaration_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("declarations",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("declarations");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getValueDeclarationRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getValuesBlockAccess().getDeclarationsValueDeclarationParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ValuesBlock_DeclarationsAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ValuesBlock_LeftCurlyBracketKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class ValuesBlock_RightCurlyBracketKeyword_4 extends KeywordToken  {
	
	public ValuesBlock_RightCurlyBracketKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getValuesBlockAccess().getRightCurlyBracketKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ValuesBlock_DeclarationsAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ValuesBlock_LeftCurlyBracketKeyword_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule ValuesBlock ****************/


/************ begin Rule ValueDeclaration ****************
 *
 * ValueDeclaration:
 * 	value=Value (":" declaredType=TypeLiteral)? (valueType=ValueTypes valueExpr=Expression)?;
 *
 **/

// value=Value (":" declaredType=TypeLiteral)? (valueType=ValueTypes valueExpr=Expression)?
protected class ValueDeclaration_Group extends GroupToken {
	
	public ValueDeclaration_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getValueDeclarationAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ValueDeclaration_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ValueDeclaration_Group_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new ValueDeclaration_ValueAssignment_0(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getValueDeclarationRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// value=Value
protected class ValueDeclaration_ValueAssignment_0 extends AssignmentToken  {
	
	public ValueDeclaration_ValueAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getValueDeclarationAccess().getValueAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Value_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getValueRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getValueDeclarationAccess().getValueValueParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// (":" declaredType=TypeLiteral)?
protected class ValueDeclaration_Group_1 extends GroupToken {
	
	public ValueDeclaration_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getValueDeclarationAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ValueDeclaration_DeclaredTypeAssignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ":"
protected class ValueDeclaration_ColonKeyword_1_0 extends KeywordToken  {
	
	public ValueDeclaration_ColonKeyword_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getValueDeclarationAccess().getColonKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ValueDeclaration_ValueAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// declaredType=TypeLiteral
protected class ValueDeclaration_DeclaredTypeAssignment_1_1 extends AssignmentToken  {
	
	public ValueDeclaration_DeclaredTypeAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getValueDeclarationAccess().getDeclaredTypeAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TypeLiteral_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("declaredType",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("declaredType");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeLiteralRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getValueDeclarationAccess().getDeclaredTypeTypeLiteralParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ValueDeclaration_ColonKeyword_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// (valueType=ValueTypes valueExpr=Expression)?
protected class ValueDeclaration_Group_2 extends GroupToken {
	
	public ValueDeclaration_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getValueDeclarationAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ValueDeclaration_ValueExprAssignment_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// valueType=ValueTypes
protected class ValueDeclaration_ValueTypeAssignment_2_0 extends AssignmentToken  {
	
	public ValueDeclaration_ValueTypeAssignment_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getValueDeclarationAccess().getValueTypeAssignment_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ValueDeclaration_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ValueDeclaration_ValueAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("valueType",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("valueType");
		if(enumLitSerializer.isValid(obj.getEObject(), grammarAccess.getValueDeclarationAccess().getValueTypeValueTypesEnumRuleCall_2_0_0(), value, null)) { 
			type = AssignmentType.ENUM_RULE_CALL;
			element = grammarAccess.getValueDeclarationAccess().getValueTypeValueTypesEnumRuleCall_2_0_0();
			return obj;
		}
		return null;
	}

}

// valueExpr=Expression
protected class ValueDeclaration_ValueExprAssignment_2_1 extends AssignmentToken  {
	
	public ValueDeclaration_ValueExprAssignment_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getValueDeclarationAccess().getValueExprAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_TernaryExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("valueExpr",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("valueExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getValueDeclarationAccess().getValueExprExpressionParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ValueDeclaration_ValueTypeAssignment_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule ValueDeclaration ****************/


/************ begin Rule Value ****************
 *
 * Value:
 * 	name=ID;
 *
 **/

// name=ID
protected class Value_NameAssignment extends AssignmentToken  {
	
	public Value_NameAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getValueAccess().getNameAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getValueRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getValueAccess().getNameIDTerminalRuleCall_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getValueAccess().getNameIDTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule Value ****************/


/************ begin Rule AbstractValueDeclaration ****************
 *
 * // (synthetic convenience type)
 * AbstractValueDeclaration:
 * 	ValueDeclaration | LocalValueDeclarationStatement;
 *
 **/

// ValueDeclaration | LocalValueDeclarationStatement
protected class AbstractValueDeclaration_Alternatives extends AlternativesToken {

	public AbstractValueDeclaration_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAbstractValueDeclarationAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AbstractValueDeclaration_ValueDeclarationParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AbstractValueDeclaration_LocalValueDeclarationStatementParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLocalValueDeclarationStatementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getValueDeclarationRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ValueDeclaration
protected class AbstractValueDeclaration_ValueDeclarationParserRuleCall_0 extends RuleCallToken {
	
	public AbstractValueDeclaration_ValueDeclarationParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAbstractValueDeclarationAccess().getValueDeclarationParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ValueDeclaration_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getValueDeclarationRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ValueDeclaration_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// LocalValueDeclarationStatement
protected class AbstractValueDeclaration_LocalValueDeclarationStatementParserRuleCall_1 extends RuleCallToken {
	
	public AbstractValueDeclaration_LocalValueDeclarationStatementParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAbstractValueDeclarationAccess().getLocalValueDeclarationStatementParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LocalValueDeclarationStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLocalValueDeclarationStatementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(LocalValueDeclarationStatement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule AbstractValueDeclaration ****************/


/************ begin Rule Parameter ****************
 *
 * // validation: ( declaredType == null ) || declaredType.isAssignableFrom(valueExpr.type)	[√]
 * Parameter:
 * 	name=ID ":" type=TypeLiteral;
 *
 **/

// name=ID ":" type=TypeLiteral
protected class Parameter_Group extends GroupToken {
	
	public Parameter_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getParameterAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Parameter_TypeAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getParameterRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name=ID
protected class Parameter_NameAssignment_0 extends AssignmentToken  {
	
	public Parameter_NameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getParameterAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// ":"
protected class Parameter_ColonKeyword_1 extends KeywordToken  {
	
	public Parameter_ColonKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getParameterAccess().getColonKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Parameter_NameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// type=TypeLiteral
protected class Parameter_TypeAssignment_2 extends AssignmentToken  {
	
	public Parameter_TypeAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getParameterAccess().getTypeAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TypeLiteral_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("type",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeLiteralRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getParameterAccess().getTypeTypeLiteralParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Parameter_ColonKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Parameter ****************/


/************ begin Rule ParameterList ****************
 *
 * ParameterList:
 * 	{ParameterList} "(" (parameters+=Parameter (("," | "|") parameters+=Parameter)*)? ","? ")";
 *
 **/

// {ParameterList} "(" (parameters+=Parameter (("," | "|") parameters+=Parameter)*)? ","? ")"
protected class ParameterList_Group extends GroupToken {
	
	public ParameterList_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getParameterListAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParameterList_RightParenthesisKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getParameterListAccess().getParameterListAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {ParameterList}
protected class ParameterList_ParameterListAction_0 extends ActionToken  {

	public ParameterList_ParameterListAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getParameterListAccess().getParameterListAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "("
protected class ParameterList_LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public ParameterList_LeftParenthesisKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getParameterListAccess().getLeftParenthesisKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParameterList_ParameterListAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// (parameters+=Parameter (("," | "|") parameters+=Parameter)*)?
protected class ParameterList_Group_2 extends GroupToken {
	
	public ParameterList_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getParameterListAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParameterList_Group_2_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ParameterList_ParametersAssignment_2_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// parameters+=Parameter
protected class ParameterList_ParametersAssignment_2_0 extends AssignmentToken  {
	
	public ParameterList_ParametersAssignment_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getParameterListAccess().getParametersAssignment_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Parameter_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("parameters",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("parameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getParameterListAccess().getParametersParameterParserRuleCall_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ParameterList_LeftParenthesisKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// (("," | "|") parameters+=Parameter)*
protected class ParameterList_Group_2_1 extends GroupToken {
	
	public ParameterList_Group_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getParameterListAccess().getGroup_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParameterList_ParametersAssignment_2_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "," | "|"
protected class ParameterList_Alternatives_2_1_0 extends AlternativesToken {

	public ParameterList_Alternatives_2_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getParameterListAccess().getAlternatives_2_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParameterList_CommaKeyword_2_1_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class ParameterList_CommaKeyword_2_1_0_0 extends KeywordToken  {
	
	public ParameterList_CommaKeyword_2_1_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getParameterListAccess().getCommaKeyword_2_1_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParameterList_Group_2_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ParameterList_ParametersAssignment_2_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


// parameters+=Parameter
protected class ParameterList_ParametersAssignment_2_1_1 extends AssignmentToken  {
	
	public ParameterList_ParametersAssignment_2_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getParameterListAccess().getParametersAssignment_2_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Parameter_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("parameters",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("parameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getParameterListAccess().getParametersParameterParserRuleCall_2_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ParameterList_Alternatives_2_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// ")"
protected class ParameterList_RightParenthesisKeyword_4 extends KeywordToken  {
	
	public ParameterList_RightParenthesisKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getParameterListAccess().getRightParenthesisKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParameterList_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ParameterList_LeftParenthesisKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule ParameterList ****************/


/************ begin Rule MethodDefinition ****************
 *
 * / *
 * 	 * Note: you can either use commas or pipes to separate parameters and you
 * 	 * 			can optionally have a non-separating, trailing comma.
 * 	 * 			(The intent is to prevent having a sense of implied ordering.)
 * 	 * / MethodDefinition:
 * 	"method" method=Method parameterList=ParameterList statementBlock=StatementBlock;
 *
 **/

// "method" method=Method parameterList=ParameterList statementBlock=StatementBlock
protected class MethodDefinition_Group extends GroupToken {
	
	public MethodDefinition_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMethodDefinitionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MethodDefinition_StatementBlockAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMethodDefinitionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "method"
protected class MethodDefinition_MethodKeyword_0 extends KeywordToken  {
	
	public MethodDefinition_MethodKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMethodDefinitionAccess().getMethodKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// method=Method
protected class MethodDefinition_MethodAssignment_1 extends AssignmentToken  {
	
	public MethodDefinition_MethodAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMethodDefinitionAccess().getMethodAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Method_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("method",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("method");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMethodRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getMethodDefinitionAccess().getMethodMethodParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new MethodDefinition_MethodKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// parameterList=ParameterList
protected class MethodDefinition_ParameterListAssignment_2 extends AssignmentToken  {
	
	public MethodDefinition_ParameterListAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMethodDefinitionAccess().getParameterListAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParameterList_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("parameterList",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("parameterList");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterListRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getMethodDefinitionAccess().getParameterListParameterListParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new MethodDefinition_MethodAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// statementBlock=StatementBlock
protected class MethodDefinition_StatementBlockAssignment_3 extends AssignmentToken  {
	
	public MethodDefinition_StatementBlockAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMethodDefinitionAccess().getStatementBlockAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StatementBlock_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("statementBlock",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("statementBlock");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementBlockRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getMethodDefinitionAccess().getStatementBlockStatementBlockParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new MethodDefinition_ParameterListAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule MethodDefinition ****************/


/************ begin Rule Method ****************
 *
 * / *
 * 	 * semantics:
 * 	 * 		The return value of a method is simply the value of the (evaluation of the) last statement - and likewise for the return type.
 * 	 * 		In most cases, the return value will be null and its type will be Void - a method is a function if that's not the case.
 * 	 * 		(Note that there's no return statement which'd make the statement flow more difficult to understand and analyse.)
 * 	 * / Method:
 * 	name=ID;
 *
 **/

// name=ID
protected class Method_NameAssignment extends AssignmentToken  {
	
	public Method_NameAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMethodAccess().getNameAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMethodRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getMethodAccess().getNameIDTerminalRuleCall_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getMethodAccess().getNameIDTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule Method ****************/


/************ begin Rule Element ****************
 *
 * / *
 *  * +----------+
 *  * | elements |
 *  * +----------+
 *  * / Element:
 * 	Quotation // structural elements:
 * 	// other elements:
 * 	| // value elements
 * 	Binding | // embedding
 * 	ComponentInvocation | BlockElement | ListElement | TableElement | LabeledTableElement | ProgressBarTabSet |
 * 	GroupElement | WhenElement | InputElement | ButtonElement | CountdownTimer | CalendarElement | TimeSlotListElement |
 * 	SlotAddElement | ImageElement | FrameElement | LineBreakElement | ObserveElement | LabeledTableRow;
 *
 **/

// Quotation // structural elements:
// // other elements:
// | // value elements
// Binding | // embedding
// ComponentInvocation | BlockElement | ListElement | TableElement | LabeledTableElement | ProgressBarTabSet | GroupElement
// | WhenElement | InputElement | ButtonElement | CountdownTimer | CalendarElement | TimeSlotListElement | SlotAddElement
// | ImageElement | FrameElement | LineBreakElement | ObserveElement | LabeledTableRow
protected class Element_Alternatives extends AlternativesToken {

	public Element_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getElementAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Element_QuotationParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Element_BindingParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Element_ComponentInvocationParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Element_BlockElementParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Element_ListElementParserRuleCall_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new Element_TableElementParserRuleCall_5(lastRuleCallOrigin, this, 5, inst);
			case 6: return new Element_LabeledTableElementParserRuleCall_6(lastRuleCallOrigin, this, 6, inst);
			case 7: return new Element_ProgressBarTabSetParserRuleCall_7(lastRuleCallOrigin, this, 7, inst);
			case 8: return new Element_GroupElementParserRuleCall_8(lastRuleCallOrigin, this, 8, inst);
			case 9: return new Element_WhenElementParserRuleCall_9(lastRuleCallOrigin, this, 9, inst);
			case 10: return new Element_InputElementParserRuleCall_10(lastRuleCallOrigin, this, 10, inst);
			case 11: return new Element_ButtonElementParserRuleCall_11(lastRuleCallOrigin, this, 11, inst);
			case 12: return new Element_CountdownTimerParserRuleCall_12(lastRuleCallOrigin, this, 12, inst);
			case 13: return new Element_CalendarElementParserRuleCall_13(lastRuleCallOrigin, this, 13, inst);
			case 14: return new Element_TimeSlotListElementParserRuleCall_14(lastRuleCallOrigin, this, 14, inst);
			case 15: return new Element_SlotAddElementParserRuleCall_15(lastRuleCallOrigin, this, 15, inst);
			case 16: return new Element_ImageElementParserRuleCall_16(lastRuleCallOrigin, this, 16, inst);
			case 17: return new Element_FrameElementParserRuleCall_17(lastRuleCallOrigin, this, 17, inst);
			case 18: return new Element_LineBreakElementParserRuleCall_18(lastRuleCallOrigin, this, 18, inst);
			case 19: return new Element_ObserveElementParserRuleCall_19(lastRuleCallOrigin, this, 19, inst);
			case 20: return new Element_LabeledTableRowParserRuleCall_20(lastRuleCallOrigin, this, 20, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBindingRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBlockElementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getButtonElementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCalendarElementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getComponentInvocationRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCountdownTimerRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFrameElementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getGroupElementAccess().getGroupElementAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImageElementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getInputElementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLabeledTableElementAccess().getLabeledTableElementAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLabeledTableRowRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLineBreakElementAccess().getLineBreakElementAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListElementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getObserveElementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getProgressBarTabSetAccess().getProgressBarTabSetAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getQuotationRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSlotAddElementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTableElementAccess().getTableElementAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTimeSlotListElementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWhenElementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Quotation
protected class Element_QuotationParserRuleCall_0 extends RuleCallToken {
	
	public Element_QuotationParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getElementAccess().getQuotationParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Quotation_PathAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getQuotationRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Quotation_PathAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// // value elements
// Binding
protected class Element_BindingParserRuleCall_1 extends RuleCallToken {
	
	public Element_BindingParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getElementAccess().getBindingParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Binding_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBindingRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Binding_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// // embedding
// ComponentInvocation
protected class Element_ComponentInvocationParserRuleCall_2 extends RuleCallToken {
	
	public Element_ComponentInvocationParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getElementAccess().getComponentInvocationParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentInvocation_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getComponentInvocationRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ComponentInvocation_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// BlockElement
protected class Element_BlockElementParserRuleCall_3 extends RuleCallToken {
	
	public Element_BlockElementParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getElementAccess().getBlockElementParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BlockElement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBlockElementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(BlockElement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ListElement
protected class Element_ListElementParserRuleCall_4 extends RuleCallToken {
	
	public Element_ListElementParserRuleCall_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getElementAccess().getListElementParserRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListElement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getListElementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ListElement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// TableElement
protected class Element_TableElementParserRuleCall_5 extends RuleCallToken {
	
	public Element_TableElementParserRuleCall_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getElementAccess().getTableElementParserRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TableElement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTableElementAccess().getTableElementAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(TableElement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// LabeledTableElement
protected class Element_LabeledTableElementParserRuleCall_6 extends RuleCallToken {
	
	public Element_LabeledTableElementParserRuleCall_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getElementAccess().getLabeledTableElementParserRuleCall_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LabeledTableElement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLabeledTableElementAccess().getLabeledTableElementAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(LabeledTableElement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ProgressBarTabSet
protected class Element_ProgressBarTabSetParserRuleCall_7 extends RuleCallToken {
	
	public Element_ProgressBarTabSetParserRuleCall_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getElementAccess().getProgressBarTabSetParserRuleCall_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProgressBarTabSet_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getProgressBarTabSetAccess().getProgressBarTabSetAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(ProgressBarTabSet_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// GroupElement
protected class Element_GroupElementParserRuleCall_8 extends RuleCallToken {
	
	public Element_GroupElementParserRuleCall_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getElementAccess().getGroupElementParserRuleCall_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GroupElement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getGroupElementAccess().getGroupElementAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(GroupElement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// WhenElement
protected class Element_WhenElementParserRuleCall_9 extends RuleCallToken {
	
	public Element_WhenElementParserRuleCall_9(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getElementAccess().getWhenElementParserRuleCall_9();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WhenElement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWhenElementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(WhenElement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// InputElement
protected class Element_InputElementParserRuleCall_10 extends RuleCallToken {
	
	public Element_InputElementParserRuleCall_10(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getElementAccess().getInputElementParserRuleCall_10();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InputElement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getInputElementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(InputElement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ButtonElement
protected class Element_ButtonElementParserRuleCall_11 extends RuleCallToken {
	
	public Element_ButtonElementParserRuleCall_11(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getElementAccess().getButtonElementParserRuleCall_11();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ButtonElement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getButtonElementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ButtonElement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// CountdownTimer
protected class Element_CountdownTimerParserRuleCall_12 extends RuleCallToken {
	
	public Element_CountdownTimerParserRuleCall_12(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getElementAccess().getCountdownTimerParserRuleCall_12();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CountdownTimer_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCountdownTimerRule().getType().getClassifier())
			return null;
		if(checkForRecursion(CountdownTimer_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// CalendarElement
protected class Element_CalendarElementParserRuleCall_13 extends RuleCallToken {
	
	public Element_CalendarElementParserRuleCall_13(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getElementAccess().getCalendarElementParserRuleCall_13();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CalendarElement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCalendarElementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(CalendarElement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// TimeSlotListElement
protected class Element_TimeSlotListElementParserRuleCall_14 extends RuleCallToken {
	
	public Element_TimeSlotListElementParserRuleCall_14(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getElementAccess().getTimeSlotListElementParserRuleCall_14();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TimeSlotListElement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTimeSlotListElementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(TimeSlotListElement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// SlotAddElement
protected class Element_SlotAddElementParserRuleCall_15 extends RuleCallToken {
	
	public Element_SlotAddElementParserRuleCall_15(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getElementAccess().getSlotAddElementParserRuleCall_15();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SlotAddElement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSlotAddElementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(SlotAddElement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ImageElement
protected class Element_ImageElementParserRuleCall_16 extends RuleCallToken {
	
	public Element_ImageElementParserRuleCall_16(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getElementAccess().getImageElementParserRuleCall_16();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ImageElement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getImageElementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ImageElement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// FrameElement
protected class Element_FrameElementParserRuleCall_17 extends RuleCallToken {
	
	public Element_FrameElementParserRuleCall_17(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getElementAccess().getFrameElementParserRuleCall_17();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FrameElement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFrameElementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(FrameElement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// LineBreakElement
protected class Element_LineBreakElementParserRuleCall_18 extends RuleCallToken {
	
	public Element_LineBreakElementParserRuleCall_18(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getElementAccess().getLineBreakElementParserRuleCall_18();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LineBreakElement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLineBreakElementAccess().getLineBreakElementAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(LineBreakElement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ObserveElement
protected class Element_ObserveElementParserRuleCall_19 extends RuleCallToken {
	
	public Element_ObserveElementParserRuleCall_19(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getElementAccess().getObserveElementParserRuleCall_19();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ObserveElement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getObserveElementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ObserveElement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// LabeledTableRow
protected class Element_LabeledTableRowParserRuleCall_20 extends RuleCallToken {
	
	public Element_LabeledTableRowParserRuleCall_20(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getElementAccess().getLabeledTableRowParserRuleCall_20();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LabeledTableRow_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLabeledTableRowRule().getType().getClassifier())
			return null;
		if(checkForRecursion(LabeledTableRow_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Element ****************/


/************ begin Rule Quotation ****************
 *
 * Quotation:
 * 	path=Expression;
 *
 **/

// path=Expression
protected class Quotation_PathAssignment extends AssignmentToken  {
	
	public Quotation_PathAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getQuotationAccess().getPathAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_TernaryExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getQuotationRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("path",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("path");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getQuotationAccess().getPathExpressionParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

/************ end Rule Quotation ****************/


/************ begin Rule Binding ****************
 *
 * Binding:
 * 	"bind" "(" bindSite=Expression ")";
 *
 **/

// "bind" "(" bindSite=Expression ")"
protected class Binding_Group extends GroupToken {
	
	public Binding_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBindingAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Binding_RightParenthesisKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBindingRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "bind"
protected class Binding_BindKeyword_0 extends KeywordToken  {
	
	public Binding_BindKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBindingAccess().getBindKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "("
protected class Binding_LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public Binding_LeftParenthesisKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBindingAccess().getLeftParenthesisKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Binding_BindKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// bindSite=Expression
protected class Binding_BindSiteAssignment_2 extends AssignmentToken  {
	
	public Binding_BindSiteAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBindingAccess().getBindSiteAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_TernaryExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("bindSite",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("bindSite");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getBindingAccess().getBindSiteExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Binding_LeftParenthesisKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class Binding_RightParenthesisKeyword_3 extends KeywordToken  {
	
	public Binding_RightParenthesisKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBindingAccess().getRightParenthesisKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Binding_BindSiteAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule Binding ****************/


/************ begin Rule ElementBody ****************
 *
 * / *
 * 	 * validation: bindSite.type must be observable		[√]
 * 	 * semantics: indicates a reactive expression
 * 	 * / ElementBody:
 * 	{ElementBody} "{" elements+=Element* "}";
 *
 **/

// {ElementBody} "{" elements+=Element* "}"
protected class ElementBody_Group extends GroupToken {
	
	public ElementBody_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getElementBodyAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ElementBody_RightCurlyBracketKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getElementBodyAccess().getElementBodyAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {ElementBody}
protected class ElementBody_ElementBodyAction_0 extends ActionToken  {

	public ElementBody_ElementBodyAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getElementBodyAccess().getElementBodyAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "{"
protected class ElementBody_LeftCurlyBracketKeyword_1 extends KeywordToken  {
	
	public ElementBody_LeftCurlyBracketKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getElementBodyAccess().getLeftCurlyBracketKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ElementBody_ElementBodyAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// elements+=Element*
protected class ElementBody_ElementsAssignment_2 extends AssignmentToken  {
	
	public ElementBody_ElementsAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getElementBodyAccess().getElementsAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Element_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("elements",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("elements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getElementRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getElementBodyAccess().getElementsElementParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ElementBody_ElementsAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ElementBody_LeftCurlyBracketKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class ElementBody_RightCurlyBracketKeyword_3 extends KeywordToken  {
	
	public ElementBody_RightCurlyBracketKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getElementBodyAccess().getRightCurlyBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ElementBody_ElementsAssignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ElementBody_LeftCurlyBracketKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule ElementBody ****************/


/************ begin Rule ComponentInvocation ****************
 *
 * // validation: warning if elements.empty			[√]
 * ComponentInvocation:
 * 	"embed" viewable=[Viewable] argumentList=ArgumentList;
 *
 **/

// "embed" viewable=[Viewable] argumentList=ArgumentList
protected class ComponentInvocation_Group extends GroupToken {
	
	public ComponentInvocation_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getComponentInvocationAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentInvocation_ArgumentListAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getComponentInvocationRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "embed"
protected class ComponentInvocation_EmbedKeyword_0 extends KeywordToken  {
	
	public ComponentInvocation_EmbedKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getComponentInvocationAccess().getEmbedKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// viewable=[Viewable]
protected class ComponentInvocation_ViewableAssignment_1 extends AssignmentToken  {
	
	public ComponentInvocation_ViewableAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getComponentInvocationAccess().getViewableAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentInvocation_EmbedKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("viewable",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("viewable");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getComponentInvocationAccess().getViewableViewableCrossReference_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getComponentInvocationAccess().getViewableViewableCrossReference_1_0(); 
				return obj;
			}
		}
		return null;
	}

}

// argumentList=ArgumentList
protected class ComponentInvocation_ArgumentListAssignment_2 extends AssignmentToken  {
	
	public ComponentInvocation_ArgumentListAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getComponentInvocationAccess().getArgumentListAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ArgumentList_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("argumentList",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("argumentList");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getArgumentListRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getComponentInvocationAccess().getArgumentListArgumentListParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ComponentInvocation_ViewableAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule ComponentInvocation ****************/


/************ begin Rule Argument ****************
 *
 * / *
 * 	 * validation:
 * 	 * 		1-  viewable is a component																		[√]
 * 	 * 		2-  all parameters of the viewable are covered by the arguments (and not more than once)		[√]
 * 	 * workaround: prefixed with 'embed' to avoid parsing clash
 * 	 * / // TODO  considering combining the previous 2 rules by creating a method call operator in the expressions language (&c.) - and get rid of 'embed'
 * Argument:
 * 	parameter=[Parameter] "=" valueExpr=Expression;
 *
 **/

// parameter=[Parameter] "=" valueExpr=Expression
protected class Argument_Group extends GroupToken {
	
	public Argument_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getArgumentAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Argument_ValueExprAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getArgumentRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// parameter=[Parameter]
protected class Argument_ParameterAssignment_0 extends AssignmentToken  {
	
	public Argument_ParameterAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getArgumentAccess().getParameterAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("parameter",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("parameter");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getArgumentAccess().getParameterParameterCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getArgumentAccess().getParameterParameterCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "="
protected class Argument_EqualsSignKeyword_1 extends KeywordToken  {
	
	public Argument_EqualsSignKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getArgumentAccess().getEqualsSignKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Argument_ParameterAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// valueExpr=Expression
protected class Argument_ValueExprAssignment_2 extends AssignmentToken  {
	
	public Argument_ValueExprAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getArgumentAccess().getValueExprAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_TernaryExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("valueExpr",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("valueExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getArgumentAccess().getValueExprExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Argument_EqualsSignKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Argument ****************/


/************ begin Rule ArgumentList ****************
 *
 * / *
 * 	 * scoping: parameter in containing(ComponentInvocation).viewable	[√]
 * 	 * validation: parameter.type.isAssignableFrom(valueExpr.type)		[√]
 * 	 * 
 * 	 * Note that arguments are named, so there's no dependency on parameter order!
 * 	 * / ArgumentList:
 * 	{ArgumentList} "(" (arguments+=Argument (","? arguments+=Argument)* ","?)? ")";
 *
 **/

// {ArgumentList} "(" (arguments+=Argument (","? arguments+=Argument)* ","?)? ")"
protected class ArgumentList_Group extends GroupToken {
	
	public ArgumentList_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getArgumentListAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ArgumentList_RightParenthesisKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getArgumentListAccess().getArgumentListAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {ArgumentList}
protected class ArgumentList_ArgumentListAction_0 extends ActionToken  {

	public ArgumentList_ArgumentListAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getArgumentListAccess().getArgumentListAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "("
protected class ArgumentList_LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public ArgumentList_LeftParenthesisKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getArgumentListAccess().getLeftParenthesisKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ArgumentList_ArgumentListAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// (arguments+=Argument (","? arguments+=Argument)* ","?)?
protected class ArgumentList_Group_2 extends GroupToken {
	
	public ArgumentList_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getArgumentListAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ArgumentList_Group_2_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ArgumentList_ArgumentsAssignment_2_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// arguments+=Argument
protected class ArgumentList_ArgumentsAssignment_2_0 extends AssignmentToken  {
	
	public ArgumentList_ArgumentsAssignment_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getArgumentListAccess().getArgumentsAssignment_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Argument_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("arguments",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("arguments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getArgumentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getArgumentListAccess().getArgumentsArgumentParserRuleCall_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ArgumentList_LeftParenthesisKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// (","? arguments+=Argument)*
protected class ArgumentList_Group_2_1 extends GroupToken {
	
	public ArgumentList_Group_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getArgumentListAccess().getGroup_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ArgumentList_ArgumentsAssignment_2_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// arguments+=Argument
protected class ArgumentList_ArgumentsAssignment_2_1_1 extends AssignmentToken  {
	
	public ArgumentList_ArgumentsAssignment_2_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getArgumentListAccess().getArgumentsAssignment_2_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Argument_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("arguments",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("arguments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getArgumentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getArgumentListAccess().getArgumentsArgumentParserRuleCall_2_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ArgumentList_Group_2_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ArgumentList_ArgumentsAssignment_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// ")"
protected class ArgumentList_RightParenthesisKeyword_3 extends KeywordToken  {
	
	public ArgumentList_RightParenthesisKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getArgumentListAccess().getRightParenthesisKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ArgumentList_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ArgumentList_LeftParenthesisKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule ArgumentList ****************/


/************ begin Rule InputElement ****************
 *
 * / *
 * 	 * The commas are optional - for now, I might remove them later on. In the meanwhile,
 * 	 * you can have a non-separating, trailing comma as well.
 * 	 * 
 * 	 * The reason is that whitespace tends to be provide sufficient visual separation
 * 	 * and the '=' character sufficient visual binding. Also, commas have a connotation
 * 	 * of implied ordering which is irrelevant here.
 * 	 * / InputElement:
 * 	"input" "(" bindSite=Expression (("hint" "=" hint=STRING)? // event is fired when value is changed and input field looses focus
 * 	// event is fired when Enter is pressed and input is valid
 * 	& ("min" "=" minValue=Expression)? & ("max" "=" maxValue=Expression)? & radioOption=RadioOption? & ("onChange" "="
 * 	onChange=Expression)? & ("onSubmit" "=" onSubmit=Expression)? & structureOption=StructureOption?) ")";
 *
 **/

// "input" "(" bindSite=Expression (("hint" "=" hint=STRING)? // event is fired when value is changed and input field looses focus
// // event is fired when Enter is pressed and input is valid
// & ("min" "=" minValue=Expression)? & ("max" "=" maxValue=Expression)? & radioOption=RadioOption? & ("onChange" "="
// onChange=Expression)? & ("onSubmit" "=" onSubmit=Expression)? & structureOption=StructureOption?) ")"
protected class InputElement_Group extends GroupToken {
	
	public InputElement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getInputElementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InputElement_RightParenthesisKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getInputElementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "input"
protected class InputElement_InputKeyword_0 extends KeywordToken  {
	
	public InputElement_InputKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getInputElementAccess().getInputKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "("
protected class InputElement_LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public InputElement_LeftParenthesisKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getInputElementAccess().getLeftParenthesisKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InputElement_InputKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// bindSite=Expression
protected class InputElement_BindSiteAssignment_2 extends AssignmentToken  {
	
	public InputElement_BindSiteAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInputElementAccess().getBindSiteAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_TernaryExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("bindSite",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("bindSite");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getInputElementAccess().getBindSiteExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new InputElement_LeftParenthesisKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("hint" "=" hint=STRING)? // event is fired when value is changed and input field looses focus
// // event is fired when Enter is pressed and input is valid
// & ("min" "=" minValue=Expression)? & ("max" "=" maxValue=Expression)? & radioOption=RadioOption? & ("onChange" "="
// onChange=Expression)? & ("onSubmit" "=" onSubmit=Expression)? & structureOption=StructureOption?
protected class InputElement_UnorderedGroup_3 extends UnorderedGroupToken {
	
	public InputElement_UnorderedGroup_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public UnorderedGroup getGrammarElement() {
		return grammarAccess.getInputElementAccess().getUnorderedGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InputElement_StructureOptionAssignment_3_6(lastRuleCallOrigin, this, 0, inst);
			case 1: return new InputElement_Group_3_5(lastRuleCallOrigin, this, 1, inst);
			case 2: return new InputElement_Group_3_4(lastRuleCallOrigin, this, 2, inst);
			case 3: return new InputElement_RadioOptionAssignment_3_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new InputElement_Group_3_2(lastRuleCallOrigin, this, 4, inst);
			case 5: return new InputElement_Group_3_1(lastRuleCallOrigin, this, 5, inst);
			case 6: return new InputElement_Group_3_0(lastRuleCallOrigin, this, 6, inst);
			case 7: return new InputElement_BindSiteAssignment_2(lastRuleCallOrigin, this, 7, inst);
			default: return null;
		}	
	}

}

// ("hint" "=" hint=STRING)?
protected class InputElement_Group_3_0 extends GroupToken {
	
	public InputElement_Group_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getInputElementAccess().getGroup_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InputElement_HintAssignment_3_0_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "hint"
protected class InputElement_HintKeyword_3_0_0 extends KeywordToken  {
	
	public InputElement_HintKeyword_3_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getInputElementAccess().getHintKeyword_3_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InputElement_BindSiteAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "="
protected class InputElement_EqualsSignKeyword_3_0_1 extends KeywordToken  {
	
	public InputElement_EqualsSignKeyword_3_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getInputElementAccess().getEqualsSignKeyword_3_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InputElement_HintKeyword_3_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// hint=STRING
protected class InputElement_HintAssignment_3_0_2 extends AssignmentToken  {
	
	public InputElement_HintAssignment_3_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInputElementAccess().getHintAssignment_3_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InputElement_EqualsSignKeyword_3_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("hint",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("hint");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getInputElementAccess().getHintSTRINGTerminalRuleCall_3_0_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getInputElementAccess().getHintSTRINGTerminalRuleCall_3_0_2_0();
			return obj;
		}
		return null;
	}

}


// ("min" "=" minValue=Expression)?
protected class InputElement_Group_3_1 extends GroupToken {
	
	public InputElement_Group_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getInputElementAccess().getGroup_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InputElement_MinValueAssignment_3_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "min"
protected class InputElement_MinKeyword_3_1_0 extends KeywordToken  {
	
	public InputElement_MinKeyword_3_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getInputElementAccess().getMinKeyword_3_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InputElement_Group_3_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new InputElement_BindSiteAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// "="
protected class InputElement_EqualsSignKeyword_3_1_1 extends KeywordToken  {
	
	public InputElement_EqualsSignKeyword_3_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getInputElementAccess().getEqualsSignKeyword_3_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InputElement_MinKeyword_3_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// minValue=Expression
protected class InputElement_MinValueAssignment_3_1_2 extends AssignmentToken  {
	
	public InputElement_MinValueAssignment_3_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInputElementAccess().getMinValueAssignment_3_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_TernaryExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("minValue",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("minValue");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getInputElementAccess().getMinValueExpressionParserRuleCall_3_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new InputElement_EqualsSignKeyword_3_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ("max" "=" maxValue=Expression)?
protected class InputElement_Group_3_2 extends GroupToken {
	
	public InputElement_Group_3_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getInputElementAccess().getGroup_3_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InputElement_MaxValueAssignment_3_2_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "max"
protected class InputElement_MaxKeyword_3_2_0 extends KeywordToken  {
	
	public InputElement_MaxKeyword_3_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getInputElementAccess().getMaxKeyword_3_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InputElement_Group_3_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new InputElement_Group_3_0(lastRuleCallOrigin, this, 1, inst);
			case 2: return new InputElement_BindSiteAssignment_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}

// "="
protected class InputElement_EqualsSignKeyword_3_2_1 extends KeywordToken  {
	
	public InputElement_EqualsSignKeyword_3_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getInputElementAccess().getEqualsSignKeyword_3_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InputElement_MaxKeyword_3_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// maxValue=Expression
protected class InputElement_MaxValueAssignment_3_2_2 extends AssignmentToken  {
	
	public InputElement_MaxValueAssignment_3_2_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInputElementAccess().getMaxValueAssignment_3_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_TernaryExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("maxValue",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("maxValue");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getInputElementAccess().getMaxValueExpressionParserRuleCall_3_2_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new InputElement_EqualsSignKeyword_3_2_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// radioOption=RadioOption?
protected class InputElement_RadioOptionAssignment_3_3 extends AssignmentToken  {
	
	public InputElement_RadioOptionAssignment_3_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInputElementAccess().getRadioOptionAssignment_3_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RadioOption_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("radioOption",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("radioOption");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRadioOptionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getInputElementAccess().getRadioOptionRadioOptionParserRuleCall_3_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new InputElement_Group_3_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new InputElement_Group_3_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new InputElement_Group_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			case 3: return new InputElement_BindSiteAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("onChange" "=" onChange=Expression)?
protected class InputElement_Group_3_4 extends GroupToken {
	
	public InputElement_Group_3_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getInputElementAccess().getGroup_3_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InputElement_OnChangeAssignment_3_4_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "onChange"
protected class InputElement_OnChangeKeyword_3_4_0 extends KeywordToken  {
	
	public InputElement_OnChangeKeyword_3_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getInputElementAccess().getOnChangeKeyword_3_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InputElement_RadioOptionAssignment_3_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new InputElement_Group_3_2(lastRuleCallOrigin, this, 1, inst);
			case 2: return new InputElement_Group_3_1(lastRuleCallOrigin, this, 2, inst);
			case 3: return new InputElement_Group_3_0(lastRuleCallOrigin, this, 3, inst);
			case 4: return new InputElement_BindSiteAssignment_2(lastRuleCallOrigin, this, 4, inst);
			default: return null;
		}	
	}

}

// "="
protected class InputElement_EqualsSignKeyword_3_4_1 extends KeywordToken  {
	
	public InputElement_EqualsSignKeyword_3_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getInputElementAccess().getEqualsSignKeyword_3_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InputElement_OnChangeKeyword_3_4_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// onChange=Expression
protected class InputElement_OnChangeAssignment_3_4_2 extends AssignmentToken  {
	
	public InputElement_OnChangeAssignment_3_4_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInputElementAccess().getOnChangeAssignment_3_4_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_TernaryExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("onChange",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("onChange");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getInputElementAccess().getOnChangeExpressionParserRuleCall_3_4_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new InputElement_EqualsSignKeyword_3_4_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ("onSubmit" "=" onSubmit=Expression)?
protected class InputElement_Group_3_5 extends GroupToken {
	
	public InputElement_Group_3_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getInputElementAccess().getGroup_3_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InputElement_OnSubmitAssignment_3_5_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "onSubmit"
protected class InputElement_OnSubmitKeyword_3_5_0 extends KeywordToken  {
	
	public InputElement_OnSubmitKeyword_3_5_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getInputElementAccess().getOnSubmitKeyword_3_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InputElement_Group_3_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new InputElement_RadioOptionAssignment_3_3(lastRuleCallOrigin, this, 1, inst);
			case 2: return new InputElement_Group_3_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new InputElement_Group_3_1(lastRuleCallOrigin, this, 3, inst);
			case 4: return new InputElement_Group_3_0(lastRuleCallOrigin, this, 4, inst);
			case 5: return new InputElement_BindSiteAssignment_2(lastRuleCallOrigin, this, 5, inst);
			default: return null;
		}	
	}

}

// "="
protected class InputElement_EqualsSignKeyword_3_5_1 extends KeywordToken  {
	
	public InputElement_EqualsSignKeyword_3_5_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getInputElementAccess().getEqualsSignKeyword_3_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InputElement_OnSubmitKeyword_3_5_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// onSubmit=Expression
protected class InputElement_OnSubmitAssignment_3_5_2 extends AssignmentToken  {
	
	public InputElement_OnSubmitAssignment_3_5_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInputElementAccess().getOnSubmitAssignment_3_5_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_TernaryExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("onSubmit",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("onSubmit");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getInputElementAccess().getOnSubmitExpressionParserRuleCall_3_5_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new InputElement_EqualsSignKeyword_3_5_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// structureOption=StructureOption?
protected class InputElement_StructureOptionAssignment_3_6 extends AssignmentToken  {
	
	public InputElement_StructureOptionAssignment_3_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInputElementAccess().getStructureOptionAssignment_3_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StructureOption_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("structureOption",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("structureOption");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStructureOptionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getInputElementAccess().getStructureOptionStructureOptionParserRuleCall_3_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new InputElement_Group_3_5(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new InputElement_Group_3_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new InputElement_RadioOptionAssignment_3_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 3: return new InputElement_Group_3_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 4: return new InputElement_Group_3_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 5: return new InputElement_Group_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			case 6: return new InputElement_BindSiteAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ")"
protected class InputElement_RightParenthesisKeyword_4 extends KeywordToken  {
	
	public InputElement_RightParenthesisKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getInputElementAccess().getRightParenthesisKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InputElement_UnorderedGroup_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule InputElement ****************/


/************ begin Rule RadioOption ****************
 *
 * / *
 * 	 * validation:
 * 	 * 		1-  bindSite must be a proper target/valid left-hand side			[√]
 * 	 * 		2-	bindSite must not be a callback- or void-typed 					[√]
 * 	 * 		x-  warning given for types on which hint is not supported			[√]
 * 	 * 		3-  min/max only allowed if bindSite is numerically-typed			[√]
 * 	 * 		4-	min&max must be numerically-typed								[√]
 * 	 * 		5-  radioOption can only be given if bindSite is boolean-typed		[√]
 * 	 * 		6-  onChange.type == Callback										[√]
 * 	 * 		y-  warning given for unsupported onChange option					[√]
 * 	 * 		7-  structure option required <==> input is structure-typed 		[√]
 * 	 * 		8-  warning given for (potentially) uninitialized enum fields		[ ]		TODO  OR fix FIXME in JS framework/widgets code
 * 	 * 		9-  onSumbit.type == Callback										[√]
 * 	 * / // semantics: corresponds to an HTML input element, with the hint being given for (at least) textually-typed fields
 * // TODO  add length option (which is supported by some of the widgets)?
 * RadioOption:
 * 	"radio" "=" "{" true=STRING "/" false=STRING "}";
 *
 **/

// "radio" "=" "{" true=STRING "/" false=STRING "}"
protected class RadioOption_Group extends GroupToken {
	
	public RadioOption_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRadioOptionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RadioOption_RightCurlyBracketKeyword_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRadioOptionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "radio"
protected class RadioOption_RadioKeyword_0 extends KeywordToken  {
	
	public RadioOption_RadioKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRadioOptionAccess().getRadioKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "="
protected class RadioOption_EqualsSignKeyword_1 extends KeywordToken  {
	
	public RadioOption_EqualsSignKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRadioOptionAccess().getEqualsSignKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RadioOption_RadioKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "{"
protected class RadioOption_LeftCurlyBracketKeyword_2 extends KeywordToken  {
	
	public RadioOption_LeftCurlyBracketKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRadioOptionAccess().getLeftCurlyBracketKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RadioOption_EqualsSignKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// true=STRING
protected class RadioOption_TrueAssignment_3 extends AssignmentToken  {
	
	public RadioOption_TrueAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRadioOptionAccess().getTrueAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RadioOption_LeftCurlyBracketKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("true",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("true");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getRadioOptionAccess().getTrueSTRINGTerminalRuleCall_3_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getRadioOptionAccess().getTrueSTRINGTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// "/"
protected class RadioOption_SolidusKeyword_4 extends KeywordToken  {
	
	public RadioOption_SolidusKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRadioOptionAccess().getSolidusKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RadioOption_TrueAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// false=STRING
protected class RadioOption_FalseAssignment_5 extends AssignmentToken  {
	
	public RadioOption_FalseAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRadioOptionAccess().getFalseAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RadioOption_SolidusKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("false",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("false");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getRadioOptionAccess().getFalseSTRINGTerminalRuleCall_5_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getRadioOptionAccess().getFalseSTRINGTerminalRuleCall_5_0();
			return obj;
		}
		return null;
	}

}

// "}"
protected class RadioOption_RightCurlyBracketKeyword_6 extends KeywordToken  {
	
	public RadioOption_RightCurlyBracketKeyword_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRadioOptionAccess().getRightCurlyBracketKeyword_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RadioOption_FalseAssignment_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule RadioOption ****************/


/************ begin Rule StructureOption ****************
 *
 * StructureOption:
 * 	"source" "=" "{" sourceExpr=Expression "->" displayFunction=[Method] "}";
 *
 **/

// "source" "=" "{" sourceExpr=Expression "->" displayFunction=[Method] "}"
protected class StructureOption_Group extends GroupToken {
	
	public StructureOption_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStructureOptionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StructureOption_RightCurlyBracketKeyword_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStructureOptionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "source"
protected class StructureOption_SourceKeyword_0 extends KeywordToken  {
	
	public StructureOption_SourceKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStructureOptionAccess().getSourceKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "="
protected class StructureOption_EqualsSignKeyword_1 extends KeywordToken  {
	
	public StructureOption_EqualsSignKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStructureOptionAccess().getEqualsSignKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StructureOption_SourceKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "{"
protected class StructureOption_LeftCurlyBracketKeyword_2 extends KeywordToken  {
	
	public StructureOption_LeftCurlyBracketKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStructureOptionAccess().getLeftCurlyBracketKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StructureOption_EqualsSignKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// sourceExpr=Expression
protected class StructureOption_SourceExprAssignment_3 extends AssignmentToken  {
	
	public StructureOption_SourceExprAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStructureOptionAccess().getSourceExprAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_TernaryExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("sourceExpr",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("sourceExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStructureOptionAccess().getSourceExprExpressionParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new StructureOption_LeftCurlyBracketKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "->"
protected class StructureOption_HyphenMinusGreaterThanSignKeyword_4 extends KeywordToken  {
	
	public StructureOption_HyphenMinusGreaterThanSignKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStructureOptionAccess().getHyphenMinusGreaterThanSignKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StructureOption_SourceExprAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// displayFunction=[Method]
protected class StructureOption_DisplayFunctionAssignment_5 extends AssignmentToken  {
	
	public StructureOption_DisplayFunctionAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStructureOptionAccess().getDisplayFunctionAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StructureOption_HyphenMinusGreaterThanSignKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("displayFunction",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("displayFunction");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStructureOptionAccess().getDisplayFunctionMethodCrossReference_5_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getStructureOptionAccess().getDisplayFunctionMethodCrossReference_5_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "}"
protected class StructureOption_RightCurlyBracketKeyword_6 extends KeywordToken  {
	
	public StructureOption_RightCurlyBracketKeyword_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStructureOptionAccess().getRightCurlyBracketKeyword_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StructureOption_DisplayFunctionAssignment_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule StructureOption ****************/


/************ begin Rule ButtonElement ****************
 *
 * / *
 * 	 * validation:
 * 	 * 		1-  source must be list-typed with structure type as item type		[√]
 * 	 * 		2-  displayFunction must refer a function of signature
 * 	 * 				(bindSite.type.listItemType) -> String (i.e., a closure)	[√]
 * 	 * / ButtonElement:
 * 	"button" "(" ("text" "=" text=STRING & "onClick" "=" action=Expression & ("class" "=" cssClass=STRING)?) ")";
 *
 **/

// "button" "(" ("text" "=" text=STRING & "onClick" "=" action=Expression & ("class" "=" cssClass=STRING)?) ")"
protected class ButtonElement_Group extends GroupToken {
	
	public ButtonElement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getButtonElementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ButtonElement_RightParenthesisKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getButtonElementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "button"
protected class ButtonElement_ButtonKeyword_0 extends KeywordToken  {
	
	public ButtonElement_ButtonKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getButtonElementAccess().getButtonKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "("
protected class ButtonElement_LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public ButtonElement_LeftParenthesisKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getButtonElementAccess().getLeftParenthesisKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ButtonElement_ButtonKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "text" "=" text=STRING & "onClick" "=" action=Expression & ("class" "=" cssClass=STRING)?
protected class ButtonElement_UnorderedGroup_2 extends UnorderedGroupToken {
	
	public ButtonElement_UnorderedGroup_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public UnorderedGroup getGrammarElement() {
		return grammarAccess.getButtonElementAccess().getUnorderedGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ButtonElement_Group_2_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ButtonElement_Group_2_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// "text" "=" text=STRING
protected class ButtonElement_Group_2_0 extends GroupToken {
	
	public ButtonElement_Group_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getButtonElementAccess().getGroup_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ButtonElement_TextAssignment_2_0_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "text"
protected class ButtonElement_TextKeyword_2_0_0 extends KeywordToken  {
	
	public ButtonElement_TextKeyword_2_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getButtonElementAccess().getTextKeyword_2_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ButtonElement_LeftParenthesisKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "="
protected class ButtonElement_EqualsSignKeyword_2_0_1 extends KeywordToken  {
	
	public ButtonElement_EqualsSignKeyword_2_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getButtonElementAccess().getEqualsSignKeyword_2_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ButtonElement_TextKeyword_2_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// text=STRING
protected class ButtonElement_TextAssignment_2_0_2 extends AssignmentToken  {
	
	public ButtonElement_TextAssignment_2_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getButtonElementAccess().getTextAssignment_2_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ButtonElement_EqualsSignKeyword_2_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("text",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("text");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getButtonElementAccess().getTextSTRINGTerminalRuleCall_2_0_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getButtonElementAccess().getTextSTRINGTerminalRuleCall_2_0_2_0();
			return obj;
		}
		return null;
	}

}


// "onClick" "=" action=Expression
protected class ButtonElement_Group_2_1 extends GroupToken {
	
	public ButtonElement_Group_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getButtonElementAccess().getGroup_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ButtonElement_ActionAssignment_2_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "onClick"
protected class ButtonElement_OnClickKeyword_2_1_0 extends KeywordToken  {
	
	public ButtonElement_OnClickKeyword_2_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getButtonElementAccess().getOnClickKeyword_2_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ButtonElement_Group_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "="
protected class ButtonElement_EqualsSignKeyword_2_1_1 extends KeywordToken  {
	
	public ButtonElement_EqualsSignKeyword_2_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getButtonElementAccess().getEqualsSignKeyword_2_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ButtonElement_OnClickKeyword_2_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// action=Expression
protected class ButtonElement_ActionAssignment_2_1_2 extends AssignmentToken  {
	
	public ButtonElement_ActionAssignment_2_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getButtonElementAccess().getActionAssignment_2_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_TernaryExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("action",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("action");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getButtonElementAccess().getActionExpressionParserRuleCall_2_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ButtonElement_EqualsSignKeyword_2_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ("class" "=" cssClass=STRING)?
protected class ButtonElement_Group_2_2 extends GroupToken {
	
	public ButtonElement_Group_2_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getButtonElementAccess().getGroup_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ButtonElement_CssClassAssignment_2_2_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "class"
protected class ButtonElement_ClassKeyword_2_2_0 extends KeywordToken  {
	
	public ButtonElement_ClassKeyword_2_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getButtonElementAccess().getClassKeyword_2_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ButtonElement_Group_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "="
protected class ButtonElement_EqualsSignKeyword_2_2_1 extends KeywordToken  {
	
	public ButtonElement_EqualsSignKeyword_2_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getButtonElementAccess().getEqualsSignKeyword_2_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ButtonElement_ClassKeyword_2_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// cssClass=STRING
protected class ButtonElement_CssClassAssignment_2_2_2 extends AssignmentToken  {
	
	public ButtonElement_CssClassAssignment_2_2_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getButtonElementAccess().getCssClassAssignment_2_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ButtonElement_EqualsSignKeyword_2_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("cssClass",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("cssClass");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getButtonElementAccess().getCssClassSTRINGTerminalRuleCall_2_2_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getButtonElementAccess().getCssClassSTRINGTerminalRuleCall_2_2_2_0();
			return obj;
		}
		return null;
	}

}



// ")"
protected class ButtonElement_RightParenthesisKeyword_3 extends KeywordToken  {
	
	public ButtonElement_RightParenthesisKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getButtonElementAccess().getRightParenthesisKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ButtonElement_UnorderedGroup_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule ButtonElement ****************/


/************ begin Rule BlockElement ****************
 *
 * / *
 * 	 * validation: action.type == Callback				[√]
 * 	 * design decision: `action` needs to be an Expression because we want to be able to refer to passed callbacks (and such)
 * 	 * / BlockElement:
 * 	"block" "(" (("onClick" "=" onClick=Expression)? & ("class" "=" cssClass=STRING)? & ("bodyClass" "="
 * 	bodyCssClass=STRING)? & ("style" "=" style=STRING)? & ("header" "=" header=ElementBody)? & ("headerClass" "="
 * 	headerCssClass=STRING)? & noCss?="noCss"?) ")" body=ElementBody;
 *
 **/

// "block" "(" (("onClick" "=" onClick=Expression)? & ("class" "=" cssClass=STRING)? & ("bodyClass" "="
// bodyCssClass=STRING)? & ("style" "=" style=STRING)? & ("header" "=" header=ElementBody)? & ("headerClass" "="
// headerCssClass=STRING)? & noCss?="noCss"?) ")" body=ElementBody
protected class BlockElement_Group extends GroupToken {
	
	public BlockElement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBlockElementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BlockElement_BodyAssignment_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBlockElementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "block"
protected class BlockElement_BlockKeyword_0 extends KeywordToken  {
	
	public BlockElement_BlockKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBlockElementAccess().getBlockKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "("
protected class BlockElement_LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public BlockElement_LeftParenthesisKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBlockElementAccess().getLeftParenthesisKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BlockElement_BlockKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ("onClick" "=" onClick=Expression)? & ("class" "=" cssClass=STRING)? & ("bodyClass" "=" bodyCssClass=STRING)? & ("style"
// "=" style=STRING)? & ("header" "=" header=ElementBody)? & ("headerClass" "=" headerCssClass=STRING)? & noCss?="noCss"?
protected class BlockElement_UnorderedGroup_2 extends UnorderedGroupToken {
	
	public BlockElement_UnorderedGroup_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public UnorderedGroup getGrammarElement() {
		return grammarAccess.getBlockElementAccess().getUnorderedGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BlockElement_NoCssAssignment_2_6(lastRuleCallOrigin, this, 0, inst);
			case 1: return new BlockElement_Group_2_5(lastRuleCallOrigin, this, 1, inst);
			case 2: return new BlockElement_Group_2_4(lastRuleCallOrigin, this, 2, inst);
			case 3: return new BlockElement_Group_2_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new BlockElement_Group_2_2(lastRuleCallOrigin, this, 4, inst);
			case 5: return new BlockElement_Group_2_1(lastRuleCallOrigin, this, 5, inst);
			case 6: return new BlockElement_Group_2_0(lastRuleCallOrigin, this, 6, inst);
			case 7: return new BlockElement_LeftParenthesisKeyword_1(lastRuleCallOrigin, this, 7, inst);
			default: return null;
		}	
	}

}

// ("onClick" "=" onClick=Expression)?
protected class BlockElement_Group_2_0 extends GroupToken {
	
	public BlockElement_Group_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBlockElementAccess().getGroup_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BlockElement_OnClickAssignment_2_0_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "onClick"
protected class BlockElement_OnClickKeyword_2_0_0 extends KeywordToken  {
	
	public BlockElement_OnClickKeyword_2_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBlockElementAccess().getOnClickKeyword_2_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BlockElement_LeftParenthesisKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "="
protected class BlockElement_EqualsSignKeyword_2_0_1 extends KeywordToken  {
	
	public BlockElement_EqualsSignKeyword_2_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBlockElementAccess().getEqualsSignKeyword_2_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BlockElement_OnClickKeyword_2_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// onClick=Expression
protected class BlockElement_OnClickAssignment_2_0_2 extends AssignmentToken  {
	
	public BlockElement_OnClickAssignment_2_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBlockElementAccess().getOnClickAssignment_2_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_TernaryExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("onClick",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("onClick");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getBlockElementAccess().getOnClickExpressionParserRuleCall_2_0_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BlockElement_EqualsSignKeyword_2_0_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ("class" "=" cssClass=STRING)?
protected class BlockElement_Group_2_1 extends GroupToken {
	
	public BlockElement_Group_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBlockElementAccess().getGroup_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BlockElement_CssClassAssignment_2_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "class"
protected class BlockElement_ClassKeyword_2_1_0 extends KeywordToken  {
	
	public BlockElement_ClassKeyword_2_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBlockElementAccess().getClassKeyword_2_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BlockElement_Group_2_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new BlockElement_LeftParenthesisKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// "="
protected class BlockElement_EqualsSignKeyword_2_1_1 extends KeywordToken  {
	
	public BlockElement_EqualsSignKeyword_2_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBlockElementAccess().getEqualsSignKeyword_2_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BlockElement_ClassKeyword_2_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// cssClass=STRING
protected class BlockElement_CssClassAssignment_2_1_2 extends AssignmentToken  {
	
	public BlockElement_CssClassAssignment_2_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBlockElementAccess().getCssClassAssignment_2_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BlockElement_EqualsSignKeyword_2_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("cssClass",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("cssClass");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getBlockElementAccess().getCssClassSTRINGTerminalRuleCall_2_1_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getBlockElementAccess().getCssClassSTRINGTerminalRuleCall_2_1_2_0();
			return obj;
		}
		return null;
	}

}


// ("bodyClass" "=" bodyCssClass=STRING)?
protected class BlockElement_Group_2_2 extends GroupToken {
	
	public BlockElement_Group_2_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBlockElementAccess().getGroup_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BlockElement_BodyCssClassAssignment_2_2_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "bodyClass"
protected class BlockElement_BodyClassKeyword_2_2_0 extends KeywordToken  {
	
	public BlockElement_BodyClassKeyword_2_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBlockElementAccess().getBodyClassKeyword_2_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BlockElement_Group_2_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new BlockElement_Group_2_0(lastRuleCallOrigin, this, 1, inst);
			case 2: return new BlockElement_LeftParenthesisKeyword_1(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}

// "="
protected class BlockElement_EqualsSignKeyword_2_2_1 extends KeywordToken  {
	
	public BlockElement_EqualsSignKeyword_2_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBlockElementAccess().getEqualsSignKeyword_2_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BlockElement_BodyClassKeyword_2_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// bodyCssClass=STRING
protected class BlockElement_BodyCssClassAssignment_2_2_2 extends AssignmentToken  {
	
	public BlockElement_BodyCssClassAssignment_2_2_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBlockElementAccess().getBodyCssClassAssignment_2_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BlockElement_EqualsSignKeyword_2_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("bodyCssClass",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("bodyCssClass");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getBlockElementAccess().getBodyCssClassSTRINGTerminalRuleCall_2_2_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getBlockElementAccess().getBodyCssClassSTRINGTerminalRuleCall_2_2_2_0();
			return obj;
		}
		return null;
	}

}


// ("style" "=" style=STRING)?
protected class BlockElement_Group_2_3 extends GroupToken {
	
	public BlockElement_Group_2_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBlockElementAccess().getGroup_2_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BlockElement_StyleAssignment_2_3_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "style"
protected class BlockElement_StyleKeyword_2_3_0 extends KeywordToken  {
	
	public BlockElement_StyleKeyword_2_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBlockElementAccess().getStyleKeyword_2_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BlockElement_Group_2_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new BlockElement_Group_2_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new BlockElement_Group_2_0(lastRuleCallOrigin, this, 2, inst);
			case 3: return new BlockElement_LeftParenthesisKeyword_1(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

}

// "="
protected class BlockElement_EqualsSignKeyword_2_3_1 extends KeywordToken  {
	
	public BlockElement_EqualsSignKeyword_2_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBlockElementAccess().getEqualsSignKeyword_2_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BlockElement_StyleKeyword_2_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// style=STRING
protected class BlockElement_StyleAssignment_2_3_2 extends AssignmentToken  {
	
	public BlockElement_StyleAssignment_2_3_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBlockElementAccess().getStyleAssignment_2_3_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BlockElement_EqualsSignKeyword_2_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("style",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("style");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getBlockElementAccess().getStyleSTRINGTerminalRuleCall_2_3_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getBlockElementAccess().getStyleSTRINGTerminalRuleCall_2_3_2_0();
			return obj;
		}
		return null;
	}

}


// ("header" "=" header=ElementBody)?
protected class BlockElement_Group_2_4 extends GroupToken {
	
	public BlockElement_Group_2_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBlockElementAccess().getGroup_2_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BlockElement_HeaderAssignment_2_4_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "header"
protected class BlockElement_HeaderKeyword_2_4_0 extends KeywordToken  {
	
	public BlockElement_HeaderKeyword_2_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBlockElementAccess().getHeaderKeyword_2_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BlockElement_Group_2_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new BlockElement_Group_2_2(lastRuleCallOrigin, this, 1, inst);
			case 2: return new BlockElement_Group_2_1(lastRuleCallOrigin, this, 2, inst);
			case 3: return new BlockElement_Group_2_0(lastRuleCallOrigin, this, 3, inst);
			case 4: return new BlockElement_LeftParenthesisKeyword_1(lastRuleCallOrigin, this, 4, inst);
			default: return null;
		}	
	}

}

// "="
protected class BlockElement_EqualsSignKeyword_2_4_1 extends KeywordToken  {
	
	public BlockElement_EqualsSignKeyword_2_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBlockElementAccess().getEqualsSignKeyword_2_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BlockElement_HeaderKeyword_2_4_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// header=ElementBody
protected class BlockElement_HeaderAssignment_2_4_2 extends AssignmentToken  {
	
	public BlockElement_HeaderAssignment_2_4_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBlockElementAccess().getHeaderAssignment_2_4_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ElementBody_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("header",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("header");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getElementBodyRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getBlockElementAccess().getHeaderElementBodyParserRuleCall_2_4_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BlockElement_EqualsSignKeyword_2_4_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ("headerClass" "=" headerCssClass=STRING)?
protected class BlockElement_Group_2_5 extends GroupToken {
	
	public BlockElement_Group_2_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBlockElementAccess().getGroup_2_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BlockElement_HeaderCssClassAssignment_2_5_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "headerClass"
protected class BlockElement_HeaderClassKeyword_2_5_0 extends KeywordToken  {
	
	public BlockElement_HeaderClassKeyword_2_5_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBlockElementAccess().getHeaderClassKeyword_2_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BlockElement_Group_2_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new BlockElement_Group_2_3(lastRuleCallOrigin, this, 1, inst);
			case 2: return new BlockElement_Group_2_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new BlockElement_Group_2_1(lastRuleCallOrigin, this, 3, inst);
			case 4: return new BlockElement_Group_2_0(lastRuleCallOrigin, this, 4, inst);
			case 5: return new BlockElement_LeftParenthesisKeyword_1(lastRuleCallOrigin, this, 5, inst);
			default: return null;
		}	
	}

}

// "="
protected class BlockElement_EqualsSignKeyword_2_5_1 extends KeywordToken  {
	
	public BlockElement_EqualsSignKeyword_2_5_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBlockElementAccess().getEqualsSignKeyword_2_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BlockElement_HeaderClassKeyword_2_5_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// headerCssClass=STRING
protected class BlockElement_HeaderCssClassAssignment_2_5_2 extends AssignmentToken  {
	
	public BlockElement_HeaderCssClassAssignment_2_5_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBlockElementAccess().getHeaderCssClassAssignment_2_5_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BlockElement_EqualsSignKeyword_2_5_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("headerCssClass",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("headerCssClass");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getBlockElementAccess().getHeaderCssClassSTRINGTerminalRuleCall_2_5_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getBlockElementAccess().getHeaderCssClassSTRINGTerminalRuleCall_2_5_2_0();
			return obj;
		}
		return null;
	}

}


// noCss?="noCss"?
protected class BlockElement_NoCssAssignment_2_6 extends AssignmentToken  {
	
	public BlockElement_NoCssAssignment_2_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBlockElementAccess().getNoCssAssignment_2_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BlockElement_Group_2_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new BlockElement_Group_2_4(lastRuleCallOrigin, this, 1, inst);
			case 2: return new BlockElement_Group_2_3(lastRuleCallOrigin, this, 2, inst);
			case 3: return new BlockElement_Group_2_2(lastRuleCallOrigin, this, 3, inst);
			case 4: return new BlockElement_Group_2_1(lastRuleCallOrigin, this, 4, inst);
			case 5: return new BlockElement_Group_2_0(lastRuleCallOrigin, this, 5, inst);
			case 6: return new BlockElement_LeftParenthesisKeyword_1(lastRuleCallOrigin, this, 6, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("noCss",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("noCss");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getBlockElementAccess().getNoCssNoCssKeyword_2_6_0();
			return obj;
		}
		return null;
	}

}


// ")"
protected class BlockElement_RightParenthesisKeyword_3 extends KeywordToken  {
	
	public BlockElement_RightParenthesisKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBlockElementAccess().getRightParenthesisKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BlockElement_UnorderedGroup_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// body=ElementBody
protected class BlockElement_BodyAssignment_4 extends AssignmentToken  {
	
	public BlockElement_BodyAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBlockElementAccess().getBodyAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ElementBody_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("body",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("body");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getElementBodyRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getBlockElementAccess().getBodyElementBodyParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BlockElement_RightParenthesisKeyword_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule BlockElement ****************/


/************ begin Rule ListElement ****************
 *
 * / *
 * 	 * validation: onClick.type == Callback				[√] 
 * 	 * / ListElement:
 * 	"list" "(" "(" indexVariable=ListVariable "->" valueVariable=ListVariable ")" "in" listExpression=Expression ")"
 * 	body=ElementBody;
 *
 **/

// "list" "(" "(" indexVariable=ListVariable "->" valueVariable=ListVariable ")" "in" listExpression=Expression ")"
// body=ElementBody
protected class ListElement_Group extends GroupToken {
	
	public ListElement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getListElementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListElement_BodyAssignment_10(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getListElementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "list"
protected class ListElement_ListKeyword_0 extends KeywordToken  {
	
	public ListElement_ListKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getListElementAccess().getListKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "("
protected class ListElement_LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public ListElement_LeftParenthesisKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getListElementAccess().getLeftParenthesisKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListElement_ListKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "("
protected class ListElement_LeftParenthesisKeyword_2 extends KeywordToken  {
	
	public ListElement_LeftParenthesisKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getListElementAccess().getLeftParenthesisKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListElement_LeftParenthesisKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// indexVariable=ListVariable
protected class ListElement_IndexVariableAssignment_3 extends AssignmentToken  {
	
	public ListElement_IndexVariableAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getListElementAccess().getIndexVariableAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListVariable_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("indexVariable",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("indexVariable");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getListVariableRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getListElementAccess().getIndexVariableListVariableParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ListElement_LeftParenthesisKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "->"
protected class ListElement_HyphenMinusGreaterThanSignKeyword_4 extends KeywordToken  {
	
	public ListElement_HyphenMinusGreaterThanSignKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getListElementAccess().getHyphenMinusGreaterThanSignKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListElement_IndexVariableAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// valueVariable=ListVariable
protected class ListElement_ValueVariableAssignment_5 extends AssignmentToken  {
	
	public ListElement_ValueVariableAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getListElementAccess().getValueVariableAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListVariable_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("valueVariable",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("valueVariable");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getListVariableRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getListElementAccess().getValueVariableListVariableParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ListElement_HyphenMinusGreaterThanSignKeyword_4(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class ListElement_RightParenthesisKeyword_6 extends KeywordToken  {
	
	public ListElement_RightParenthesisKeyword_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getListElementAccess().getRightParenthesisKeyword_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListElement_ValueVariableAssignment_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "in"
protected class ListElement_InKeyword_7 extends KeywordToken  {
	
	public ListElement_InKeyword_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getListElementAccess().getInKeyword_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListElement_RightParenthesisKeyword_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// listExpression=Expression
protected class ListElement_ListExpressionAssignment_8 extends AssignmentToken  {
	
	public ListElement_ListExpressionAssignment_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getListElementAccess().getListExpressionAssignment_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_TernaryExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("listExpression",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("listExpression");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getListElementAccess().getListExpressionExpressionParserRuleCall_8_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ListElement_InKeyword_7(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class ListElement_RightParenthesisKeyword_9 extends KeywordToken  {
	
	public ListElement_RightParenthesisKeyword_9(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getListElementAccess().getRightParenthesisKeyword_9();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListElement_ListExpressionAssignment_8(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// body=ElementBody
protected class ListElement_BodyAssignment_10 extends AssignmentToken  {
	
	public ListElement_BodyAssignment_10(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getListElementAccess().getBodyAssignment_10();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ElementBody_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("body",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("body");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getElementBodyRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getListElementAccess().getBodyElementBodyParserRuleCall_10_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ListElement_RightParenthesisKeyword_9(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule ListElement ****************/


/************ begin Rule ListVariable ****************
 *
 * // validation: listExpression.type.arrayTyped		[√]
 * // TODO  add element that serves as a deletion mechanism
 * ListVariable:
 * 	name=ID;
 *
 **/

// name=ID
protected class ListVariable_NameAssignment extends AssignmentToken  {
	
	public ListVariable_NameAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getListVariableAccess().getNameAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getListVariableRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getListVariableAccess().getNameIDTerminalRuleCall_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getListVariableAccess().getNameIDTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule ListVariable ****************/


/************ begin Rule TableElement ****************
 *
 * TableElement:
 * 	{TableElement} "table" "{" subElements+=TableBodyElement* "}";
 *
 **/

// {TableElement} "table" "{" subElements+=TableBodyElement* "}"
protected class TableElement_Group extends GroupToken {
	
	public TableElement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTableElementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TableElement_RightCurlyBracketKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTableElementAccess().getTableElementAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {TableElement}
protected class TableElement_TableElementAction_0 extends ActionToken  {

	public TableElement_TableElementAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getTableElementAccess().getTableElementAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "table"
protected class TableElement_TableKeyword_1 extends KeywordToken  {
	
	public TableElement_TableKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTableElementAccess().getTableKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TableElement_TableElementAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "{"
protected class TableElement_LeftCurlyBracketKeyword_2 extends KeywordToken  {
	
	public TableElement_LeftCurlyBracketKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTableElementAccess().getLeftCurlyBracketKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TableElement_TableKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// subElements+=TableBodyElement*
protected class TableElement_SubElementsAssignment_3 extends AssignmentToken  {
	
	public TableElement_SubElementsAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTableElementAccess().getSubElementsAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TableBodyElement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subElements",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subElements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTableBodyElementRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTableElementAccess().getSubElementsTableBodyElementParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TableElement_SubElementsAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new TableElement_LeftCurlyBracketKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class TableElement_RightCurlyBracketKeyword_4 extends KeywordToken  {
	
	public TableElement_RightCurlyBracketKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTableElementAccess().getRightCurlyBracketKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TableElement_SubElementsAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TableElement_LeftCurlyBracketKeyword_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule TableElement ****************/


/************ begin Rule TableBodyElement ****************
 *
 * // validation: warning if subElements.empty								[√]
 * TableBodyElement:
 * 	TableRow | TableRowsInvocation;
 *
 **/

// TableRow | TableRowsInvocation
protected class TableBodyElement_Alternatives extends AlternativesToken {

	public TableBodyElement_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTableBodyElementAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TableBodyElement_TableRowParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TableBodyElement_TableRowsInvocationParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTableRowRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTableRowsInvocationRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// TableRow
protected class TableBodyElement_TableRowParserRuleCall_0 extends RuleCallToken {
	
	public TableBodyElement_TableRowParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTableBodyElementAccess().getTableRowParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TableRow_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTableRowRule().getType().getClassifier())
			return null;
		if(checkForRecursion(TableRow_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// TableRowsInvocation
protected class TableBodyElement_TableRowsInvocationParserRuleCall_1 extends RuleCallToken {
	
	public TableBodyElement_TableRowsInvocationParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTableBodyElementAccess().getTableRowsInvocationParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TableRowsInvocation_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTableRowsInvocationRule().getType().getClassifier())
			return null;
		if(checkForRecursion(TableRowsInvocation_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule TableBodyElement ****************/


/************ begin Rule TableRowsInvocation ****************
 *
 * TableRowsInvocation:
 * 	"embed" definition=[TableRowsDefinition] argumentList=ArgumentList;
 *
 **/

// "embed" definition=[TableRowsDefinition] argumentList=ArgumentList
protected class TableRowsInvocation_Group extends GroupToken {
	
	public TableRowsInvocation_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTableRowsInvocationAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TableRowsInvocation_ArgumentListAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTableRowsInvocationRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "embed"
protected class TableRowsInvocation_EmbedKeyword_0 extends KeywordToken  {
	
	public TableRowsInvocation_EmbedKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTableRowsInvocationAccess().getEmbedKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// definition=[TableRowsDefinition]
protected class TableRowsInvocation_DefinitionAssignment_1 extends AssignmentToken  {
	
	public TableRowsInvocation_DefinitionAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTableRowsInvocationAccess().getDefinitionAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TableRowsInvocation_EmbedKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("definition",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("definition");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTableRowsInvocationAccess().getDefinitionTableRowsDefinitionCrossReference_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getTableRowsInvocationAccess().getDefinitionTableRowsDefinitionCrossReference_1_0(); 
				return obj;
			}
		}
		return null;
	}

}

// argumentList=ArgumentList
protected class TableRowsInvocation_ArgumentListAssignment_2 extends AssignmentToken  {
	
	public TableRowsInvocation_ArgumentListAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTableRowsInvocationAccess().getArgumentListAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ArgumentList_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("argumentList",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("argumentList");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getArgumentListRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTableRowsInvocationAccess().getArgumentListArgumentListParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TableRowsInvocation_DefinitionAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule TableRowsInvocation ****************/


/************ begin Rule TableRow ****************
 *
 * TableRow:
 * 	label=Expression body= // the implicit, quasi-non-LL(*) kind
 * 	ElementBody;
 *
 **/

// label=Expression body= // the implicit, quasi-non-LL(*) kind
// ElementBody
protected class TableRow_Group extends GroupToken {
	
	public TableRow_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTableRowAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TableRow_BodyAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTableRowRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// label=Expression
protected class TableRow_LabelAssignment_0 extends AssignmentToken  {
	
	public TableRow_LabelAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTableRowAccess().getLabelAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_TernaryExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("label",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("label");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTableRowAccess().getLabelExpressionParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// body= // the implicit, quasi-non-LL(*) kind
// ElementBody
protected class TableRow_BodyAssignment_1 extends AssignmentToken  {
	
	public TableRow_BodyAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTableRowAccess().getBodyAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ElementBody_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("body",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("body");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getElementBodyRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTableRowAccess().getBodyElementBodyParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TableRow_LabelAssignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule TableRow ****************/


/************ begin Rule LabeledTableElement ****************
 *
 * // validation: label.type = STRING										[√]
 * LabeledTableElement:
 * 	{LabeledTableElement} "labeled-table" body=ElementBody;
 *
 **/

// {LabeledTableElement} "labeled-table" body=ElementBody
protected class LabeledTableElement_Group extends GroupToken {
	
	public LabeledTableElement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLabeledTableElementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LabeledTableElement_BodyAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLabeledTableElementAccess().getLabeledTableElementAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {LabeledTableElement}
protected class LabeledTableElement_LabeledTableElementAction_0 extends ActionToken  {

	public LabeledTableElement_LabeledTableElementAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getLabeledTableElementAccess().getLabeledTableElementAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "labeled-table"
protected class LabeledTableElement_LabeledTableKeyword_1 extends KeywordToken  {
	
	public LabeledTableElement_LabeledTableKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLabeledTableElementAccess().getLabeledTableKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LabeledTableElement_LabeledTableElementAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// body=ElementBody
protected class LabeledTableElement_BodyAssignment_2 extends AssignmentToken  {
	
	public LabeledTableElement_BodyAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLabeledTableElementAccess().getBodyAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ElementBody_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("body",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("body");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getElementBodyRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getLabeledTableElementAccess().getBodyElementBodyParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new LabeledTableElement_LabeledTableKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule LabeledTableElement ****************/


/************ begin Rule LabeledTableRow ****************
 *
 * // validate: all directly-contained, non-structural elements are a LabeledTableRow	[√]
 * LabeledTableRow:
 * 	"label" "=" label=Expression body= // the explicit, LL(*) kind
 * 	ElementBody;
 *
 **/

// "label" "=" label=Expression body= // the explicit, LL(*) kind
// ElementBody
protected class LabeledTableRow_Group extends GroupToken {
	
	public LabeledTableRow_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLabeledTableRowAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LabeledTableRow_BodyAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLabeledTableRowRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "label"
protected class LabeledTableRow_LabelKeyword_0 extends KeywordToken  {
	
	public LabeledTableRow_LabelKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLabeledTableRowAccess().getLabelKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "="
protected class LabeledTableRow_EqualsSignKeyword_1 extends KeywordToken  {
	
	public LabeledTableRow_EqualsSignKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLabeledTableRowAccess().getEqualsSignKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LabeledTableRow_LabelKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// label=Expression
protected class LabeledTableRow_LabelAssignment_2 extends AssignmentToken  {
	
	public LabeledTableRow_LabelAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLabeledTableRowAccess().getLabelAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_TernaryExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("label",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("label");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getLabeledTableRowAccess().getLabelExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new LabeledTableRow_EqualsSignKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// body= // the explicit, LL(*) kind
// ElementBody
protected class LabeledTableRow_BodyAssignment_3 extends AssignmentToken  {
	
	public LabeledTableRow_BodyAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLabeledTableRowAccess().getBodyAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ElementBody_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("body",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("body");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getElementBodyRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getLabeledTableRowAccess().getBodyElementBodyParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new LabeledTableRow_LabelAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule LabeledTableRow ****************/


/************ begin Rule ProgressBarTabSet ****************
 *
 * // validation: label.type = STRING										[√]
 * ProgressBarTabSet:
 * 	{ProgressBarTabSet} "progressBarTabSet" "(" tabs+=TabDeclaration* ")";
 *
 **/

// {ProgressBarTabSet} "progressBarTabSet" "(" tabs+=TabDeclaration* ")"
protected class ProgressBarTabSet_Group extends GroupToken {
	
	public ProgressBarTabSet_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getProgressBarTabSetAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProgressBarTabSet_RightParenthesisKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getProgressBarTabSetAccess().getProgressBarTabSetAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {ProgressBarTabSet}
protected class ProgressBarTabSet_ProgressBarTabSetAction_0 extends ActionToken  {

	public ProgressBarTabSet_ProgressBarTabSetAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getProgressBarTabSetAccess().getProgressBarTabSetAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "progressBarTabSet"
protected class ProgressBarTabSet_ProgressBarTabSetKeyword_1 extends KeywordToken  {
	
	public ProgressBarTabSet_ProgressBarTabSetKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getProgressBarTabSetAccess().getProgressBarTabSetKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProgressBarTabSet_ProgressBarTabSetAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "("
protected class ProgressBarTabSet_LeftParenthesisKeyword_2 extends KeywordToken  {
	
	public ProgressBarTabSet_LeftParenthesisKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getProgressBarTabSetAccess().getLeftParenthesisKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProgressBarTabSet_ProgressBarTabSetKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// tabs+=TabDeclaration*
protected class ProgressBarTabSet_TabsAssignment_3 extends AssignmentToken  {
	
	public ProgressBarTabSet_TabsAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProgressBarTabSetAccess().getTabsAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TabDeclaration_UnorderedGroup(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("tabs",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("tabs");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTabDeclarationRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getProgressBarTabSetAccess().getTabsTabDeclarationParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ProgressBarTabSet_TabsAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ProgressBarTabSet_LeftParenthesisKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class ProgressBarTabSet_RightParenthesisKeyword_4 extends KeywordToken  {
	
	public ProgressBarTabSet_RightParenthesisKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getProgressBarTabSetAccess().getRightParenthesisKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProgressBarTabSet_TabsAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ProgressBarTabSet_LeftParenthesisKeyword_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule ProgressBarTabSet ****************/


/************ begin Rule TabDeclaration ****************
 *
 * // validation: warning if #tabs == 0				[√]
 * TabDeclaration:
 * 	"{" ("header" "=" header=ElementBody) & "component" "=" viewable=[Viewable] argumentList=ArgumentList & ("previous"
 * 	"=" previousCallback=CallbackExpression)? & ("next" "=" nextCallback=CallbackExpression)? "}";
 *
 **/

// "{" ("header" "=" header=ElementBody) & "component" "=" viewable=[Viewable] argumentList=ArgumentList & ("previous" "="
// previousCallback=CallbackExpression)? & ("next" "=" nextCallback=CallbackExpression)? "}"
protected class TabDeclaration_UnorderedGroup extends UnorderedGroupToken {
	
	public TabDeclaration_UnorderedGroup(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public UnorderedGroup getGrammarElement() {
		return grammarAccess.getTabDeclarationAccess().getUnorderedGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TabDeclaration_Group_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTabDeclarationRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "{" ("header" "=" header=ElementBody)
protected class TabDeclaration_Group_0 extends GroupToken {
	
	public TabDeclaration_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTabDeclarationAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TabDeclaration_Group_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "{"
protected class TabDeclaration_LeftCurlyBracketKeyword_0_0 extends KeywordToken  {
	
	public TabDeclaration_LeftCurlyBracketKeyword_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTabDeclarationAccess().getLeftCurlyBracketKeyword_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "header" "=" header=ElementBody
protected class TabDeclaration_Group_0_1 extends GroupToken {
	
	public TabDeclaration_Group_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTabDeclarationAccess().getGroup_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TabDeclaration_HeaderAssignment_0_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "header"
protected class TabDeclaration_HeaderKeyword_0_1_0 extends KeywordToken  {
	
	public TabDeclaration_HeaderKeyword_0_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTabDeclarationAccess().getHeaderKeyword_0_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TabDeclaration_LeftCurlyBracketKeyword_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "="
protected class TabDeclaration_EqualsSignKeyword_0_1_1 extends KeywordToken  {
	
	public TabDeclaration_EqualsSignKeyword_0_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTabDeclarationAccess().getEqualsSignKeyword_0_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TabDeclaration_HeaderKeyword_0_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// header=ElementBody
protected class TabDeclaration_HeaderAssignment_0_1_2 extends AssignmentToken  {
	
	public TabDeclaration_HeaderAssignment_0_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTabDeclarationAccess().getHeaderAssignment_0_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ElementBody_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("header",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("header");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getElementBodyRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTabDeclarationAccess().getHeaderElementBodyParserRuleCall_0_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TabDeclaration_EqualsSignKeyword_0_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// "component" "=" viewable=[Viewable] argumentList=ArgumentList
protected class TabDeclaration_Group_1 extends GroupToken {
	
	public TabDeclaration_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTabDeclarationAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TabDeclaration_ArgumentListAssignment_1_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "component"
protected class TabDeclaration_ComponentKeyword_1_0 extends KeywordToken  {
	
	public TabDeclaration_ComponentKeyword_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTabDeclarationAccess().getComponentKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TabDeclaration_Group_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "="
protected class TabDeclaration_EqualsSignKeyword_1_1 extends KeywordToken  {
	
	public TabDeclaration_EqualsSignKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTabDeclarationAccess().getEqualsSignKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TabDeclaration_ComponentKeyword_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// viewable=[Viewable]
protected class TabDeclaration_ViewableAssignment_1_2 extends AssignmentToken  {
	
	public TabDeclaration_ViewableAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTabDeclarationAccess().getViewableAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TabDeclaration_EqualsSignKeyword_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("viewable",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("viewable");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTabDeclarationAccess().getViewableViewableCrossReference_1_2_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getTabDeclarationAccess().getViewableViewableCrossReference_1_2_0(); 
				return obj;
			}
		}
		return null;
	}

}

// argumentList=ArgumentList
protected class TabDeclaration_ArgumentListAssignment_1_3 extends AssignmentToken  {
	
	public TabDeclaration_ArgumentListAssignment_1_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTabDeclarationAccess().getArgumentListAssignment_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ArgumentList_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("argumentList",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("argumentList");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getArgumentListRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTabDeclarationAccess().getArgumentListArgumentListParserRuleCall_1_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TabDeclaration_ViewableAssignment_1_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ("previous" "=" previousCallback=CallbackExpression)?
protected class TabDeclaration_Group_2 extends GroupToken {
	
	public TabDeclaration_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTabDeclarationAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TabDeclaration_PreviousCallbackAssignment_2_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "previous"
protected class TabDeclaration_PreviousKeyword_2_0 extends KeywordToken  {
	
	public TabDeclaration_PreviousKeyword_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTabDeclarationAccess().getPreviousKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TabDeclaration_Group_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "="
protected class TabDeclaration_EqualsSignKeyword_2_1 extends KeywordToken  {
	
	public TabDeclaration_EqualsSignKeyword_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTabDeclarationAccess().getEqualsSignKeyword_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TabDeclaration_PreviousKeyword_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// previousCallback=CallbackExpression
protected class TabDeclaration_PreviousCallbackAssignment_2_2 extends AssignmentToken  {
	
	public TabDeclaration_PreviousCallbackAssignment_2_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTabDeclarationAccess().getPreviousCallbackAssignment_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CallbackExpression_StatementBlockAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("previousCallback",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("previousCallback");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCallbackExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTabDeclarationAccess().getPreviousCallbackCallbackExpressionParserRuleCall_2_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TabDeclaration_EqualsSignKeyword_2_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ("next" "=" nextCallback=CallbackExpression)? "}"
protected class TabDeclaration_Group_3 extends GroupToken {
	
	public TabDeclaration_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTabDeclarationAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TabDeclaration_RightCurlyBracketKeyword_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ("next" "=" nextCallback=CallbackExpression)?
protected class TabDeclaration_Group_3_0 extends GroupToken {
	
	public TabDeclaration_Group_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTabDeclarationAccess().getGroup_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TabDeclaration_NextCallbackAssignment_3_0_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "next"
protected class TabDeclaration_NextKeyword_3_0_0 extends KeywordToken  {
	
	public TabDeclaration_NextKeyword_3_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTabDeclarationAccess().getNextKeyword_3_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TabDeclaration_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TabDeclaration_Group_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// "="
protected class TabDeclaration_EqualsSignKeyword_3_0_1 extends KeywordToken  {
	
	public TabDeclaration_EqualsSignKeyword_3_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTabDeclarationAccess().getEqualsSignKeyword_3_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TabDeclaration_NextKeyword_3_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// nextCallback=CallbackExpression
protected class TabDeclaration_NextCallbackAssignment_3_0_2 extends AssignmentToken  {
	
	public TabDeclaration_NextCallbackAssignment_3_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTabDeclarationAccess().getNextCallbackAssignment_3_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CallbackExpression_StatementBlockAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("nextCallback",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("nextCallback");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCallbackExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTabDeclarationAccess().getNextCallbackCallbackExpressionParserRuleCall_3_0_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TabDeclaration_EqualsSignKeyword_3_0_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "}"
protected class TabDeclaration_RightCurlyBracketKeyword_3_1 extends KeywordToken  {
	
	public TabDeclaration_RightCurlyBracketKeyword_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTabDeclarationAccess().getRightCurlyBracketKeyword_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TabDeclaration_Group_3_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TabDeclaration_Group_2(lastRuleCallOrigin, this, 1, inst);
			case 2: return new TabDeclaration_Group_1(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}



/************ end Rule TabDeclaration ****************/


/************ begin Rule GroupElement ****************
 *
 * / *
 * 	 * validation:
 * 	 * 		1-  title must be string-typed				[√]
 * 	 * 		2-  viewable must be a component			[√]
 * 	 * / // TODO  remove this construct as we seem to prefer using block-s with CSS
 * GroupElement:
 * 	{GroupElement} "group" ("(" "orientation" "=" orientation=GroupOrientations ("v-align" "=" v_align=VerticalAlignment)?
 * 	")")? "{" (nestedGroups+=GroupElement+ | leafGroups+=ElementBody+) "}";
 *
 **/

// {GroupElement} "group" ("(" "orientation" "=" orientation=GroupOrientations ("v-align" "=" v_align=VerticalAlignment)?
// ")")? "{" (nestedGroups+=GroupElement+ | leafGroups+=ElementBody+) "}"
protected class GroupElement_Group extends GroupToken {
	
	public GroupElement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getGroupElementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GroupElement_RightCurlyBracketKeyword_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getGroupElementAccess().getGroupElementAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {GroupElement}
protected class GroupElement_GroupElementAction_0 extends ActionToken  {

	public GroupElement_GroupElementAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getGroupElementAccess().getGroupElementAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "group"
protected class GroupElement_GroupKeyword_1 extends KeywordToken  {
	
	public GroupElement_GroupKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getGroupElementAccess().getGroupKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GroupElement_GroupElementAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ("(" "orientation" "=" orientation=GroupOrientations ("v-align" "=" v_align=VerticalAlignment)? ")")?
protected class GroupElement_Group_2 extends GroupToken {
	
	public GroupElement_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getGroupElementAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GroupElement_RightParenthesisKeyword_2_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "("
protected class GroupElement_LeftParenthesisKeyword_2_0 extends KeywordToken  {
	
	public GroupElement_LeftParenthesisKeyword_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getGroupElementAccess().getLeftParenthesisKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GroupElement_GroupKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "orientation"
protected class GroupElement_OrientationKeyword_2_1 extends KeywordToken  {
	
	public GroupElement_OrientationKeyword_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getGroupElementAccess().getOrientationKeyword_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GroupElement_LeftParenthesisKeyword_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "="
protected class GroupElement_EqualsSignKeyword_2_2 extends KeywordToken  {
	
	public GroupElement_EqualsSignKeyword_2_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getGroupElementAccess().getEqualsSignKeyword_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GroupElement_OrientationKeyword_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// orientation=GroupOrientations
protected class GroupElement_OrientationAssignment_2_3 extends AssignmentToken  {
	
	public GroupElement_OrientationAssignment_2_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getGroupElementAccess().getOrientationAssignment_2_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GroupElement_EqualsSignKeyword_2_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("orientation",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("orientation");
		if(enumLitSerializer.isValid(obj.getEObject(), grammarAccess.getGroupElementAccess().getOrientationGroupOrientationsEnumRuleCall_2_3_0(), value, null)) { 
			type = AssignmentType.ENUM_RULE_CALL;
			element = grammarAccess.getGroupElementAccess().getOrientationGroupOrientationsEnumRuleCall_2_3_0();
			return obj;
		}
		return null;
	}

}

// ("v-align" "=" v_align=VerticalAlignment)?
protected class GroupElement_Group_2_4 extends GroupToken {
	
	public GroupElement_Group_2_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getGroupElementAccess().getGroup_2_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GroupElement_V_alignAssignment_2_4_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "v-align"
protected class GroupElement_VAlignKeyword_2_4_0 extends KeywordToken  {
	
	public GroupElement_VAlignKeyword_2_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getGroupElementAccess().getVAlignKeyword_2_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GroupElement_OrientationAssignment_2_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "="
protected class GroupElement_EqualsSignKeyword_2_4_1 extends KeywordToken  {
	
	public GroupElement_EqualsSignKeyword_2_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getGroupElementAccess().getEqualsSignKeyword_2_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GroupElement_VAlignKeyword_2_4_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// v_align=VerticalAlignment
protected class GroupElement_V_alignAssignment_2_4_2 extends AssignmentToken  {
	
	public GroupElement_V_alignAssignment_2_4_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getGroupElementAccess().getV_alignAssignment_2_4_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GroupElement_EqualsSignKeyword_2_4_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("v_align",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("v_align");
		if(enumLitSerializer.isValid(obj.getEObject(), grammarAccess.getGroupElementAccess().getV_alignVerticalAlignmentEnumRuleCall_2_4_2_0(), value, null)) { 
			type = AssignmentType.ENUM_RULE_CALL;
			element = grammarAccess.getGroupElementAccess().getV_alignVerticalAlignmentEnumRuleCall_2_4_2_0();
			return obj;
		}
		return null;
	}

}


// ")"
protected class GroupElement_RightParenthesisKeyword_2_5 extends KeywordToken  {
	
	public GroupElement_RightParenthesisKeyword_2_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getGroupElementAccess().getRightParenthesisKeyword_2_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GroupElement_Group_2_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new GroupElement_OrientationAssignment_2_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


// "{"
protected class GroupElement_LeftCurlyBracketKeyword_3 extends KeywordToken  {
	
	public GroupElement_LeftCurlyBracketKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getGroupElementAccess().getLeftCurlyBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GroupElement_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new GroupElement_GroupKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// nestedGroups+=GroupElement+ | leafGroups+=ElementBody+
protected class GroupElement_Alternatives_4 extends AlternativesToken {

	public GroupElement_Alternatives_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getGroupElementAccess().getAlternatives_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GroupElement_NestedGroupsAssignment_4_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new GroupElement_LeafGroupsAssignment_4_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// nestedGroups+=GroupElement+
protected class GroupElement_NestedGroupsAssignment_4_0 extends AssignmentToken  {
	
	public GroupElement_NestedGroupsAssignment_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getGroupElementAccess().getNestedGroupsAssignment_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GroupElement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("nestedGroups",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("nestedGroups");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getGroupElementRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getGroupElementAccess().getNestedGroupsGroupElementParserRuleCall_4_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new GroupElement_NestedGroupsAssignment_4_0(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new GroupElement_LeftCurlyBracketKeyword_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// leafGroups+=ElementBody+
protected class GroupElement_LeafGroupsAssignment_4_1 extends AssignmentToken  {
	
	public GroupElement_LeafGroupsAssignment_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getGroupElementAccess().getLeafGroupsAssignment_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ElementBody_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("leafGroups",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("leafGroups");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getElementBodyRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getGroupElementAccess().getLeafGroupsElementBodyParserRuleCall_4_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new GroupElement_LeafGroupsAssignment_4_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new GroupElement_LeftCurlyBracketKeyword_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "}"
protected class GroupElement_RightCurlyBracketKeyword_5 extends KeywordToken  {
	
	public GroupElement_RightCurlyBracketKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getGroupElementAccess().getRightCurlyBracketKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GroupElement_Alternatives_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule GroupElement ****************/


/************ begin Rule CountdownTimer ****************
 *
 * CountdownTimer:
 * 	"countdownTimer" "(" observed?="observe"? endTime=Expression ("onEnd" "=" onEnd=Expression)? ")";
 *
 **/

// "countdownTimer" "(" observed?="observe"? endTime=Expression ("onEnd" "=" onEnd=Expression)? ")"
protected class CountdownTimer_Group extends GroupToken {
	
	public CountdownTimer_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCountdownTimerAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CountdownTimer_RightParenthesisKeyword_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCountdownTimerRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "countdownTimer"
protected class CountdownTimer_CountdownTimerKeyword_0 extends KeywordToken  {
	
	public CountdownTimer_CountdownTimerKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCountdownTimerAccess().getCountdownTimerKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "("
protected class CountdownTimer_LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public CountdownTimer_LeftParenthesisKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCountdownTimerAccess().getLeftParenthesisKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CountdownTimer_CountdownTimerKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// observed?="observe"?
protected class CountdownTimer_ObservedAssignment_2 extends AssignmentToken  {
	
	public CountdownTimer_ObservedAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCountdownTimerAccess().getObservedAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CountdownTimer_LeftParenthesisKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("observed",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("observed");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getCountdownTimerAccess().getObservedObserveKeyword_2_0();
			return obj;
		}
		return null;
	}

}

// endTime=Expression
protected class CountdownTimer_EndTimeAssignment_3 extends AssignmentToken  {
	
	public CountdownTimer_EndTimeAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCountdownTimerAccess().getEndTimeAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_TernaryExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("endTime",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("endTime");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getCountdownTimerAccess().getEndTimeExpressionParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CountdownTimer_ObservedAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new CountdownTimer_LeftParenthesisKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("onEnd" "=" onEnd=Expression)?
protected class CountdownTimer_Group_4 extends GroupToken {
	
	public CountdownTimer_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCountdownTimerAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CountdownTimer_OnEndAssignment_4_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "onEnd"
protected class CountdownTimer_OnEndKeyword_4_0 extends KeywordToken  {
	
	public CountdownTimer_OnEndKeyword_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCountdownTimerAccess().getOnEndKeyword_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CountdownTimer_EndTimeAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "="
protected class CountdownTimer_EqualsSignKeyword_4_1 extends KeywordToken  {
	
	public CountdownTimer_EqualsSignKeyword_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCountdownTimerAccess().getEqualsSignKeyword_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CountdownTimer_OnEndKeyword_4_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// onEnd=Expression
protected class CountdownTimer_OnEndAssignment_4_2 extends AssignmentToken  {
	
	public CountdownTimer_OnEndAssignment_4_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCountdownTimerAccess().getOnEndAssignment_4_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_TernaryExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("onEnd",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("onEnd");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getCountdownTimerAccess().getOnEndExpressionParserRuleCall_4_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CountdownTimer_EqualsSignKeyword_4_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ")"
protected class CountdownTimer_RightParenthesisKeyword_5 extends KeywordToken  {
	
	public CountdownTimer_RightParenthesisKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCountdownTimerAccess().getRightParenthesisKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CountdownTimer_Group_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new CountdownTimer_EndTimeAssignment_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule CountdownTimer ****************/


/************ begin Rule ObserveElement ****************
 *
 * / *
 * 	 * validation:
 * 	 *		1-  bindSite must be a proper target/valid left-hand side iff bound		[√]
 * 	 * 		2-  onEnd.type == CallbackExpression iff onEnd != null					[√]
 * 	 * / ObserveElement:
 * 	"observe" observeExpr=Expression statementBlock=StatementBlock;
 *
 **/

// "observe" observeExpr=Expression statementBlock=StatementBlock
protected class ObserveElement_Group extends GroupToken {
	
	public ObserveElement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getObserveElementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ObserveElement_StatementBlockAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getObserveElementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "observe"
protected class ObserveElement_ObserveKeyword_0 extends KeywordToken  {
	
	public ObserveElement_ObserveKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getObserveElementAccess().getObserveKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// observeExpr=Expression
protected class ObserveElement_ObserveExprAssignment_1 extends AssignmentToken  {
	
	public ObserveElement_ObserveExprAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getObserveElementAccess().getObserveExprAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_TernaryExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("observeExpr",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("observeExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getObserveElementAccess().getObserveExprExpressionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ObserveElement_ObserveKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// statementBlock=StatementBlock
protected class ObserveElement_StatementBlockAssignment_2 extends AssignmentToken  {
	
	public ObserveElement_StatementBlockAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getObserveElementAccess().getStatementBlockAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StatementBlock_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("statementBlock",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("statementBlock");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementBlockRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getObserveElementAccess().getStatementBlockStatementBlockParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ObserveElement_ObserveExprAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule ObserveElement ****************/


/************ begin Rule CalendarElement ****************
 *
 * // TODO  document precise semantics (and how is it different from a Binding e.g.)
 * CalendarElement:
 * 	"calendar" "(" date=Expression (("onSelect" "=" onSelect=Expression)? & ("allowFrom" "=" allowFrom=Expression)? &
 * 	("dateFormat" "=" dateFormat=STRING)? & ("cssForDays" "=" "(" "days" "=" days=Expression "," "class" "="
 * 	cssClass=STRING ")")?) ")";
 *
 **/

// "calendar" "(" date=Expression (("onSelect" "=" onSelect=Expression)? & ("allowFrom" "=" allowFrom=Expression)? &
// ("dateFormat" "=" dateFormat=STRING)? & ("cssForDays" "=" "(" "days" "=" days=Expression "," "class" "="
// cssClass=STRING ")")?) ")"
protected class CalendarElement_Group extends GroupToken {
	
	public CalendarElement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCalendarElementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CalendarElement_RightParenthesisKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCalendarElementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "calendar"
protected class CalendarElement_CalendarKeyword_0 extends KeywordToken  {
	
	public CalendarElement_CalendarKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCalendarElementAccess().getCalendarKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "("
protected class CalendarElement_LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public CalendarElement_LeftParenthesisKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCalendarElementAccess().getLeftParenthesisKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CalendarElement_CalendarKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// date=Expression
protected class CalendarElement_DateAssignment_2 extends AssignmentToken  {
	
	public CalendarElement_DateAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCalendarElementAccess().getDateAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_TernaryExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("date",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("date");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getCalendarElementAccess().getDateExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CalendarElement_LeftParenthesisKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("onSelect" "=" onSelect=Expression)? & ("allowFrom" "=" allowFrom=Expression)? & ("dateFormat" "=" dateFormat=STRING)?
// & ("cssForDays" "=" "(" "days" "=" days=Expression "," "class" "=" cssClass=STRING ")")?
protected class CalendarElement_UnorderedGroup_3 extends UnorderedGroupToken {
	
	public CalendarElement_UnorderedGroup_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public UnorderedGroup getGrammarElement() {
		return grammarAccess.getCalendarElementAccess().getUnorderedGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CalendarElement_Group_3_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new CalendarElement_Group_3_2(lastRuleCallOrigin, this, 1, inst);
			case 2: return new CalendarElement_Group_3_1(lastRuleCallOrigin, this, 2, inst);
			case 3: return new CalendarElement_Group_3_0(lastRuleCallOrigin, this, 3, inst);
			case 4: return new CalendarElement_DateAssignment_2(lastRuleCallOrigin, this, 4, inst);
			default: return null;
		}	
	}

}

// ("onSelect" "=" onSelect=Expression)?
protected class CalendarElement_Group_3_0 extends GroupToken {
	
	public CalendarElement_Group_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCalendarElementAccess().getGroup_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CalendarElement_OnSelectAssignment_3_0_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "onSelect"
protected class CalendarElement_OnSelectKeyword_3_0_0 extends KeywordToken  {
	
	public CalendarElement_OnSelectKeyword_3_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCalendarElementAccess().getOnSelectKeyword_3_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CalendarElement_DateAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "="
protected class CalendarElement_EqualsSignKeyword_3_0_1 extends KeywordToken  {
	
	public CalendarElement_EqualsSignKeyword_3_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCalendarElementAccess().getEqualsSignKeyword_3_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CalendarElement_OnSelectKeyword_3_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// onSelect=Expression
protected class CalendarElement_OnSelectAssignment_3_0_2 extends AssignmentToken  {
	
	public CalendarElement_OnSelectAssignment_3_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCalendarElementAccess().getOnSelectAssignment_3_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_TernaryExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("onSelect",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("onSelect");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getCalendarElementAccess().getOnSelectExpressionParserRuleCall_3_0_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CalendarElement_EqualsSignKeyword_3_0_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ("allowFrom" "=" allowFrom=Expression)?
protected class CalendarElement_Group_3_1 extends GroupToken {
	
	public CalendarElement_Group_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCalendarElementAccess().getGroup_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CalendarElement_AllowFromAssignment_3_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "allowFrom"
protected class CalendarElement_AllowFromKeyword_3_1_0 extends KeywordToken  {
	
	public CalendarElement_AllowFromKeyword_3_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCalendarElementAccess().getAllowFromKeyword_3_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CalendarElement_Group_3_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new CalendarElement_DateAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// "="
protected class CalendarElement_EqualsSignKeyword_3_1_1 extends KeywordToken  {
	
	public CalendarElement_EqualsSignKeyword_3_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCalendarElementAccess().getEqualsSignKeyword_3_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CalendarElement_AllowFromKeyword_3_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// allowFrom=Expression
protected class CalendarElement_AllowFromAssignment_3_1_2 extends AssignmentToken  {
	
	public CalendarElement_AllowFromAssignment_3_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCalendarElementAccess().getAllowFromAssignment_3_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_TernaryExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("allowFrom",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("allowFrom");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getCalendarElementAccess().getAllowFromExpressionParserRuleCall_3_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CalendarElement_EqualsSignKeyword_3_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ("dateFormat" "=" dateFormat=STRING)?
protected class CalendarElement_Group_3_2 extends GroupToken {
	
	public CalendarElement_Group_3_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCalendarElementAccess().getGroup_3_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CalendarElement_DateFormatAssignment_3_2_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "dateFormat"
protected class CalendarElement_DateFormatKeyword_3_2_0 extends KeywordToken  {
	
	public CalendarElement_DateFormatKeyword_3_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCalendarElementAccess().getDateFormatKeyword_3_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CalendarElement_Group_3_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new CalendarElement_Group_3_0(lastRuleCallOrigin, this, 1, inst);
			case 2: return new CalendarElement_DateAssignment_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}

// "="
protected class CalendarElement_EqualsSignKeyword_3_2_1 extends KeywordToken  {
	
	public CalendarElement_EqualsSignKeyword_3_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCalendarElementAccess().getEqualsSignKeyword_3_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CalendarElement_DateFormatKeyword_3_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// dateFormat=STRING
protected class CalendarElement_DateFormatAssignment_3_2_2 extends AssignmentToken  {
	
	public CalendarElement_DateFormatAssignment_3_2_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCalendarElementAccess().getDateFormatAssignment_3_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CalendarElement_EqualsSignKeyword_3_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("dateFormat",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("dateFormat");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getCalendarElementAccess().getDateFormatSTRINGTerminalRuleCall_3_2_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getCalendarElementAccess().getDateFormatSTRINGTerminalRuleCall_3_2_2_0();
			return obj;
		}
		return null;
	}

}


// ("cssForDays" "=" "(" "days" "=" days=Expression "," "class" "=" cssClass=STRING ")")?
protected class CalendarElement_Group_3_3 extends GroupToken {
	
	public CalendarElement_Group_3_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCalendarElementAccess().getGroup_3_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CalendarElement_RightParenthesisKeyword_3_3_10(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "cssForDays"
protected class CalendarElement_CssForDaysKeyword_3_3_0 extends KeywordToken  {
	
	public CalendarElement_CssForDaysKeyword_3_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCalendarElementAccess().getCssForDaysKeyword_3_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CalendarElement_Group_3_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new CalendarElement_Group_3_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new CalendarElement_Group_3_0(lastRuleCallOrigin, this, 2, inst);
			case 3: return new CalendarElement_DateAssignment_2(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

}

// "="
protected class CalendarElement_EqualsSignKeyword_3_3_1 extends KeywordToken  {
	
	public CalendarElement_EqualsSignKeyword_3_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCalendarElementAccess().getEqualsSignKeyword_3_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CalendarElement_CssForDaysKeyword_3_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "("
protected class CalendarElement_LeftParenthesisKeyword_3_3_2 extends KeywordToken  {
	
	public CalendarElement_LeftParenthesisKeyword_3_3_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCalendarElementAccess().getLeftParenthesisKeyword_3_3_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CalendarElement_EqualsSignKeyword_3_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "days"
protected class CalendarElement_DaysKeyword_3_3_3 extends KeywordToken  {
	
	public CalendarElement_DaysKeyword_3_3_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCalendarElementAccess().getDaysKeyword_3_3_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CalendarElement_LeftParenthesisKeyword_3_3_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "="
protected class CalendarElement_EqualsSignKeyword_3_3_4 extends KeywordToken  {
	
	public CalendarElement_EqualsSignKeyword_3_3_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCalendarElementAccess().getEqualsSignKeyword_3_3_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CalendarElement_DaysKeyword_3_3_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// days=Expression
protected class CalendarElement_DaysAssignment_3_3_5 extends AssignmentToken  {
	
	public CalendarElement_DaysAssignment_3_3_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCalendarElementAccess().getDaysAssignment_3_3_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_TernaryExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("days",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("days");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getCalendarElementAccess().getDaysExpressionParserRuleCall_3_3_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CalendarElement_EqualsSignKeyword_3_3_4(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ","
protected class CalendarElement_CommaKeyword_3_3_6 extends KeywordToken  {
	
	public CalendarElement_CommaKeyword_3_3_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCalendarElementAccess().getCommaKeyword_3_3_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CalendarElement_DaysAssignment_3_3_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "class"
protected class CalendarElement_ClassKeyword_3_3_7 extends KeywordToken  {
	
	public CalendarElement_ClassKeyword_3_3_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCalendarElementAccess().getClassKeyword_3_3_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CalendarElement_CommaKeyword_3_3_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "="
protected class CalendarElement_EqualsSignKeyword_3_3_8 extends KeywordToken  {
	
	public CalendarElement_EqualsSignKeyword_3_3_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCalendarElementAccess().getEqualsSignKeyword_3_3_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CalendarElement_ClassKeyword_3_3_7(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// cssClass=STRING
protected class CalendarElement_CssClassAssignment_3_3_9 extends AssignmentToken  {
	
	public CalendarElement_CssClassAssignment_3_3_9(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCalendarElementAccess().getCssClassAssignment_3_3_9();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CalendarElement_EqualsSignKeyword_3_3_8(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("cssClass",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("cssClass");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getCalendarElementAccess().getCssClassSTRINGTerminalRuleCall_3_3_9_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getCalendarElementAccess().getCssClassSTRINGTerminalRuleCall_3_3_9_0();
			return obj;
		}
		return null;
	}

}

// ")"
protected class CalendarElement_RightParenthesisKeyword_3_3_10 extends KeywordToken  {
	
	public CalendarElement_RightParenthesisKeyword_3_3_10(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCalendarElementAccess().getRightParenthesisKeyword_3_3_10();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CalendarElement_CssClassAssignment_3_3_9(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



// ")"
protected class CalendarElement_RightParenthesisKeyword_4 extends KeywordToken  {
	
	public CalendarElement_RightParenthesisKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCalendarElementAccess().getRightParenthesisKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CalendarElement_UnorderedGroup_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule CalendarElement ****************/


/************ begin Rule TimeSlotListElement ****************
 *
 * / *
 * 	 * validation:
 * 	 * 		1-  onSelect.type == CallbackExpression		[√]
 * 	 * 		2-	allowFrom.type.dateTyped				[√]
 * 	 * 		3-	date.type.dateTyped						[ ]
 * 	 * 		4-  date.lhs???		TODO
 * 	 * 		5-	days.type.listTyped						[ ]
 * 	 * 		6-	days.type.listItemType.dateTyped		[ ]
 * 	 * / TimeSlotListElement:
 * 	"timeSlotList" "(" slots=Expression (("onSelect" "=" onSelect=Expression)? & ("onDelete" "=" onDelete=Expression)?)
 * 	")";
 *
 **/

// "timeSlotList" "(" slots=Expression (("onSelect" "=" onSelect=Expression)? & ("onDelete" "=" onDelete=Expression)?) ")"
protected class TimeSlotListElement_Group extends GroupToken {
	
	public TimeSlotListElement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTimeSlotListElementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TimeSlotListElement_RightParenthesisKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTimeSlotListElementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "timeSlotList"
protected class TimeSlotListElement_TimeSlotListKeyword_0 extends KeywordToken  {
	
	public TimeSlotListElement_TimeSlotListKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTimeSlotListElementAccess().getTimeSlotListKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "("
protected class TimeSlotListElement_LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public TimeSlotListElement_LeftParenthesisKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTimeSlotListElementAccess().getLeftParenthesisKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TimeSlotListElement_TimeSlotListKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// slots=Expression
protected class TimeSlotListElement_SlotsAssignment_2 extends AssignmentToken  {
	
	public TimeSlotListElement_SlotsAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTimeSlotListElementAccess().getSlotsAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_TernaryExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("slots",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("slots");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTimeSlotListElementAccess().getSlotsExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TimeSlotListElement_LeftParenthesisKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("onSelect" "=" onSelect=Expression)? & ("onDelete" "=" onDelete=Expression)?
protected class TimeSlotListElement_UnorderedGroup_3 extends UnorderedGroupToken {
	
	public TimeSlotListElement_UnorderedGroup_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public UnorderedGroup getGrammarElement() {
		return grammarAccess.getTimeSlotListElementAccess().getUnorderedGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TimeSlotListElement_Group_3_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TimeSlotListElement_Group_3_0(lastRuleCallOrigin, this, 1, inst);
			case 2: return new TimeSlotListElement_SlotsAssignment_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}

// ("onSelect" "=" onSelect=Expression)?
protected class TimeSlotListElement_Group_3_0 extends GroupToken {
	
	public TimeSlotListElement_Group_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTimeSlotListElementAccess().getGroup_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TimeSlotListElement_OnSelectAssignment_3_0_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "onSelect"
protected class TimeSlotListElement_OnSelectKeyword_3_0_0 extends KeywordToken  {
	
	public TimeSlotListElement_OnSelectKeyword_3_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTimeSlotListElementAccess().getOnSelectKeyword_3_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TimeSlotListElement_SlotsAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "="
protected class TimeSlotListElement_EqualsSignKeyword_3_0_1 extends KeywordToken  {
	
	public TimeSlotListElement_EqualsSignKeyword_3_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTimeSlotListElementAccess().getEqualsSignKeyword_3_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TimeSlotListElement_OnSelectKeyword_3_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// onSelect=Expression
protected class TimeSlotListElement_OnSelectAssignment_3_0_2 extends AssignmentToken  {
	
	public TimeSlotListElement_OnSelectAssignment_3_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTimeSlotListElementAccess().getOnSelectAssignment_3_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_TernaryExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("onSelect",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("onSelect");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTimeSlotListElementAccess().getOnSelectExpressionParserRuleCall_3_0_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TimeSlotListElement_EqualsSignKeyword_3_0_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ("onDelete" "=" onDelete=Expression)?
protected class TimeSlotListElement_Group_3_1 extends GroupToken {
	
	public TimeSlotListElement_Group_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTimeSlotListElementAccess().getGroup_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TimeSlotListElement_OnDeleteAssignment_3_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "onDelete"
protected class TimeSlotListElement_OnDeleteKeyword_3_1_0 extends KeywordToken  {
	
	public TimeSlotListElement_OnDeleteKeyword_3_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTimeSlotListElementAccess().getOnDeleteKeyword_3_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TimeSlotListElement_Group_3_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TimeSlotListElement_SlotsAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// "="
protected class TimeSlotListElement_EqualsSignKeyword_3_1_1 extends KeywordToken  {
	
	public TimeSlotListElement_EqualsSignKeyword_3_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTimeSlotListElementAccess().getEqualsSignKeyword_3_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TimeSlotListElement_OnDeleteKeyword_3_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// onDelete=Expression
protected class TimeSlotListElement_OnDeleteAssignment_3_1_2 extends AssignmentToken  {
	
	public TimeSlotListElement_OnDeleteAssignment_3_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTimeSlotListElementAccess().getOnDeleteAssignment_3_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_TernaryExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("onDelete",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("onDelete");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTimeSlotListElementAccess().getOnDeleteExpressionParserRuleCall_3_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TimeSlotListElement_EqualsSignKeyword_3_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// ")"
protected class TimeSlotListElement_RightParenthesisKeyword_4 extends KeywordToken  {
	
	public TimeSlotListElement_RightParenthesisKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTimeSlotListElementAccess().getRightParenthesisKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TimeSlotListElement_UnorderedGroup_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule TimeSlotListElement ****************/


/************ begin Rule SlotAddElement ****************
 *
 * / * validation:
 * 	 * 		1-	slots.type = [Slot]						[ ]
 * 	 * / SlotAddElement:
 * 	"slotAddList" "(" product=Expression day=Expression slots=Expression ("{" startHour=Expression "to" endHour=Expression
 * 	"}")? ")";
 *
 **/

// "slotAddList" "(" product=Expression day=Expression slots=Expression ("{" startHour=Expression "to" endHour=Expression
// "}")? ")"
protected class SlotAddElement_Group extends GroupToken {
	
	public SlotAddElement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSlotAddElementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SlotAddElement_RightParenthesisKeyword_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSlotAddElementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "slotAddList"
protected class SlotAddElement_SlotAddListKeyword_0 extends KeywordToken  {
	
	public SlotAddElement_SlotAddListKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSlotAddElementAccess().getSlotAddListKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "("
protected class SlotAddElement_LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public SlotAddElement_LeftParenthesisKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSlotAddElementAccess().getLeftParenthesisKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SlotAddElement_SlotAddListKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// product=Expression
protected class SlotAddElement_ProductAssignment_2 extends AssignmentToken  {
	
	public SlotAddElement_ProductAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSlotAddElementAccess().getProductAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_TernaryExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("product",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("product");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSlotAddElementAccess().getProductExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SlotAddElement_LeftParenthesisKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// day=Expression
protected class SlotAddElement_DayAssignment_3 extends AssignmentToken  {
	
	public SlotAddElement_DayAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSlotAddElementAccess().getDayAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_TernaryExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("day",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("day");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSlotAddElementAccess().getDayExpressionParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SlotAddElement_ProductAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// slots=Expression
protected class SlotAddElement_SlotsAssignment_4 extends AssignmentToken  {
	
	public SlotAddElement_SlotsAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSlotAddElementAccess().getSlotsAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_TernaryExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("slots",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("slots");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSlotAddElementAccess().getSlotsExpressionParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SlotAddElement_DayAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("{" startHour=Expression "to" endHour=Expression "}")?
protected class SlotAddElement_Group_5 extends GroupToken {
	
	public SlotAddElement_Group_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSlotAddElementAccess().getGroup_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SlotAddElement_RightCurlyBracketKeyword_5_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "{"
protected class SlotAddElement_LeftCurlyBracketKeyword_5_0 extends KeywordToken  {
	
	public SlotAddElement_LeftCurlyBracketKeyword_5_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSlotAddElementAccess().getLeftCurlyBracketKeyword_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SlotAddElement_SlotsAssignment_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// startHour=Expression
protected class SlotAddElement_StartHourAssignment_5_1 extends AssignmentToken  {
	
	public SlotAddElement_StartHourAssignment_5_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSlotAddElementAccess().getStartHourAssignment_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_TernaryExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("startHour",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("startHour");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSlotAddElementAccess().getStartHourExpressionParserRuleCall_5_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SlotAddElement_LeftCurlyBracketKeyword_5_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "to"
protected class SlotAddElement_ToKeyword_5_2 extends KeywordToken  {
	
	public SlotAddElement_ToKeyword_5_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSlotAddElementAccess().getToKeyword_5_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SlotAddElement_StartHourAssignment_5_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// endHour=Expression
protected class SlotAddElement_EndHourAssignment_5_3 extends AssignmentToken  {
	
	public SlotAddElement_EndHourAssignment_5_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSlotAddElementAccess().getEndHourAssignment_5_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_TernaryExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("endHour",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("endHour");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSlotAddElementAccess().getEndHourExpressionParserRuleCall_5_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SlotAddElement_ToKeyword_5_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class SlotAddElement_RightCurlyBracketKeyword_5_4 extends KeywordToken  {
	
	public SlotAddElement_RightCurlyBracketKeyword_5_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSlotAddElementAccess().getRightCurlyBracketKeyword_5_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SlotAddElement_EndHourAssignment_5_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// ")"
protected class SlotAddElement_RightParenthesisKeyword_6 extends KeywordToken  {
	
	public SlotAddElement_RightParenthesisKeyword_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSlotAddElementAccess().getRightParenthesisKeyword_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SlotAddElement_Group_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SlotAddElement_SlotsAssignment_4(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule SlotAddElement ****************/


/************ begin Rule WhenElement ****************
 *
 * WhenElement:
 * 	"when" "(" condition=Expression ")" body=ElementBody;
 *
 **/

// "when" "(" condition=Expression ")" body=ElementBody
protected class WhenElement_Group extends GroupToken {
	
	public WhenElement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getWhenElementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WhenElement_BodyAssignment_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWhenElementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "when"
protected class WhenElement_WhenKeyword_0 extends KeywordToken  {
	
	public WhenElement_WhenKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getWhenElementAccess().getWhenKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "("
protected class WhenElement_LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public WhenElement_LeftParenthesisKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getWhenElementAccess().getLeftParenthesisKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WhenElement_WhenKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// condition=Expression
protected class WhenElement_ConditionAssignment_2 extends AssignmentToken  {
	
	public WhenElement_ConditionAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWhenElementAccess().getConditionAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_TernaryExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("condition",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("condition");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getWhenElementAccess().getConditionExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new WhenElement_LeftParenthesisKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class WhenElement_RightParenthesisKeyword_3 extends KeywordToken  {
	
	public WhenElement_RightParenthesisKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getWhenElementAccess().getRightParenthesisKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WhenElement_ConditionAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// body=ElementBody
protected class WhenElement_BodyAssignment_4 extends AssignmentToken  {
	
	public WhenElement_BodyAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWhenElementAccess().getBodyAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ElementBody_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("body",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("body");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getElementBodyRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getWhenElementAccess().getBodyElementBodyParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new WhenElement_RightParenthesisKeyword_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule WhenElement ****************/


/************ begin Rule ImageElement ****************
 *
 * // validation: condition.type.booleanTyped			[√]
 * ImageElement:
 * 	"image" "(" (observed?="observe"? sourceUrl=Expression & ("width" "=" width=Expression)? & ("height" "="
 * 	height=Expression)?) ")";
 *
 **/

// "image" "(" (observed?="observe"? sourceUrl=Expression & ("width" "=" width=Expression)? & ("height" "="
// height=Expression)?) ")"
protected class ImageElement_Group extends GroupToken {
	
	public ImageElement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getImageElementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ImageElement_RightParenthesisKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getImageElementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "image"
protected class ImageElement_ImageKeyword_0 extends KeywordToken  {
	
	public ImageElement_ImageKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getImageElementAccess().getImageKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "("
protected class ImageElement_LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public ImageElement_LeftParenthesisKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getImageElementAccess().getLeftParenthesisKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ImageElement_ImageKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// observed?="observe"? sourceUrl=Expression & ("width" "=" width=Expression)? & ("height" "=" height=Expression)?
protected class ImageElement_UnorderedGroup_2 extends UnorderedGroupToken {
	
	public ImageElement_UnorderedGroup_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public UnorderedGroup getGrammarElement() {
		return grammarAccess.getImageElementAccess().getUnorderedGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ImageElement_Group_2_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ImageElement_Group_2_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new ImageElement_Group_2_0(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}

// observed?="observe"? sourceUrl=Expression
protected class ImageElement_Group_2_0 extends GroupToken {
	
	public ImageElement_Group_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getImageElementAccess().getGroup_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ImageElement_SourceUrlAssignment_2_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// observed?="observe"?
protected class ImageElement_ObservedAssignment_2_0_0 extends AssignmentToken  {
	
	public ImageElement_ObservedAssignment_2_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getImageElementAccess().getObservedAssignment_2_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ImageElement_LeftParenthesisKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("observed",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("observed");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getImageElementAccess().getObservedObserveKeyword_2_0_0_0();
			return obj;
		}
		return null;
	}

}

// sourceUrl=Expression
protected class ImageElement_SourceUrlAssignment_2_0_1 extends AssignmentToken  {
	
	public ImageElement_SourceUrlAssignment_2_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getImageElementAccess().getSourceUrlAssignment_2_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_TernaryExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("sourceUrl",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("sourceUrl");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getImageElementAccess().getSourceUrlExpressionParserRuleCall_2_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ImageElement_ObservedAssignment_2_0_0(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ImageElement_LeftParenthesisKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ("width" "=" width=Expression)?
protected class ImageElement_Group_2_1 extends GroupToken {
	
	public ImageElement_Group_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getImageElementAccess().getGroup_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ImageElement_WidthAssignment_2_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "width"
protected class ImageElement_WidthKeyword_2_1_0 extends KeywordToken  {
	
	public ImageElement_WidthKeyword_2_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getImageElementAccess().getWidthKeyword_2_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ImageElement_Group_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "="
protected class ImageElement_EqualsSignKeyword_2_1_1 extends KeywordToken  {
	
	public ImageElement_EqualsSignKeyword_2_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getImageElementAccess().getEqualsSignKeyword_2_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ImageElement_WidthKeyword_2_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// width=Expression
protected class ImageElement_WidthAssignment_2_1_2 extends AssignmentToken  {
	
	public ImageElement_WidthAssignment_2_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getImageElementAccess().getWidthAssignment_2_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_TernaryExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("width",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("width");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getImageElementAccess().getWidthExpressionParserRuleCall_2_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ImageElement_EqualsSignKeyword_2_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ("height" "=" height=Expression)?
protected class ImageElement_Group_2_2 extends GroupToken {
	
	public ImageElement_Group_2_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getImageElementAccess().getGroup_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ImageElement_HeightAssignment_2_2_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "height"
protected class ImageElement_HeightKeyword_2_2_0 extends KeywordToken  {
	
	public ImageElement_HeightKeyword_2_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getImageElementAccess().getHeightKeyword_2_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ImageElement_Group_2_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ImageElement_Group_2_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// "="
protected class ImageElement_EqualsSignKeyword_2_2_1 extends KeywordToken  {
	
	public ImageElement_EqualsSignKeyword_2_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getImageElementAccess().getEqualsSignKeyword_2_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ImageElement_HeightKeyword_2_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// height=Expression
protected class ImageElement_HeightAssignment_2_2_2 extends AssignmentToken  {
	
	public ImageElement_HeightAssignment_2_2_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getImageElementAccess().getHeightAssignment_2_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_TernaryExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("height",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("height");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getImageElementAccess().getHeightExpressionParserRuleCall_2_2_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ImageElement_EqualsSignKeyword_2_2_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// ")"
protected class ImageElement_RightParenthesisKeyword_3 extends KeywordToken  {
	
	public ImageElement_RightParenthesisKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getImageElementAccess().getRightParenthesisKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ImageElement_UnorderedGroup_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule ImageElement ****************/


/************ begin Rule FrameElement ****************
 *
 * / * 
 * 	 * validation: source.type.stringTyped				[√]
 * 	 * width and height should be Integer typed.		[ ]
 * 	 * / // (not called 'IFrameElement' because of possible confusion with an interface)
 * FrameElement:
 * 	"iframe" "(" sourceUrl=Expression (("width" "=" width=Expression)? & ("height" "=" height=Expression)?) ")";
 *
 **/

// "iframe" "(" sourceUrl=Expression (("width" "=" width=Expression)? & ("height" "=" height=Expression)?) ")"
protected class FrameElement_Group extends GroupToken {
	
	public FrameElement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFrameElementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FrameElement_RightParenthesisKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFrameElementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "iframe"
protected class FrameElement_IframeKeyword_0 extends KeywordToken  {
	
	public FrameElement_IframeKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFrameElementAccess().getIframeKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "("
protected class FrameElement_LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public FrameElement_LeftParenthesisKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFrameElementAccess().getLeftParenthesisKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FrameElement_IframeKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// sourceUrl=Expression
protected class FrameElement_SourceUrlAssignment_2 extends AssignmentToken  {
	
	public FrameElement_SourceUrlAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFrameElementAccess().getSourceUrlAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_TernaryExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("sourceUrl",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("sourceUrl");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFrameElementAccess().getSourceUrlExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FrameElement_LeftParenthesisKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("width" "=" width=Expression)? & ("height" "=" height=Expression)?
protected class FrameElement_UnorderedGroup_3 extends UnorderedGroupToken {
	
	public FrameElement_UnorderedGroup_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public UnorderedGroup getGrammarElement() {
		return grammarAccess.getFrameElementAccess().getUnorderedGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FrameElement_Group_3_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new FrameElement_Group_3_0(lastRuleCallOrigin, this, 1, inst);
			case 2: return new FrameElement_SourceUrlAssignment_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}

// ("width" "=" width=Expression)?
protected class FrameElement_Group_3_0 extends GroupToken {
	
	public FrameElement_Group_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFrameElementAccess().getGroup_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FrameElement_WidthAssignment_3_0_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "width"
protected class FrameElement_WidthKeyword_3_0_0 extends KeywordToken  {
	
	public FrameElement_WidthKeyword_3_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFrameElementAccess().getWidthKeyword_3_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FrameElement_SourceUrlAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "="
protected class FrameElement_EqualsSignKeyword_3_0_1 extends KeywordToken  {
	
	public FrameElement_EqualsSignKeyword_3_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFrameElementAccess().getEqualsSignKeyword_3_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FrameElement_WidthKeyword_3_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// width=Expression
protected class FrameElement_WidthAssignment_3_0_2 extends AssignmentToken  {
	
	public FrameElement_WidthAssignment_3_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFrameElementAccess().getWidthAssignment_3_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_TernaryExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("width",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("width");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFrameElementAccess().getWidthExpressionParserRuleCall_3_0_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FrameElement_EqualsSignKeyword_3_0_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ("height" "=" height=Expression)?
protected class FrameElement_Group_3_1 extends GroupToken {
	
	public FrameElement_Group_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFrameElementAccess().getGroup_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FrameElement_HeightAssignment_3_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "height"
protected class FrameElement_HeightKeyword_3_1_0 extends KeywordToken  {
	
	public FrameElement_HeightKeyword_3_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFrameElementAccess().getHeightKeyword_3_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FrameElement_Group_3_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new FrameElement_SourceUrlAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// "="
protected class FrameElement_EqualsSignKeyword_3_1_1 extends KeywordToken  {
	
	public FrameElement_EqualsSignKeyword_3_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFrameElementAccess().getEqualsSignKeyword_3_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FrameElement_HeightKeyword_3_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// height=Expression
protected class FrameElement_HeightAssignment_3_1_2 extends AssignmentToken  {
	
	public FrameElement_HeightAssignment_3_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFrameElementAccess().getHeightAssignment_3_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_TernaryExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("height",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("height");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFrameElementAccess().getHeightExpressionParserRuleCall_3_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FrameElement_EqualsSignKeyword_3_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// ")"
protected class FrameElement_RightParenthesisKeyword_4 extends KeywordToken  {
	
	public FrameElement_RightParenthesisKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFrameElementAccess().getRightParenthesisKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FrameElement_UnorderedGroup_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule FrameElement ****************/


/************ begin Rule LineBreakElement ****************
 *
 * / *
 * 	 * validation:
 * 	 * 		1-  sourceUrl.type.stringTyped				[√]
 * 	 * 		2-	{width, height}.type.integerTyped		[√]
 * 	 * / // TODO  make source URL observable?
 * LineBreakElement:
 * 	{LineBreakElement} "line-break";
 *
 **/

// {LineBreakElement} "line-break"
protected class LineBreakElement_Group extends GroupToken {
	
	public LineBreakElement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLineBreakElementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LineBreakElement_LineBreakKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLineBreakElementAccess().getLineBreakElementAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {LineBreakElement}
protected class LineBreakElement_LineBreakElementAction_0 extends ActionToken  {

	public LineBreakElement_LineBreakElementAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getLineBreakElementAccess().getLineBreakElementAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "line-break"
protected class LineBreakElement_LineBreakKeyword_1 extends KeywordToken  {
	
	public LineBreakElement_LineBreakKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLineBreakElementAccess().getLineBreakKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LineBreakElement_LineBreakElementAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule LineBreakElement ****************/


/************ begin Rule StatementBlock ****************
 *
 * / *
 *  * +------------+
 *  * | statements |
 *  * +------------+
 *  * / StatementBlock:
 * 	{StatementBlock} "{" statements+=Statement* "}";
 *
 **/

// {StatementBlock} "{" statements+=Statement* "}"
protected class StatementBlock_Group extends GroupToken {
	
	public StatementBlock_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStatementBlockAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StatementBlock_RightCurlyBracketKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStatementBlockAccess().getStatementBlockAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {StatementBlock}
protected class StatementBlock_StatementBlockAction_0 extends ActionToken  {

	public StatementBlock_StatementBlockAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getStatementBlockAccess().getStatementBlockAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "{"
protected class StatementBlock_LeftCurlyBracketKeyword_1 extends KeywordToken  {
	
	public StatementBlock_LeftCurlyBracketKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStatementBlockAccess().getLeftCurlyBracketKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StatementBlock_StatementBlockAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// statements+=Statement*
protected class StatementBlock_StatementsAssignment_2 extends AssignmentToken  {
	
	public StatementBlock_StatementsAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStatementBlockAccess().getStatementsAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("statements",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("statements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStatementBlockAccess().getStatementsStatementParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new StatementBlock_StatementsAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new StatementBlock_LeftCurlyBracketKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class StatementBlock_RightCurlyBracketKeyword_3 extends KeywordToken  {
	
	public StatementBlock_RightCurlyBracketKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStatementBlockAccess().getRightCurlyBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StatementBlock_StatementsAssignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new StatementBlock_LeftCurlyBracketKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule StatementBlock ****************/


/************ begin Rule Statement ****************
 *
 * / *
 * 	 * validation:	warning if #statements == 0			[√]
 * 	 * 
 * 	 * A StatementBlock is contained by the following features:
 * 	 * 		MethodDefinition.statementBlock
 * 	 * 		CallbackExpression.statementBlock
 * 	 * 		IfStatement.thenBlock
 * 	 * 		IfStatement.elseBlock
 * 	 * / // (synthetic type)
 * Statement:
 * 	NonExitingStatement | ExitingStatement;
 *
 **/

// NonExitingStatement | ExitingStatement
protected class Statement_Alternatives extends AlternativesToken {

	public Statement_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getStatementAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_NonExitingStatementParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Statement_ExitingStatementParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAssignmentOrExpressionStatementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExitModalStatementAccess().getExitModalStatementAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getForStatementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getGotoModuleStatementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getGotoScreenStatementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIfStatementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListRemoveStatementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLocalValueDeclarationStatementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getShowModalStatementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// NonExitingStatement
protected class Statement_NonExitingStatementParserRuleCall_0 extends RuleCallToken {
	
	public Statement_NonExitingStatementParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getNonExitingStatementParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NonExitingStatement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAssignmentOrExpressionStatementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExitModalStatementAccess().getExitModalStatementAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getForStatementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIfStatementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListRemoveStatementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLocalValueDeclarationStatementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getShowModalStatementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(NonExitingStatement_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ExitingStatement
protected class Statement_ExitingStatementParserRuleCall_1 extends RuleCallToken {
	
	public Statement_ExitingStatementParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getExitingStatementParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExitingStatement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getGotoModuleStatementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getGotoScreenStatementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ExitingStatement_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Statement ****************/


/************ begin Rule ExitingStatement ****************
 *
 * // A Statement is always contained in a StatementBlock.
 * ExitingStatement:
 * 	GotoScreenStatement | GotoModuleStatement;
 *
 **/

// GotoScreenStatement | GotoModuleStatement
protected class ExitingStatement_Alternatives extends AlternativesToken {

	public ExitingStatement_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getExitingStatementAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExitingStatement_GotoScreenStatementParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ExitingStatement_GotoModuleStatementParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getGotoModuleStatementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getGotoScreenStatementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// GotoScreenStatement
protected class ExitingStatement_GotoScreenStatementParserRuleCall_0 extends RuleCallToken {
	
	public ExitingStatement_GotoScreenStatementParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExitingStatementAccess().getGotoScreenStatementParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GotoScreenStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getGotoScreenStatementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(GotoScreenStatement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// GotoModuleStatement
protected class ExitingStatement_GotoModuleStatementParserRuleCall_1 extends RuleCallToken {
	
	public ExitingStatement_GotoModuleStatementParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExitingStatementAccess().getGotoModuleStatementParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GotoModuleStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getGotoModuleStatementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(GotoModuleStatement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule ExitingStatement ****************/


/************ begin Rule NonExitingStatement ****************
 *
 * NonExitingStatement:
 * 	AssignmentOrExpressionStatement | ShowModalStatement | ExitModalStatement | IfStatement |
 * 	LocalValueDeclarationStatement | ListRemoveStatement | ForStatement;
 *
 **/

// AssignmentOrExpressionStatement | ShowModalStatement | ExitModalStatement | IfStatement | LocalValueDeclarationStatement
// | ListRemoveStatement | ForStatement
protected class NonExitingStatement_Alternatives extends AlternativesToken {

	public NonExitingStatement_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getNonExitingStatementAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NonExitingStatement_AssignmentOrExpressionStatementParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new NonExitingStatement_ShowModalStatementParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new NonExitingStatement_ExitModalStatementParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new NonExitingStatement_IfStatementParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new NonExitingStatement_LocalValueDeclarationStatementParserRuleCall_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new NonExitingStatement_ListRemoveStatementParserRuleCall_5(lastRuleCallOrigin, this, 5, inst);
			case 6: return new NonExitingStatement_ForStatementParserRuleCall_6(lastRuleCallOrigin, this, 6, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAssignmentOrExpressionStatementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExitModalStatementAccess().getExitModalStatementAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getForStatementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIfStatementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListRemoveStatementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLocalValueDeclarationStatementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getShowModalStatementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// AssignmentOrExpressionStatement
protected class NonExitingStatement_AssignmentOrExpressionStatementParserRuleCall_0 extends RuleCallToken {
	
	public NonExitingStatement_AssignmentOrExpressionStatementParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getNonExitingStatementAccess().getAssignmentOrExpressionStatementParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AssignmentOrExpressionStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAssignmentOrExpressionStatementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(AssignmentOrExpressionStatement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ShowModalStatement
protected class NonExitingStatement_ShowModalStatementParserRuleCall_1 extends RuleCallToken {
	
	public NonExitingStatement_ShowModalStatementParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getNonExitingStatementAccess().getShowModalStatementParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ShowModalStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getShowModalStatementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ShowModalStatement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ExitModalStatement
protected class NonExitingStatement_ExitModalStatementParserRuleCall_2 extends RuleCallToken {
	
	public NonExitingStatement_ExitModalStatementParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getNonExitingStatementAccess().getExitModalStatementParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExitModalStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExitModalStatementAccess().getExitModalStatementAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(ExitModalStatement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// IfStatement
protected class NonExitingStatement_IfStatementParserRuleCall_3 extends RuleCallToken {
	
	public NonExitingStatement_IfStatementParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getNonExitingStatementAccess().getIfStatementParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IfStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getIfStatementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(IfStatement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// LocalValueDeclarationStatement
protected class NonExitingStatement_LocalValueDeclarationStatementParserRuleCall_4 extends RuleCallToken {
	
	public NonExitingStatement_LocalValueDeclarationStatementParserRuleCall_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getNonExitingStatementAccess().getLocalValueDeclarationStatementParserRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LocalValueDeclarationStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLocalValueDeclarationStatementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(LocalValueDeclarationStatement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ListRemoveStatement
protected class NonExitingStatement_ListRemoveStatementParserRuleCall_5 extends RuleCallToken {
	
	public NonExitingStatement_ListRemoveStatementParserRuleCall_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getNonExitingStatementAccess().getListRemoveStatementParserRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListRemoveStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getListRemoveStatementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ListRemoveStatement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ForStatement
protected class NonExitingStatement_ForStatementParserRuleCall_6 extends RuleCallToken {
	
	public NonExitingStatement_ForStatementParserRuleCall_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getNonExitingStatementAccess().getForStatementParserRuleCall_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ForStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getForStatementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ForStatement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule NonExitingStatement ****************/


/************ begin Rule ForStatement ****************
 *
 * ForStatement:
 * 	"for" "(" "(" indexVariable=ListVariable "->" valueVariable=ListVariable ")" "in" listExpression=Expression ")"
 * 	thenBlock=StatementBlock;
 *
 **/

// "for" "(" "(" indexVariable=ListVariable "->" valueVariable=ListVariable ")" "in" listExpression=Expression ")"
// thenBlock=StatementBlock
protected class ForStatement_Group extends GroupToken {
	
	public ForStatement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getForStatementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ForStatement_ThenBlockAssignment_10(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getForStatementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "for"
protected class ForStatement_ForKeyword_0 extends KeywordToken  {
	
	public ForStatement_ForKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getForStatementAccess().getForKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "("
protected class ForStatement_LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public ForStatement_LeftParenthesisKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ForStatement_ForKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "("
protected class ForStatement_LeftParenthesisKeyword_2 extends KeywordToken  {
	
	public ForStatement_LeftParenthesisKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ForStatement_LeftParenthesisKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// indexVariable=ListVariable
protected class ForStatement_IndexVariableAssignment_3 extends AssignmentToken  {
	
	public ForStatement_IndexVariableAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getForStatementAccess().getIndexVariableAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListVariable_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("indexVariable",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("indexVariable");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getListVariableRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getForStatementAccess().getIndexVariableListVariableParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ForStatement_LeftParenthesisKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "->"
protected class ForStatement_HyphenMinusGreaterThanSignKeyword_4 extends KeywordToken  {
	
	public ForStatement_HyphenMinusGreaterThanSignKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getForStatementAccess().getHyphenMinusGreaterThanSignKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ForStatement_IndexVariableAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// valueVariable=ListVariable
protected class ForStatement_ValueVariableAssignment_5 extends AssignmentToken  {
	
	public ForStatement_ValueVariableAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getForStatementAccess().getValueVariableAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListVariable_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("valueVariable",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("valueVariable");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getListVariableRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getForStatementAccess().getValueVariableListVariableParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ForStatement_HyphenMinusGreaterThanSignKeyword_4(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class ForStatement_RightParenthesisKeyword_6 extends KeywordToken  {
	
	public ForStatement_RightParenthesisKeyword_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getForStatementAccess().getRightParenthesisKeyword_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ForStatement_ValueVariableAssignment_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "in"
protected class ForStatement_InKeyword_7 extends KeywordToken  {
	
	public ForStatement_InKeyword_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getForStatementAccess().getInKeyword_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ForStatement_RightParenthesisKeyword_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// listExpression=Expression
protected class ForStatement_ListExpressionAssignment_8 extends AssignmentToken  {
	
	public ForStatement_ListExpressionAssignment_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getForStatementAccess().getListExpressionAssignment_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_TernaryExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("listExpression",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("listExpression");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getForStatementAccess().getListExpressionExpressionParserRuleCall_8_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ForStatement_InKeyword_7(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class ForStatement_RightParenthesisKeyword_9 extends KeywordToken  {
	
	public ForStatement_RightParenthesisKeyword_9(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getForStatementAccess().getRightParenthesisKeyword_9();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ForStatement_ListExpressionAssignment_8(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// thenBlock=StatementBlock
protected class ForStatement_ThenBlockAssignment_10 extends AssignmentToken  {
	
	public ForStatement_ThenBlockAssignment_10(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getForStatementAccess().getThenBlockAssignment_10();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StatementBlock_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("thenBlock",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("thenBlock");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementBlockRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getForStatementAccess().getThenBlockStatementBlockParserRuleCall_10_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ForStatement_RightParenthesisKeyword_9(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule ForStatement ****************/


/************ begin Rule ListRemoveStatement ****************
 *
 * ListRemoveStatement:
 * 	"remove" "from" listExpr=Expression ("where" feature=[struct::Feature] "==" valueExpr=Expression | "at"
 * 	indexVariable=Expression);
 *
 **/

// "remove" "from" listExpr=Expression ("where" feature=[struct::Feature] "==" valueExpr=Expression | "at"
// indexVariable=Expression)
protected class ListRemoveStatement_Group extends GroupToken {
	
	public ListRemoveStatement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getListRemoveStatementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListRemoveStatement_Alternatives_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getListRemoveStatementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "remove"
protected class ListRemoveStatement_RemoveKeyword_0 extends KeywordToken  {
	
	public ListRemoveStatement_RemoveKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getListRemoveStatementAccess().getRemoveKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "from"
protected class ListRemoveStatement_FromKeyword_1 extends KeywordToken  {
	
	public ListRemoveStatement_FromKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getListRemoveStatementAccess().getFromKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListRemoveStatement_RemoveKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// listExpr=Expression
protected class ListRemoveStatement_ListExprAssignment_2 extends AssignmentToken  {
	
	public ListRemoveStatement_ListExprAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getListRemoveStatementAccess().getListExprAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_TernaryExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("listExpr",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("listExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getListRemoveStatementAccess().getListExprExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ListRemoveStatement_FromKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "where" feature=[struct::Feature] "==" valueExpr=Expression | "at" indexVariable=Expression
protected class ListRemoveStatement_Alternatives_3 extends AlternativesToken {

	public ListRemoveStatement_Alternatives_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getListRemoveStatementAccess().getAlternatives_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListRemoveStatement_Group_3_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ListRemoveStatement_Group_3_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// "where" feature=[struct::Feature] "==" valueExpr=Expression
protected class ListRemoveStatement_Group_3_0 extends GroupToken {
	
	public ListRemoveStatement_Group_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getListRemoveStatementAccess().getGroup_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListRemoveStatement_ValueExprAssignment_3_0_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "where"
protected class ListRemoveStatement_WhereKeyword_3_0_0 extends KeywordToken  {
	
	public ListRemoveStatement_WhereKeyword_3_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getListRemoveStatementAccess().getWhereKeyword_3_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListRemoveStatement_ListExprAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// feature=[struct::Feature]
protected class ListRemoveStatement_FeatureAssignment_3_0_1 extends AssignmentToken  {
	
	public ListRemoveStatement_FeatureAssignment_3_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getListRemoveStatementAccess().getFeatureAssignment_3_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListRemoveStatement_WhereKeyword_3_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("feature",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("feature");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getListRemoveStatementAccess().getFeatureFeatureCrossReference_3_0_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getListRemoveStatementAccess().getFeatureFeatureCrossReference_3_0_1_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "=="
protected class ListRemoveStatement_EqualsSignEqualsSignKeyword_3_0_2 extends KeywordToken  {
	
	public ListRemoveStatement_EqualsSignEqualsSignKeyword_3_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getListRemoveStatementAccess().getEqualsSignEqualsSignKeyword_3_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListRemoveStatement_FeatureAssignment_3_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// valueExpr=Expression
protected class ListRemoveStatement_ValueExprAssignment_3_0_3 extends AssignmentToken  {
	
	public ListRemoveStatement_ValueExprAssignment_3_0_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getListRemoveStatementAccess().getValueExprAssignment_3_0_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_TernaryExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("valueExpr",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("valueExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getListRemoveStatementAccess().getValueExprExpressionParserRuleCall_3_0_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ListRemoveStatement_EqualsSignEqualsSignKeyword_3_0_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "at" indexVariable=Expression
protected class ListRemoveStatement_Group_3_1 extends GroupToken {
	
	public ListRemoveStatement_Group_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getListRemoveStatementAccess().getGroup_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListRemoveStatement_IndexVariableAssignment_3_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "at"
protected class ListRemoveStatement_AtKeyword_3_1_0 extends KeywordToken  {
	
	public ListRemoveStatement_AtKeyword_3_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getListRemoveStatementAccess().getAtKeyword_3_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListRemoveStatement_ListExprAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// indexVariable=Expression
protected class ListRemoveStatement_IndexVariableAssignment_3_1_1 extends AssignmentToken  {
	
	public ListRemoveStatement_IndexVariableAssignment_3_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getListRemoveStatementAccess().getIndexVariableAssignment_3_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_TernaryExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("indexVariable",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("indexVariable");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getListRemoveStatementAccess().getIndexVariableExpressionParserRuleCall_3_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ListRemoveStatement_AtKeyword_3_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}




/************ end Rule ListRemoveStatement ****************/


/************ begin Rule AssignmentOrExpressionStatement ****************
 *
 * / *
 * 	 * scoping: feature in listExpr.type.listItemType.structure.features			[√]
 * 	 * validation:
 * 	 * 		1-  listExpr.type = [Structure]											[√]
 * 	 * 		2-  if feature != null: feature.type.isAssignableFrom(valueExpr.type)	[√]
 * 	 * / AssignmentOrExpressionStatement:
 * 	lhs=Expression (operator=AssignmentOperator rhs=Expression)?;
 *
 **/

// lhs=Expression (operator=AssignmentOperator rhs=Expression)?
protected class AssignmentOrExpressionStatement_Group extends GroupToken {
	
	public AssignmentOrExpressionStatement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAssignmentOrExpressionStatementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AssignmentOrExpressionStatement_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AssignmentOrExpressionStatement_LhsAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAssignmentOrExpressionStatementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// lhs=Expression
protected class AssignmentOrExpressionStatement_LhsAssignment_0 extends AssignmentToken  {
	
	public AssignmentOrExpressionStatement_LhsAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAssignmentOrExpressionStatementAccess().getLhsAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_TernaryExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("lhs",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("lhs");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAssignmentOrExpressionStatementAccess().getLhsExpressionParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// (operator=AssignmentOperator rhs=Expression)?
protected class AssignmentOrExpressionStatement_Group_1 extends GroupToken {
	
	public AssignmentOrExpressionStatement_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAssignmentOrExpressionStatementAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AssignmentOrExpressionStatement_RhsAssignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// operator=AssignmentOperator
protected class AssignmentOrExpressionStatement_OperatorAssignment_1_0 extends AssignmentToken  {
	
	public AssignmentOrExpressionStatement_OperatorAssignment_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAssignmentOrExpressionStatementAccess().getOperatorAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AssignmentOrExpressionStatement_LhsAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("operator",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("operator");
		if(enumLitSerializer.isValid(obj.getEObject(), grammarAccess.getAssignmentOrExpressionStatementAccess().getOperatorAssignmentOperatorEnumRuleCall_1_0_0(), value, null)) { 
			type = AssignmentType.ENUM_RULE_CALL;
			element = grammarAccess.getAssignmentOrExpressionStatementAccess().getOperatorAssignmentOperatorEnumRuleCall_1_0_0();
			return obj;
		}
		return null;
	}

}

// rhs=Expression
protected class AssignmentOrExpressionStatement_RhsAssignment_1_1 extends AssignmentToken  {
	
	public AssignmentOrExpressionStatement_RhsAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAssignmentOrExpressionStatementAccess().getRhsAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_TernaryExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("rhs",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("rhs");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAssignmentOrExpressionStatementAccess().getRhsExpressionParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AssignmentOrExpressionStatement_OperatorAssignment_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule AssignmentOrExpressionStatement ****************/


/************ begin Rule ShowModalStatement ****************
 *
 * ShowModalStatement:
 * 	"show-modal" viewable=[Viewable] argumentList=ArgumentList persistent?="persistent"?;
 *
 **/

// "show-modal" viewable=[Viewable] argumentList=ArgumentList persistent?="persistent"?
protected class ShowModalStatement_Group extends GroupToken {
	
	public ShowModalStatement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getShowModalStatementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ShowModalStatement_PersistentAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ShowModalStatement_ArgumentListAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getShowModalStatementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "show-modal"
protected class ShowModalStatement_ShowModalKeyword_0 extends KeywordToken  {
	
	public ShowModalStatement_ShowModalKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getShowModalStatementAccess().getShowModalKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// viewable=[Viewable]
protected class ShowModalStatement_ViewableAssignment_1 extends AssignmentToken  {
	
	public ShowModalStatement_ViewableAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getShowModalStatementAccess().getViewableAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ShowModalStatement_ShowModalKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("viewable",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("viewable");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getShowModalStatementAccess().getViewableViewableCrossReference_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getShowModalStatementAccess().getViewableViewableCrossReference_1_0(); 
				return obj;
			}
		}
		return null;
	}

}

// argumentList=ArgumentList
protected class ShowModalStatement_ArgumentListAssignment_2 extends AssignmentToken  {
	
	public ShowModalStatement_ArgumentListAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getShowModalStatementAccess().getArgumentListAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ArgumentList_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("argumentList",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("argumentList");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getArgumentListRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getShowModalStatementAccess().getArgumentListArgumentListParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ShowModalStatement_ViewableAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// persistent?="persistent"?
protected class ShowModalStatement_PersistentAssignment_3 extends AssignmentToken  {
	
	public ShowModalStatement_PersistentAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getShowModalStatementAccess().getPersistentAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ShowModalStatement_ArgumentListAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("persistent",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("persistent");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getShowModalStatementAccess().getPersistentPersistentKeyword_3_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule ShowModalStatement ****************/


/************ begin Rule ExitModalStatement ****************
 *
 * ExitModalStatement:
 * 	{ExitModalStatement} "exit-modal";
 *
 **/

// {ExitModalStatement} "exit-modal"
protected class ExitModalStatement_Group extends GroupToken {
	
	public ExitModalStatement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExitModalStatementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExitModalStatement_ExitModalKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExitModalStatementAccess().getExitModalStatementAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {ExitModalStatement}
protected class ExitModalStatement_ExitModalStatementAction_0 extends ActionToken  {

	public ExitModalStatement_ExitModalStatementAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getExitModalStatementAccess().getExitModalStatementAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "exit-modal"
protected class ExitModalStatement_ExitModalKeyword_1 extends KeywordToken  {
	
	public ExitModalStatement_ExitModalKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExitModalStatementAccess().getExitModalKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExitModalStatement_ExitModalStatementAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule ExitModalStatement ****************/


/************ begin Rule GotoScreenStatement ****************
 *
 * GotoScreenStatement:
 * 	("goto" | "goto-screen") viewable=[Viewable] => argumentList=ArgumentList;
 *
 **/

// ("goto" | "goto-screen") viewable=[Viewable] => argumentList=ArgumentList
protected class GotoScreenStatement_Group extends GroupToken {
	
	public GotoScreenStatement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getGotoScreenStatementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GotoScreenStatement_ArgumentListAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getGotoScreenStatementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "goto" | "goto-screen"
protected class GotoScreenStatement_Alternatives_0 extends AlternativesToken {

	public GotoScreenStatement_Alternatives_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getGotoScreenStatementAccess().getAlternatives_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GotoScreenStatement_GotoKeyword_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "goto"
protected class GotoScreenStatement_GotoKeyword_0_0 extends KeywordToken  {
	
	public GotoScreenStatement_GotoKeyword_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getGotoScreenStatementAccess().getGotoKeyword_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}


// viewable=[Viewable]
protected class GotoScreenStatement_ViewableAssignment_1 extends AssignmentToken  {
	
	public GotoScreenStatement_ViewableAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getGotoScreenStatementAccess().getViewableAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GotoScreenStatement_Alternatives_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("viewable",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("viewable");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getGotoScreenStatementAccess().getViewableViewableCrossReference_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getGotoScreenStatementAccess().getViewableViewableCrossReference_1_0(); 
				return obj;
			}
		}
		return null;
	}

}

// => argumentList=ArgumentList
protected class GotoScreenStatement_ArgumentListAssignment_2 extends AssignmentToken  {
	
	public GotoScreenStatement_ArgumentListAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getGotoScreenStatementAccess().getArgumentListAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ArgumentList_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("argumentList",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("argumentList");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getArgumentListRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getGotoScreenStatementAccess().getArgumentListArgumentListParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new GotoScreenStatement_ViewableAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule GotoScreenStatement ****************/


/************ begin Rule GotoModuleStatement ****************
 *
 * // scoping: viewable == all(Viewable)-in-this-resource.filter[screen]	[√]
 * / *
 * 	 * Call syntax is now aligned with declaration syntax because '(..)' are required.
 * 	 * / GotoModuleStatement:
 * 	"goto-module" targetModule=[UiModule] args=ArgumentList / *
 * 	 * (I'd rather use 'argumentList' instead 'args' but that triggers
 * 	 * the duplicate feature validation of Xtext - whether that's incorrect or not.)
 * 	 * / (authenticate?="after-authentication-by" authOption=[backend::AuthenticationDeclaration] "("
 * 	principal=PrincipalArgument "," credential=CredentialArgument ")" "@error:" errorCallback=CallbackExpression)?;
 *
 **/

// "goto-module" targetModule=[UiModule] args=ArgumentList / *
// 	 * (I'd rather use 'argumentList' instead 'args' but that triggers
// 	 * the duplicate feature validation of Xtext - whether that's incorrect or not.)
// 	 * / (authenticate?="after-authentication-by" authOption=[backend::AuthenticationDeclaration] "("
// principal=PrincipalArgument "," credential=CredentialArgument ")" "@error:" errorCallback=CallbackExpression)?
protected class GotoModuleStatement_Group extends GroupToken {
	
	public GotoModuleStatement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getGotoModuleStatementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GotoModuleStatement_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new GotoModuleStatement_ArgsAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getGotoModuleStatementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "goto-module"
protected class GotoModuleStatement_GotoModuleKeyword_0 extends KeywordToken  {
	
	public GotoModuleStatement_GotoModuleKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getGotoModuleStatementAccess().getGotoModuleKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// targetModule=[UiModule]
protected class GotoModuleStatement_TargetModuleAssignment_1 extends AssignmentToken  {
	
	public GotoModuleStatement_TargetModuleAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getGotoModuleStatementAccess().getTargetModuleAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GotoModuleStatement_GotoModuleKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("targetModule",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("targetModule");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getGotoModuleStatementAccess().getTargetModuleUiModuleCrossReference_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getGotoModuleStatementAccess().getTargetModuleUiModuleCrossReference_1_0(); 
				return obj;
			}
		}
		return null;
	}

}

// args=ArgumentList
protected class GotoModuleStatement_ArgsAssignment_2 extends AssignmentToken  {
	
	public GotoModuleStatement_ArgsAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getGotoModuleStatementAccess().getArgsAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ArgumentList_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("args",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("args");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getArgumentListRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getGotoModuleStatementAccess().getArgsArgumentListParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new GotoModuleStatement_TargetModuleAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// (authenticate?="after-authentication-by" authOption=[backend::AuthenticationDeclaration] "(" principal=PrincipalArgument
// "," credential=CredentialArgument ")" "@error:" errorCallback=CallbackExpression)?
protected class GotoModuleStatement_Group_3 extends GroupToken {
	
	public GotoModuleStatement_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getGotoModuleStatementAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GotoModuleStatement_ErrorCallbackAssignment_3_8(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// authenticate?="after-authentication-by"
protected class GotoModuleStatement_AuthenticateAssignment_3_0 extends AssignmentToken  {
	
	public GotoModuleStatement_AuthenticateAssignment_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getGotoModuleStatementAccess().getAuthenticateAssignment_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GotoModuleStatement_ArgsAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("authenticate",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("authenticate");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getGotoModuleStatementAccess().getAuthenticateAfterAuthenticationByKeyword_3_0_0();
			return obj;
		}
		return null;
	}

}

// authOption=[backend::AuthenticationDeclaration]
protected class GotoModuleStatement_AuthOptionAssignment_3_1 extends AssignmentToken  {
	
	public GotoModuleStatement_AuthOptionAssignment_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getGotoModuleStatementAccess().getAuthOptionAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GotoModuleStatement_AuthenticateAssignment_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("authOption",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("authOption");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getGotoModuleStatementAccess().getAuthOptionAuthenticationDeclarationCrossReference_3_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getGotoModuleStatementAccess().getAuthOptionAuthenticationDeclarationCrossReference_3_1_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "("
protected class GotoModuleStatement_LeftParenthesisKeyword_3_2 extends KeywordToken  {
	
	public GotoModuleStatement_LeftParenthesisKeyword_3_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getGotoModuleStatementAccess().getLeftParenthesisKeyword_3_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GotoModuleStatement_AuthOptionAssignment_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// principal=PrincipalArgument
protected class GotoModuleStatement_PrincipalAssignment_3_3 extends AssignmentToken  {
	
	public GotoModuleStatement_PrincipalAssignment_3_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getGotoModuleStatementAccess().getPrincipalAssignment_3_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PrincipalArgument_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("principal",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("principal");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPrincipalArgumentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getGotoModuleStatementAccess().getPrincipalPrincipalArgumentParserRuleCall_3_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new GotoModuleStatement_LeftParenthesisKeyword_3_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ","
protected class GotoModuleStatement_CommaKeyword_3_4 extends KeywordToken  {
	
	public GotoModuleStatement_CommaKeyword_3_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getGotoModuleStatementAccess().getCommaKeyword_3_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GotoModuleStatement_PrincipalAssignment_3_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// credential=CredentialArgument
protected class GotoModuleStatement_CredentialAssignment_3_5 extends AssignmentToken  {
	
	public GotoModuleStatement_CredentialAssignment_3_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getGotoModuleStatementAccess().getCredentialAssignment_3_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CredentialArgument_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("credential",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("credential");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCredentialArgumentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getGotoModuleStatementAccess().getCredentialCredentialArgumentParserRuleCall_3_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new GotoModuleStatement_CommaKeyword_3_4(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class GotoModuleStatement_RightParenthesisKeyword_3_6 extends KeywordToken  {
	
	public GotoModuleStatement_RightParenthesisKeyword_3_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getGotoModuleStatementAccess().getRightParenthesisKeyword_3_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GotoModuleStatement_CredentialAssignment_3_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "@error:"
protected class GotoModuleStatement_ErrorKeyword_3_7 extends KeywordToken  {
	
	public GotoModuleStatement_ErrorKeyword_3_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getGotoModuleStatementAccess().getErrorKeyword_3_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GotoModuleStatement_RightParenthesisKeyword_3_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// errorCallback=CallbackExpression
protected class GotoModuleStatement_ErrorCallbackAssignment_3_8 extends AssignmentToken  {
	
	public GotoModuleStatement_ErrorCallbackAssignment_3_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getGotoModuleStatementAccess().getErrorCallbackAssignment_3_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CallbackExpression_StatementBlockAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("errorCallback",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("errorCallback");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCallbackExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getGotoModuleStatementAccess().getErrorCallbackCallbackExpressionParserRuleCall_3_8_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new GotoModuleStatement_ErrorKeyword_3_7(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule GotoModuleStatement ****************/


/************ begin Rule PrincipalArgument ****************
 *
 * / *
 * 	 * validation:
 * 	 * 		1-  principals contains all principals of authOption.principals		[V]
 * 	 * 		2-	credentials contains all credentials of authOption.credentials	[V]
 * 	 * / PrincipalArgument:
 * 	principal=[backend::AuthenticationParameter] "=" valueExpr=Expression;
 *
 **/

// principal=[backend::AuthenticationParameter] "=" valueExpr=Expression
protected class PrincipalArgument_Group extends GroupToken {
	
	public PrincipalArgument_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPrincipalArgumentAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PrincipalArgument_ValueExprAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPrincipalArgumentRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// principal=[backend::AuthenticationParameter]
protected class PrincipalArgument_PrincipalAssignment_0 extends AssignmentToken  {
	
	public PrincipalArgument_PrincipalAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPrincipalArgumentAccess().getPrincipalAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("principal",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("principal");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPrincipalArgumentAccess().getPrincipalAuthenticationParameterCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getPrincipalArgumentAccess().getPrincipalAuthenticationParameterCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "="
protected class PrincipalArgument_EqualsSignKeyword_1 extends KeywordToken  {
	
	public PrincipalArgument_EqualsSignKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPrincipalArgumentAccess().getEqualsSignKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PrincipalArgument_PrincipalAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// valueExpr=Expression
protected class PrincipalArgument_ValueExprAssignment_2 extends AssignmentToken  {
	
	public PrincipalArgument_ValueExprAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPrincipalArgumentAccess().getValueExprAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_TernaryExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("valueExpr",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("valueExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPrincipalArgumentAccess().getValueExprExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PrincipalArgument_EqualsSignKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule PrincipalArgument ****************/


/************ begin Rule CredentialArgument ****************
 *
 * / *
 * 	 * validation:
 * 	 * 		principal.type.isAssignableFrom(valueExpr.type)						[V]
 * 	 * 
 * 	 * scoping:
 * 	 * 		principal in containerHaving(typeof GotoModuleStatement).authOption.principals
 * 	 * / CredentialArgument:
 * 	credential=[backend::AuthenticationParameter] "=" valueExpr=Expression;
 *
 **/

// credential=[backend::AuthenticationParameter] "=" valueExpr=Expression
protected class CredentialArgument_Group extends GroupToken {
	
	public CredentialArgument_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCredentialArgumentAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CredentialArgument_ValueExprAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCredentialArgumentRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// credential=[backend::AuthenticationParameter]
protected class CredentialArgument_CredentialAssignment_0 extends AssignmentToken  {
	
	public CredentialArgument_CredentialAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCredentialArgumentAccess().getCredentialAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("credential",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("credential");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCredentialArgumentAccess().getCredentialAuthenticationParameterCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getCredentialArgumentAccess().getCredentialAuthenticationParameterCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "="
protected class CredentialArgument_EqualsSignKeyword_1 extends KeywordToken  {
	
	public CredentialArgument_EqualsSignKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCredentialArgumentAccess().getEqualsSignKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CredentialArgument_CredentialAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// valueExpr=Expression
protected class CredentialArgument_ValueExprAssignment_2 extends AssignmentToken  {
	
	public CredentialArgument_ValueExprAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCredentialArgumentAccess().getValueExprAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_TernaryExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("valueExpr",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("valueExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getCredentialArgumentAccess().getValueExprExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CredentialArgument_EqualsSignKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule CredentialArgument ****************/


/************ begin Rule IfStatement ****************
 *
 * / *
 * 	 * validation:
 * 	 * 		credential.type.isAssignableFrom(valueExpr.type)					[V]
 * 	 * 
 * 	 * scoping:
 * 	 * 		credential in containerHaving(typeof GotoModuleStatement).authOption.credentials
 * 	 * / IfStatement:
 * 	"if" "(" condition=Expression ")" thenBlock=StatementBlock ("else" elseBlock=StatementBlock)?;
 *
 **/

// "if" "(" condition=Expression ")" thenBlock=StatementBlock ("else" elseBlock=StatementBlock)?
protected class IfStatement_Group extends GroupToken {
	
	public IfStatement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getIfStatementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IfStatement_Group_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new IfStatement_ThenBlockAssignment_4(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getIfStatementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "if"
protected class IfStatement_IfKeyword_0 extends KeywordToken  {
	
	public IfStatement_IfKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getIfStatementAccess().getIfKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "("
protected class IfStatement_LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public IfStatement_LeftParenthesisKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IfStatement_IfKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// condition=Expression
protected class IfStatement_ConditionAssignment_2 extends AssignmentToken  {
	
	public IfStatement_ConditionAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIfStatementAccess().getConditionAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_TernaryExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("condition",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("condition");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getIfStatementAccess().getConditionExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new IfStatement_LeftParenthesisKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class IfStatement_RightParenthesisKeyword_3 extends KeywordToken  {
	
	public IfStatement_RightParenthesisKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IfStatement_ConditionAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// thenBlock=StatementBlock
protected class IfStatement_ThenBlockAssignment_4 extends AssignmentToken  {
	
	public IfStatement_ThenBlockAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIfStatementAccess().getThenBlockAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StatementBlock_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("thenBlock",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("thenBlock");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementBlockRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getIfStatementAccess().getThenBlockStatementBlockParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new IfStatement_RightParenthesisKeyword_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("else" elseBlock=StatementBlock)?
protected class IfStatement_Group_5 extends GroupToken {
	
	public IfStatement_Group_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getIfStatementAccess().getGroup_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IfStatement_ElseBlockAssignment_5_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "else"
protected class IfStatement_ElseKeyword_5_0 extends KeywordToken  {
	
	public IfStatement_ElseKeyword_5_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getIfStatementAccess().getElseKeyword_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IfStatement_ThenBlockAssignment_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// elseBlock=StatementBlock
protected class IfStatement_ElseBlockAssignment_5_1 extends AssignmentToken  {
	
	public IfStatement_ElseBlockAssignment_5_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIfStatementAccess().getElseBlockAssignment_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StatementBlock_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("elseBlock",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("elseBlock");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementBlockRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getIfStatementAccess().getElseBlockStatementBlockParserRuleCall_5_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new IfStatement_ElseKeyword_5_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule IfStatement ****************/


/************ begin Rule LocalValueDeclarationStatement ****************
 *
 * / *
 * 	 * validation:
 * 	 *		1-  condition must be boolean-typed								[√]
 * 	 * 		2-  thenBlock.type.isAssignableFrom(elseBlock.type)				[√]
 * 	 * / LocalValueDeclarationStatement:
 * 	"val" value=Value (":" declaredType=TypeLiteral)? "=" valueExpr=Expression;
 *
 **/

// => "val" value=Value (":" declaredType=TypeLiteral)? "=" valueExpr=Expression
protected class LocalValueDeclarationStatement_Group extends GroupToken {
	
	public LocalValueDeclarationStatement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLocalValueDeclarationStatementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LocalValueDeclarationStatement_ValueExprAssignment_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLocalValueDeclarationStatementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// => "val"
protected class LocalValueDeclarationStatement_ValKeyword_0 extends KeywordToken  {
	
	public LocalValueDeclarationStatement_ValKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLocalValueDeclarationStatementAccess().getValKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// value=Value
protected class LocalValueDeclarationStatement_ValueAssignment_1 extends AssignmentToken  {
	
	public LocalValueDeclarationStatement_ValueAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLocalValueDeclarationStatementAccess().getValueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Value_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getValueRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getLocalValueDeclarationStatementAccess().getValueValueParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new LocalValueDeclarationStatement_ValKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// (":" declaredType=TypeLiteral)?
protected class LocalValueDeclarationStatement_Group_2 extends GroupToken {
	
	public LocalValueDeclarationStatement_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLocalValueDeclarationStatementAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LocalValueDeclarationStatement_DeclaredTypeAssignment_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ":"
protected class LocalValueDeclarationStatement_ColonKeyword_2_0 extends KeywordToken  {
	
	public LocalValueDeclarationStatement_ColonKeyword_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLocalValueDeclarationStatementAccess().getColonKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LocalValueDeclarationStatement_ValueAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// declaredType=TypeLiteral
protected class LocalValueDeclarationStatement_DeclaredTypeAssignment_2_1 extends AssignmentToken  {
	
	public LocalValueDeclarationStatement_DeclaredTypeAssignment_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLocalValueDeclarationStatementAccess().getDeclaredTypeAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TypeLiteral_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("declaredType",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("declaredType");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeLiteralRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getLocalValueDeclarationStatementAccess().getDeclaredTypeTypeLiteralParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new LocalValueDeclarationStatement_ColonKeyword_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "="
protected class LocalValueDeclarationStatement_EqualsSignKeyword_3 extends KeywordToken  {
	
	public LocalValueDeclarationStatement_EqualsSignKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLocalValueDeclarationStatementAccess().getEqualsSignKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LocalValueDeclarationStatement_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new LocalValueDeclarationStatement_ValueAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// valueExpr=Expression
protected class LocalValueDeclarationStatement_ValueExprAssignment_4 extends AssignmentToken  {
	
	public LocalValueDeclarationStatement_ValueExprAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLocalValueDeclarationStatementAccess().getValueExprAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_TernaryExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("valueExpr",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("valueExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getLocalValueDeclarationStatementAccess().getValueExprExpressionParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new LocalValueDeclarationStatement_EqualsSignKeyword_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule LocalValueDeclarationStatement ****************/


/************ begin Rule ViewableCallSite ****************
 *
 * // (synthetic type)
 * ViewableCallSite:
 * 	GotoScreenStatement | ComponentInvocation | TabDeclaration | ShowModalStatement;
 *
 **/

// GotoScreenStatement | ComponentInvocation | TabDeclaration | ShowModalStatement
protected class ViewableCallSite_Alternatives extends AlternativesToken {

	public ViewableCallSite_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getViewableCallSiteAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ViewableCallSite_GotoScreenStatementParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ViewableCallSite_ComponentInvocationParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new ViewableCallSite_TabDeclarationParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new ViewableCallSite_ShowModalStatementParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getComponentInvocationRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getGotoScreenStatementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getShowModalStatementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTabDeclarationRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// GotoScreenStatement
protected class ViewableCallSite_GotoScreenStatementParserRuleCall_0 extends RuleCallToken {
	
	public ViewableCallSite_GotoScreenStatementParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getViewableCallSiteAccess().getGotoScreenStatementParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GotoScreenStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getGotoScreenStatementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(GotoScreenStatement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ComponentInvocation
protected class ViewableCallSite_ComponentInvocationParserRuleCall_1 extends RuleCallToken {
	
	public ViewableCallSite_ComponentInvocationParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getViewableCallSiteAccess().getComponentInvocationParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComponentInvocation_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getComponentInvocationRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ComponentInvocation_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// TabDeclaration
protected class ViewableCallSite_TabDeclarationParserRuleCall_2 extends RuleCallToken {
	
	public ViewableCallSite_TabDeclarationParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getViewableCallSiteAccess().getTabDeclarationParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TabDeclaration_UnorderedGroup(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTabDeclarationRule().getType().getClassifier())
			return null;
		if(checkForRecursion(TabDeclaration_UnorderedGroup.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ShowModalStatement
protected class ViewableCallSite_ShowModalStatementParserRuleCall_3 extends RuleCallToken {
	
	public ViewableCallSite_ShowModalStatementParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getViewableCallSiteAccess().getShowModalStatementParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ShowModalStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getShowModalStatementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ShowModalStatement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule ViewableCallSite ****************/


/************ begin Rule Expression ****************
 *
 * // validation: arguments are checked against viewable.parameters for unmapped and duplicately-mapped parameters		[√]
 * / *
 *  * +-------------+
 *  * | expressions |
 *  * +-------------+
 *  * / Expression:
 * 	TernaryExpression;
 *
 **/

// TernaryExpression
protected class Expression_TernaryExpressionParserRuleCall extends RuleCallToken {
	
	public Expression_TernaryExpressionParserRuleCall(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExpressionAccess().getTernaryExpressionParserRuleCall();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TernaryExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftOperandAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAndExpressionAccess().getAndExpressionLeftOperandAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralExpressionAccess().getBooleanLiteralExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBuiltinFunctionExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCallbackExpressionsAccess().getCallbackErrorResponseExpressionAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCallbackExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCallbackExpressionsAccess().getCallbackResponseExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftOperandAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDateExpressionAccess().getDateNowExpressionAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDateExpressionAccess().getDateTodayExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDecisionExpressionAccess().getDecisionExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEnumerationLiteralExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFeatureAccessExpressionAccess().getFeatureAccessExpressionPreviousAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralExpressionAccess().getIntegerLiteralExpressionAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getInterfaceCallExpressionAccess().getInterfaceCallExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListLiteralExpressionAccess().getListLiteralExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getValueReferenceOrMethodCallExpressionAccess().getMethodCallExpressionMethodRefAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftOperandAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNotExpressionAccess().getNotExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralExpressionAccess().getNumberLiteralExpressionAction_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOrExpressionAccess().getOrExpressionLeftOperandAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getReferenceExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPrimaryExpressionAccess().getSelectionExpressionAction_7_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralExpressionAccess().getStringLiteralExpressionAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStructureCreationExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTernaryExpressionAccess().getTernaryExpressionGuardAction_1_0().getType().getClassifier())
			return null;
		if(checkForRecursion(TernaryExpression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule Expression ****************/


/************ begin Rule TernaryExpression ****************
 *
 * TernaryExpression returns Expression:
 * 	OrExpression ({TernaryExpression.guard=current} "?" thenExpr=OrExpression ":" elseExpr=OrExpression)?;
 *
 **/

// OrExpression ({TernaryExpression.guard=current} "?" thenExpr=OrExpression ":" elseExpr=OrExpression)?
protected class TernaryExpression_Group extends GroupToken {
	
	public TernaryExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTernaryExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TernaryExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TernaryExpression_OrExpressionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftOperandAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAndExpressionAccess().getAndExpressionLeftOperandAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralExpressionAccess().getBooleanLiteralExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBuiltinFunctionExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCallbackExpressionsAccess().getCallbackErrorResponseExpressionAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCallbackExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCallbackExpressionsAccess().getCallbackResponseExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftOperandAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDateExpressionAccess().getDateNowExpressionAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDateExpressionAccess().getDateTodayExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDecisionExpressionAccess().getDecisionExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEnumerationLiteralExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFeatureAccessExpressionAccess().getFeatureAccessExpressionPreviousAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralExpressionAccess().getIntegerLiteralExpressionAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getInterfaceCallExpressionAccess().getInterfaceCallExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListLiteralExpressionAccess().getListLiteralExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getValueReferenceOrMethodCallExpressionAccess().getMethodCallExpressionMethodRefAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftOperandAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNotExpressionAccess().getNotExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralExpressionAccess().getNumberLiteralExpressionAction_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOrExpressionAccess().getOrExpressionLeftOperandAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getReferenceExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPrimaryExpressionAccess().getSelectionExpressionAction_7_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralExpressionAccess().getStringLiteralExpressionAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStructureCreationExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTernaryExpressionAccess().getTernaryExpressionGuardAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// OrExpression
protected class TernaryExpression_OrExpressionParserRuleCall_0 extends RuleCallToken {
	
	public TernaryExpression_OrExpressionParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTernaryExpressionAccess().getOrExpressionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(OrExpression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({TernaryExpression.guard=current} "?" thenExpr=OrExpression ":" elseExpr=OrExpression)?
protected class TernaryExpression_Group_1 extends GroupToken {
	
	public TernaryExpression_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTernaryExpressionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TernaryExpression_ElseExprAssignment_1_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTernaryExpressionAccess().getTernaryExpressionGuardAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {TernaryExpression.guard=current}
protected class TernaryExpression_TernaryExpressionGuardAction_1_0 extends ActionToken  {

	public TernaryExpression_TernaryExpressionGuardAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getTernaryExpressionAccess().getTernaryExpressionGuardAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TernaryExpression_OrExpressionParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("guard", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("guard")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "?"
protected class TernaryExpression_QuestionMarkKeyword_1_1 extends KeywordToken  {
	
	public TernaryExpression_QuestionMarkKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTernaryExpressionAccess().getQuestionMarkKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TernaryExpression_TernaryExpressionGuardAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// thenExpr=OrExpression
protected class TernaryExpression_ThenExprAssignment_1_2 extends AssignmentToken  {
	
	public TernaryExpression_ThenExprAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTernaryExpressionAccess().getThenExprAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("thenExpr",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("thenExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getOrExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTernaryExpressionAccess().getThenExprOrExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TernaryExpression_QuestionMarkKeyword_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ":"
protected class TernaryExpression_ColonKeyword_1_3 extends KeywordToken  {
	
	public TernaryExpression_ColonKeyword_1_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTernaryExpressionAccess().getColonKeyword_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TernaryExpression_ThenExprAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// elseExpr=OrExpression
protected class TernaryExpression_ElseExprAssignment_1_4 extends AssignmentToken  {
	
	public TernaryExpression_ElseExprAssignment_1_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTernaryExpressionAccess().getElseExprAssignment_1_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("elseExpr",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("elseExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getOrExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTernaryExpressionAccess().getElseExprOrExpressionParserRuleCall_1_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TernaryExpression_ColonKeyword_1_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule TernaryExpression ****************/


/************ begin Rule OrExpression ****************
 *
 * / * 
 * 	 * validation:
 * 	 * 		1-  guard must be boolean-typed						[√]
 * 	 * 		2-  thenExpr and elseExpr must be type-compatible	[√]
 * 	 * / OrExpression returns Expression:
 * 	AndExpression ({OrExpression.leftOperand=current} "||" rightOperand=AndExpression)* // left-associative infix binary operator
 * ;
 *
 **/

// AndExpression ({OrExpression.leftOperand=current} "||" rightOperand=AndExpression)* // left-associative infix binary operator
protected class OrExpression_Group extends GroupToken {
	
	public OrExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOrExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new OrExpression_AndExpressionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftOperandAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAndExpressionAccess().getAndExpressionLeftOperandAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralExpressionAccess().getBooleanLiteralExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBuiltinFunctionExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCallbackExpressionsAccess().getCallbackErrorResponseExpressionAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCallbackExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCallbackExpressionsAccess().getCallbackResponseExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftOperandAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDateExpressionAccess().getDateNowExpressionAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDateExpressionAccess().getDateTodayExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDecisionExpressionAccess().getDecisionExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEnumerationLiteralExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFeatureAccessExpressionAccess().getFeatureAccessExpressionPreviousAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralExpressionAccess().getIntegerLiteralExpressionAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getInterfaceCallExpressionAccess().getInterfaceCallExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListLiteralExpressionAccess().getListLiteralExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getValueReferenceOrMethodCallExpressionAccess().getMethodCallExpressionMethodRefAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftOperandAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNotExpressionAccess().getNotExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralExpressionAccess().getNumberLiteralExpressionAction_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOrExpressionAccess().getOrExpressionLeftOperandAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getReferenceExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPrimaryExpressionAccess().getSelectionExpressionAction_7_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralExpressionAccess().getStringLiteralExpressionAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStructureCreationExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTernaryExpressionAccess().getTernaryExpressionGuardAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// AndExpression
protected class OrExpression_AndExpressionParserRuleCall_0 extends RuleCallToken {
	
	public OrExpression_AndExpressionParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AndExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(AndExpression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({OrExpression.leftOperand=current} "||" rightOperand=AndExpression)*
protected class OrExpression_Group_1 extends GroupToken {
	
	public OrExpression_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOrExpressionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrExpression_RightOperandAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOrExpressionAccess().getOrExpressionLeftOperandAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {OrExpression.leftOperand=current}
protected class OrExpression_OrExpressionLeftOperandAction_1_0 extends ActionToken  {

	public OrExpression_OrExpressionLeftOperandAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getOrExpressionAccess().getOrExpressionLeftOperandAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new OrExpression_AndExpressionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("leftOperand", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("leftOperand")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "||"
protected class OrExpression_VerticalLineVerticalLineKeyword_1_1 extends KeywordToken  {
	
	public OrExpression_VerticalLineVerticalLineKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getOrExpressionAccess().getVerticalLineVerticalLineKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrExpression_OrExpressionLeftOperandAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// rightOperand=AndExpression
protected class OrExpression_RightOperandAssignment_1_2 extends AssignmentToken  {
	
	public OrExpression_RightOperandAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOrExpressionAccess().getRightOperandAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AndExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("rightOperand",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("rightOperand");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAndExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getOrExpressionAccess().getRightOperandAndExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new OrExpression_VerticalLineVerticalLineKeyword_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule OrExpression ****************/


/************ begin Rule AndExpression ****************
 *
 * // validation: leftOperand, rightOperand are Boolean-typed	[√]
 * AndExpression returns Expression:
 * 	ComparisonExpression ({AndExpression.leftOperand=current} "&&" rightOperand=ComparisonExpression)* // left-associative infix binary operator
 * ;
 *
 **/

// ComparisonExpression ({AndExpression.leftOperand=current} "&&" rightOperand=ComparisonExpression)* // left-associative infix binary operator
protected class AndExpression_Group extends GroupToken {
	
	public AndExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAndExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AndExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AndExpression_ComparisonExpressionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftOperandAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAndExpressionAccess().getAndExpressionLeftOperandAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralExpressionAccess().getBooleanLiteralExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBuiltinFunctionExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCallbackExpressionsAccess().getCallbackErrorResponseExpressionAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCallbackExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCallbackExpressionsAccess().getCallbackResponseExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftOperandAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDateExpressionAccess().getDateNowExpressionAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDateExpressionAccess().getDateTodayExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDecisionExpressionAccess().getDecisionExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEnumerationLiteralExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFeatureAccessExpressionAccess().getFeatureAccessExpressionPreviousAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralExpressionAccess().getIntegerLiteralExpressionAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getInterfaceCallExpressionAccess().getInterfaceCallExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListLiteralExpressionAccess().getListLiteralExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getValueReferenceOrMethodCallExpressionAccess().getMethodCallExpressionMethodRefAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftOperandAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNotExpressionAccess().getNotExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralExpressionAccess().getNumberLiteralExpressionAction_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOrExpressionAccess().getOrExpressionLeftOperandAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getReferenceExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPrimaryExpressionAccess().getSelectionExpressionAction_7_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralExpressionAccess().getStringLiteralExpressionAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStructureCreationExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTernaryExpressionAccess().getTernaryExpressionGuardAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ComparisonExpression
protected class AndExpression_ComparisonExpressionParserRuleCall_0 extends RuleCallToken {
	
	public AndExpression_ComparisonExpressionParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAndExpressionAccess().getComparisonExpressionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComparisonExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(ComparisonExpression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({AndExpression.leftOperand=current} "&&" rightOperand=ComparisonExpression)*
protected class AndExpression_Group_1 extends GroupToken {
	
	public AndExpression_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAndExpressionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AndExpression_RightOperandAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAndExpressionAccess().getAndExpressionLeftOperandAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {AndExpression.leftOperand=current}
protected class AndExpression_AndExpressionLeftOperandAction_1_0 extends ActionToken  {

	public AndExpression_AndExpressionLeftOperandAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getAndExpressionAccess().getAndExpressionLeftOperandAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AndExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AndExpression_ComparisonExpressionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("leftOperand", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("leftOperand")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "&&"
protected class AndExpression_AmpersandAmpersandKeyword_1_1 extends KeywordToken  {
	
	public AndExpression_AmpersandAmpersandKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAndExpressionAccess().getAmpersandAmpersandKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AndExpression_AndExpressionLeftOperandAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// rightOperand=ComparisonExpression
protected class AndExpression_RightOperandAssignment_1_2 extends AssignmentToken  {
	
	public AndExpression_RightOperandAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAndExpressionAccess().getRightOperandAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComparisonExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("rightOperand",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("rightOperand");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getComparisonExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAndExpressionAccess().getRightOperandComparisonExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AndExpression_AmpersandAmpersandKeyword_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule AndExpression ****************/


/************ begin Rule ComparisonExpression ****************
 *
 * // validation: leftOperand, rightOperand are Boolean-typed	[√]
 * ComparisonExpression returns Expression:
 * 	AdditiveExpression ({ComparisonExpression.leftOperand=current} comparator=Comparator rightOperand=AdditiveExpression)* // left-associative infix binary operator
 * ;
 *
 **/

// AdditiveExpression ({ComparisonExpression.leftOperand=current} comparator=Comparator rightOperand=AdditiveExpression)* // left-associative infix binary operator
protected class ComparisonExpression_Group extends GroupToken {
	
	public ComparisonExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getComparisonExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComparisonExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ComparisonExpression_AdditiveExpressionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftOperandAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAndExpressionAccess().getAndExpressionLeftOperandAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralExpressionAccess().getBooleanLiteralExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBuiltinFunctionExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCallbackExpressionsAccess().getCallbackErrorResponseExpressionAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCallbackExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCallbackExpressionsAccess().getCallbackResponseExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftOperandAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDateExpressionAccess().getDateNowExpressionAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDateExpressionAccess().getDateTodayExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDecisionExpressionAccess().getDecisionExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEnumerationLiteralExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFeatureAccessExpressionAccess().getFeatureAccessExpressionPreviousAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralExpressionAccess().getIntegerLiteralExpressionAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getInterfaceCallExpressionAccess().getInterfaceCallExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListLiteralExpressionAccess().getListLiteralExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getValueReferenceOrMethodCallExpressionAccess().getMethodCallExpressionMethodRefAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftOperandAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNotExpressionAccess().getNotExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralExpressionAccess().getNumberLiteralExpressionAction_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOrExpressionAccess().getOrExpressionLeftOperandAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getReferenceExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPrimaryExpressionAccess().getSelectionExpressionAction_7_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralExpressionAccess().getStringLiteralExpressionAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStructureCreationExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTernaryExpressionAccess().getTernaryExpressionGuardAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// AdditiveExpression
protected class ComparisonExpression_AdditiveExpressionParserRuleCall_0 extends RuleCallToken {
	
	public ComparisonExpression_AdditiveExpressionParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getComparisonExpressionAccess().getAdditiveExpressionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AdditiveExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(AdditiveExpression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({ComparisonExpression.leftOperand=current} comparator=Comparator rightOperand=AdditiveExpression)*
protected class ComparisonExpression_Group_1 extends GroupToken {
	
	public ComparisonExpression_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getComparisonExpressionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComparisonExpression_RightOperandAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftOperandAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {ComparisonExpression.leftOperand=current}
protected class ComparisonExpression_ComparisonExpressionLeftOperandAction_1_0 extends ActionToken  {

	public ComparisonExpression_ComparisonExpressionLeftOperandAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftOperandAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComparisonExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ComparisonExpression_AdditiveExpressionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("leftOperand", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("leftOperand")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// comparator=Comparator
protected class ComparisonExpression_ComparatorAssignment_1_1 extends AssignmentToken  {
	
	public ComparisonExpression_ComparatorAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getComparisonExpressionAccess().getComparatorAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComparisonExpression_ComparisonExpressionLeftOperandAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("comparator",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("comparator");
		if(enumLitSerializer.isValid(obj.getEObject(), grammarAccess.getComparisonExpressionAccess().getComparatorComparatorEnumRuleCall_1_1_0(), value, null)) { 
			type = AssignmentType.ENUM_RULE_CALL;
			element = grammarAccess.getComparisonExpressionAccess().getComparatorComparatorEnumRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}

// rightOperand=AdditiveExpression
protected class ComparisonExpression_RightOperandAssignment_1_2 extends AssignmentToken  {
	
	public ComparisonExpression_RightOperandAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getComparisonExpressionAccess().getRightOperandAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AdditiveExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("rightOperand",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("rightOperand");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAdditiveExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getComparisonExpressionAccess().getRightOperandAdditiveExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ComparisonExpression_ComparatorAssignment_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule ComparisonExpression ****************/


/************ begin Rule AdditiveExpression ****************
 *
 * AdditiveExpression returns Expression:
 * 	MultiplicativeExpression ({AdditiveExpression.leftOperand=current} operator=AdditiveOperators
 * 	rightOperand=MultiplicativeExpression)* // left-associative infix binary operator
 * ;
 *
 **/

// MultiplicativeExpression ({AdditiveExpression.leftOperand=current} operator=AdditiveOperators
// rightOperand=MultiplicativeExpression)* // left-associative infix binary operator
protected class AdditiveExpression_Group extends GroupToken {
	
	public AdditiveExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAdditiveExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AdditiveExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AdditiveExpression_MultiplicativeExpressionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftOperandAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAndExpressionAccess().getAndExpressionLeftOperandAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralExpressionAccess().getBooleanLiteralExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBuiltinFunctionExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCallbackExpressionsAccess().getCallbackErrorResponseExpressionAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCallbackExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCallbackExpressionsAccess().getCallbackResponseExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftOperandAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDateExpressionAccess().getDateNowExpressionAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDateExpressionAccess().getDateTodayExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDecisionExpressionAccess().getDecisionExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEnumerationLiteralExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFeatureAccessExpressionAccess().getFeatureAccessExpressionPreviousAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralExpressionAccess().getIntegerLiteralExpressionAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getInterfaceCallExpressionAccess().getInterfaceCallExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListLiteralExpressionAccess().getListLiteralExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getValueReferenceOrMethodCallExpressionAccess().getMethodCallExpressionMethodRefAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftOperandAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNotExpressionAccess().getNotExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralExpressionAccess().getNumberLiteralExpressionAction_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOrExpressionAccess().getOrExpressionLeftOperandAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getReferenceExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPrimaryExpressionAccess().getSelectionExpressionAction_7_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralExpressionAccess().getStringLiteralExpressionAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStructureCreationExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTernaryExpressionAccess().getTernaryExpressionGuardAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// MultiplicativeExpression
protected class AdditiveExpression_MultiplicativeExpressionParserRuleCall_0 extends RuleCallToken {
	
	public AdditiveExpression_MultiplicativeExpressionParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MultiplicativeExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(MultiplicativeExpression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({AdditiveExpression.leftOperand=current} operator=AdditiveOperators rightOperand=MultiplicativeExpression)*
protected class AdditiveExpression_Group_1 extends GroupToken {
	
	public AdditiveExpression_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAdditiveExpressionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AdditiveExpression_RightOperandAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftOperandAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {AdditiveExpression.leftOperand=current}
protected class AdditiveExpression_AdditiveExpressionLeftOperandAction_1_0 extends ActionToken  {

	public AdditiveExpression_AdditiveExpressionLeftOperandAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftOperandAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AdditiveExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AdditiveExpression_MultiplicativeExpressionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("leftOperand", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("leftOperand")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// operator=AdditiveOperators
protected class AdditiveExpression_OperatorAssignment_1_1 extends AssignmentToken  {
	
	public AdditiveExpression_OperatorAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAdditiveExpressionAccess().getOperatorAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AdditiveExpression_AdditiveExpressionLeftOperandAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("operator",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("operator");
		if(enumLitSerializer.isValid(obj.getEObject(), grammarAccess.getAdditiveExpressionAccess().getOperatorAdditiveOperatorsEnumRuleCall_1_1_0(), value, null)) { 
			type = AssignmentType.ENUM_RULE_CALL;
			element = grammarAccess.getAdditiveExpressionAccess().getOperatorAdditiveOperatorsEnumRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}

// rightOperand=MultiplicativeExpression
protected class AdditiveExpression_RightOperandAssignment_1_2 extends AssignmentToken  {
	
	public AdditiveExpression_RightOperandAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAdditiveExpressionAccess().getRightOperandAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MultiplicativeExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("rightOperand",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("rightOperand");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMultiplicativeExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAdditiveExpressionAccess().getRightOperandMultiplicativeExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AdditiveExpression_OperatorAssignment_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule AdditiveExpression ****************/


/************ begin Rule MultiplicativeExpression ****************
 *
 * // TODO  overload the + to handle array types as well
 * MultiplicativeExpression returns Expression:
 * 	NotExpression ({MultiplicativeExpression.leftOperand=current} operator=MultiplicativeOperators
 * 	rightOperand=NotExpression)* // left-associative infix binary operator
 * ;
 *
 **/

// NotExpression ({MultiplicativeExpression.leftOperand=current} operator=MultiplicativeOperators
// rightOperand=NotExpression)* // left-associative infix binary operator
protected class MultiplicativeExpression_Group extends GroupToken {
	
	public MultiplicativeExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMultiplicativeExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MultiplicativeExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new MultiplicativeExpression_NotExpressionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftOperandAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAndExpressionAccess().getAndExpressionLeftOperandAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralExpressionAccess().getBooleanLiteralExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBuiltinFunctionExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCallbackExpressionsAccess().getCallbackErrorResponseExpressionAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCallbackExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCallbackExpressionsAccess().getCallbackResponseExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftOperandAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDateExpressionAccess().getDateNowExpressionAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDateExpressionAccess().getDateTodayExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDecisionExpressionAccess().getDecisionExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEnumerationLiteralExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFeatureAccessExpressionAccess().getFeatureAccessExpressionPreviousAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralExpressionAccess().getIntegerLiteralExpressionAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getInterfaceCallExpressionAccess().getInterfaceCallExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListLiteralExpressionAccess().getListLiteralExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getValueReferenceOrMethodCallExpressionAccess().getMethodCallExpressionMethodRefAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftOperandAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNotExpressionAccess().getNotExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralExpressionAccess().getNumberLiteralExpressionAction_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOrExpressionAccess().getOrExpressionLeftOperandAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getReferenceExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPrimaryExpressionAccess().getSelectionExpressionAction_7_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralExpressionAccess().getStringLiteralExpressionAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStructureCreationExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTernaryExpressionAccess().getTernaryExpressionGuardAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// NotExpression
protected class MultiplicativeExpression_NotExpressionParserRuleCall_0 extends RuleCallToken {
	
	public MultiplicativeExpression_NotExpressionParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getMultiplicativeExpressionAccess().getNotExpressionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NotExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(NotExpression_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({MultiplicativeExpression.leftOperand=current} operator=MultiplicativeOperators rightOperand=NotExpression)*
protected class MultiplicativeExpression_Group_1 extends GroupToken {
	
	public MultiplicativeExpression_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMultiplicativeExpressionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MultiplicativeExpression_RightOperandAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftOperandAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {MultiplicativeExpression.leftOperand=current}
protected class MultiplicativeExpression_MultiplicativeExpressionLeftOperandAction_1_0 extends ActionToken  {

	public MultiplicativeExpression_MultiplicativeExpressionLeftOperandAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftOperandAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MultiplicativeExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new MultiplicativeExpression_NotExpressionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("leftOperand", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("leftOperand")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// operator=MultiplicativeOperators
protected class MultiplicativeExpression_OperatorAssignment_1_1 extends AssignmentToken  {
	
	public MultiplicativeExpression_OperatorAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMultiplicativeExpressionAccess().getOperatorAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MultiplicativeExpression_MultiplicativeExpressionLeftOperandAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("operator",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("operator");
		if(enumLitSerializer.isValid(obj.getEObject(), grammarAccess.getMultiplicativeExpressionAccess().getOperatorMultiplicativeOperatorsEnumRuleCall_1_1_0(), value, null)) { 
			type = AssignmentType.ENUM_RULE_CALL;
			element = grammarAccess.getMultiplicativeExpressionAccess().getOperatorMultiplicativeOperatorsEnumRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}

// rightOperand=NotExpression
protected class MultiplicativeExpression_RightOperandAssignment_1_2 extends AssignmentToken  {
	
	public MultiplicativeExpression_RightOperandAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMultiplicativeExpressionAccess().getRightOperandAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NotExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("rightOperand",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("rightOperand");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getNotExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getMultiplicativeExpressionAccess().getRightOperandNotExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new MultiplicativeExpression_OperatorAssignment_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule MultiplicativeExpression ****************/


/************ begin Rule NotExpression ****************
 *
 * NotExpression returns Expression:
 * 	InterfaceCallExpression | {NotExpression} "!" operand=NotExpression;
 *
 **/

// InterfaceCallExpression | {NotExpression} "!" operand=NotExpression
protected class NotExpression_Alternatives extends AlternativesToken {

	public NotExpression_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getNotExpressionAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NotExpression_InterfaceCallExpressionParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new NotExpression_Group_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftOperandAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAndExpressionAccess().getAndExpressionLeftOperandAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralExpressionAccess().getBooleanLiteralExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBuiltinFunctionExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCallbackExpressionsAccess().getCallbackErrorResponseExpressionAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCallbackExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCallbackExpressionsAccess().getCallbackResponseExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftOperandAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDateExpressionAccess().getDateNowExpressionAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDateExpressionAccess().getDateTodayExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDecisionExpressionAccess().getDecisionExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEnumerationLiteralExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFeatureAccessExpressionAccess().getFeatureAccessExpressionPreviousAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralExpressionAccess().getIntegerLiteralExpressionAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getInterfaceCallExpressionAccess().getInterfaceCallExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListLiteralExpressionAccess().getListLiteralExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getValueReferenceOrMethodCallExpressionAccess().getMethodCallExpressionMethodRefAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftOperandAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNotExpressionAccess().getNotExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralExpressionAccess().getNumberLiteralExpressionAction_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOrExpressionAccess().getOrExpressionLeftOperandAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getReferenceExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPrimaryExpressionAccess().getSelectionExpressionAction_7_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralExpressionAccess().getStringLiteralExpressionAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStructureCreationExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTernaryExpressionAccess().getTernaryExpressionGuardAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// InterfaceCallExpression
protected class NotExpression_InterfaceCallExpressionParserRuleCall_0 extends RuleCallToken {
	
	public NotExpression_InterfaceCallExpressionParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getNotExpressionAccess().getInterfaceCallExpressionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InterfaceCallExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(InterfaceCallExpression_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// {NotExpression} "!" operand=NotExpression
protected class NotExpression_Group_1 extends GroupToken {
	
	public NotExpression_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNotExpressionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NotExpression_OperandAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNotExpressionAccess().getNotExpressionAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {NotExpression}
protected class NotExpression_NotExpressionAction_1_0 extends ActionToken  {

	public NotExpression_NotExpressionAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getNotExpressionAccess().getNotExpressionAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "!"
protected class NotExpression_ExclamationMarkKeyword_1_1 extends KeywordToken  {
	
	public NotExpression_ExclamationMarkKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNotExpressionAccess().getExclamationMarkKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NotExpression_NotExpressionAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// operand=NotExpression
protected class NotExpression_OperandAssignment_1_2 extends AssignmentToken  {
	
	public NotExpression_OperandAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNotExpressionAccess().getOperandAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NotExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("operand",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("operand");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getNotExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getNotExpressionAccess().getOperandNotExpressionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new NotExpression_ExclamationMarkKeyword_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule NotExpression ****************/


/************ begin Rule InterfaceCallExpression ****************
 *
 * // validation: operand.type.booleanTyped							[√]
 * InterfaceCallExpression returns Expression:
 * 	FeatureAccessExpression | {InterfaceCallExpression} "call" serviceId=ServiceIdentification "(" ("observe" "["
 * 	observeSites+=Expression* "]")? input=Expression? ")" ("=>" callback=CallbackExpression ("@error:"
 * 	errorCallback=CallbackExpression)?)?;
 *
 **/

// FeatureAccessExpression | {InterfaceCallExpression} "call" serviceId=ServiceIdentification "(" ("observe" "["
// observeSites+=Expression* "]")? input=Expression? ")" ("=>" callback=CallbackExpression ("@error:"
// errorCallback=CallbackExpression)?)?
protected class InterfaceCallExpression_Alternatives extends AlternativesToken {

	public InterfaceCallExpression_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getInterfaceCallExpressionAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InterfaceCallExpression_FeatureAccessExpressionParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new InterfaceCallExpression_Group_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftOperandAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAndExpressionAccess().getAndExpressionLeftOperandAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralExpressionAccess().getBooleanLiteralExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBuiltinFunctionExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCallbackExpressionsAccess().getCallbackErrorResponseExpressionAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCallbackExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCallbackExpressionsAccess().getCallbackResponseExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftOperandAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDateExpressionAccess().getDateNowExpressionAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDateExpressionAccess().getDateTodayExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDecisionExpressionAccess().getDecisionExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEnumerationLiteralExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFeatureAccessExpressionAccess().getFeatureAccessExpressionPreviousAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralExpressionAccess().getIntegerLiteralExpressionAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getInterfaceCallExpressionAccess().getInterfaceCallExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListLiteralExpressionAccess().getListLiteralExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getValueReferenceOrMethodCallExpressionAccess().getMethodCallExpressionMethodRefAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftOperandAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNotExpressionAccess().getNotExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralExpressionAccess().getNumberLiteralExpressionAction_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOrExpressionAccess().getOrExpressionLeftOperandAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getReferenceExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPrimaryExpressionAccess().getSelectionExpressionAction_7_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralExpressionAccess().getStringLiteralExpressionAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStructureCreationExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTernaryExpressionAccess().getTernaryExpressionGuardAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// FeatureAccessExpression
protected class InterfaceCallExpression_FeatureAccessExpressionParserRuleCall_0 extends RuleCallToken {
	
	public InterfaceCallExpression_FeatureAccessExpressionParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getInterfaceCallExpressionAccess().getFeatureAccessExpressionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureAccessExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(FeatureAccessExpression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// {InterfaceCallExpression} "call" serviceId=ServiceIdentification "(" ("observe" "[" observeSites+=Expression* "]")?
// input=Expression? ")" ("=>" callback=CallbackExpression ("@error:" errorCallback=CallbackExpression)?)?
protected class InterfaceCallExpression_Group_1 extends GroupToken {
	
	public InterfaceCallExpression_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getInterfaceCallExpressionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InterfaceCallExpression_Group_1_7(lastRuleCallOrigin, this, 0, inst);
			case 1: return new InterfaceCallExpression_RightParenthesisKeyword_1_6(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getInterfaceCallExpressionAccess().getInterfaceCallExpressionAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {InterfaceCallExpression}
protected class InterfaceCallExpression_InterfaceCallExpressionAction_1_0 extends ActionToken  {

	public InterfaceCallExpression_InterfaceCallExpressionAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getInterfaceCallExpressionAccess().getInterfaceCallExpressionAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "call"
protected class InterfaceCallExpression_CallKeyword_1_1 extends KeywordToken  {
	
	public InterfaceCallExpression_CallKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getInterfaceCallExpressionAccess().getCallKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InterfaceCallExpression_InterfaceCallExpressionAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// serviceId=ServiceIdentification
protected class InterfaceCallExpression_ServiceIdAssignment_1_2 extends AssignmentToken  {
	
	public InterfaceCallExpression_ServiceIdAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInterfaceCallExpressionAccess().getServiceIdAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ServiceIdentification_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("serviceId",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("serviceId");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getServiceIdentificationRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getInterfaceCallExpressionAccess().getServiceIdServiceIdentificationParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new InterfaceCallExpression_CallKeyword_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "("
protected class InterfaceCallExpression_LeftParenthesisKeyword_1_3 extends KeywordToken  {
	
	public InterfaceCallExpression_LeftParenthesisKeyword_1_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getInterfaceCallExpressionAccess().getLeftParenthesisKeyword_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InterfaceCallExpression_ServiceIdAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ("observe" "[" observeSites+=Expression* "]")?
protected class InterfaceCallExpression_Group_1_4 extends GroupToken {
	
	public InterfaceCallExpression_Group_1_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getInterfaceCallExpressionAccess().getGroup_1_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InterfaceCallExpression_RightSquareBracketKeyword_1_4_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "observe"
protected class InterfaceCallExpression_ObserveKeyword_1_4_0 extends KeywordToken  {
	
	public InterfaceCallExpression_ObserveKeyword_1_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getInterfaceCallExpressionAccess().getObserveKeyword_1_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InterfaceCallExpression_LeftParenthesisKeyword_1_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "["
protected class InterfaceCallExpression_LeftSquareBracketKeyword_1_4_1 extends KeywordToken  {
	
	public InterfaceCallExpression_LeftSquareBracketKeyword_1_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getInterfaceCallExpressionAccess().getLeftSquareBracketKeyword_1_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InterfaceCallExpression_ObserveKeyword_1_4_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// observeSites+=Expression*
protected class InterfaceCallExpression_ObserveSitesAssignment_1_4_2 extends AssignmentToken  {
	
	public InterfaceCallExpression_ObserveSitesAssignment_1_4_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInterfaceCallExpressionAccess().getObserveSitesAssignment_1_4_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_TernaryExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("observeSites",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("observeSites");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getInterfaceCallExpressionAccess().getObserveSitesExpressionParserRuleCall_1_4_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new InterfaceCallExpression_ObserveSitesAssignment_1_4_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new InterfaceCallExpression_LeftSquareBracketKeyword_1_4_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "]"
protected class InterfaceCallExpression_RightSquareBracketKeyword_1_4_3 extends KeywordToken  {
	
	public InterfaceCallExpression_RightSquareBracketKeyword_1_4_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getInterfaceCallExpressionAccess().getRightSquareBracketKeyword_1_4_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InterfaceCallExpression_ObserveSitesAssignment_1_4_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// input=Expression?
protected class InterfaceCallExpression_InputAssignment_1_5 extends AssignmentToken  {
	
	public InterfaceCallExpression_InputAssignment_1_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInterfaceCallExpressionAccess().getInputAssignment_1_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_TernaryExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("input",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("input");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getInterfaceCallExpressionAccess().getInputExpressionParserRuleCall_1_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new InterfaceCallExpression_Group_1_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new InterfaceCallExpression_LeftParenthesisKeyword_1_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class InterfaceCallExpression_RightParenthesisKeyword_1_6 extends KeywordToken  {
	
	public InterfaceCallExpression_RightParenthesisKeyword_1_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getInterfaceCallExpressionAccess().getRightParenthesisKeyword_1_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InterfaceCallExpression_InputAssignment_1_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new InterfaceCallExpression_Group_1_4(lastRuleCallOrigin, this, 1, inst);
			case 2: return new InterfaceCallExpression_LeftParenthesisKeyword_1_3(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}

// ("=>" callback=CallbackExpression ("@error:" errorCallback=CallbackExpression)?)?
protected class InterfaceCallExpression_Group_1_7 extends GroupToken {
	
	public InterfaceCallExpression_Group_1_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getInterfaceCallExpressionAccess().getGroup_1_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InterfaceCallExpression_Group_1_7_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new InterfaceCallExpression_CallbackAssignment_1_7_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// "=>"
protected class InterfaceCallExpression_EqualsSignGreaterThanSignKeyword_1_7_0 extends KeywordToken  {
	
	public InterfaceCallExpression_EqualsSignGreaterThanSignKeyword_1_7_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getInterfaceCallExpressionAccess().getEqualsSignGreaterThanSignKeyword_1_7_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InterfaceCallExpression_RightParenthesisKeyword_1_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// callback=CallbackExpression
protected class InterfaceCallExpression_CallbackAssignment_1_7_1 extends AssignmentToken  {
	
	public InterfaceCallExpression_CallbackAssignment_1_7_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInterfaceCallExpressionAccess().getCallbackAssignment_1_7_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CallbackExpression_StatementBlockAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("callback",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("callback");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCallbackExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getInterfaceCallExpressionAccess().getCallbackCallbackExpressionParserRuleCall_1_7_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new InterfaceCallExpression_EqualsSignGreaterThanSignKeyword_1_7_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("@error:" errorCallback=CallbackExpression)?
protected class InterfaceCallExpression_Group_1_7_2 extends GroupToken {
	
	public InterfaceCallExpression_Group_1_7_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getInterfaceCallExpressionAccess().getGroup_1_7_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InterfaceCallExpression_ErrorCallbackAssignment_1_7_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "@error:"
protected class InterfaceCallExpression_ErrorKeyword_1_7_2_0 extends KeywordToken  {
	
	public InterfaceCallExpression_ErrorKeyword_1_7_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getInterfaceCallExpressionAccess().getErrorKeyword_1_7_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InterfaceCallExpression_CallbackAssignment_1_7_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// errorCallback=CallbackExpression
protected class InterfaceCallExpression_ErrorCallbackAssignment_1_7_2_1 extends AssignmentToken  {
	
	public InterfaceCallExpression_ErrorCallbackAssignment_1_7_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInterfaceCallExpressionAccess().getErrorCallbackAssignment_1_7_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CallbackExpression_StatementBlockAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("errorCallback",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("errorCallback");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCallbackExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getInterfaceCallExpressionAccess().getErrorCallbackCallbackExpressionParserRuleCall_1_7_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new InterfaceCallExpression_ErrorKeyword_1_7_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}





/************ end Rule InterfaceCallExpression ****************/


/************ begin Rule ServiceIdentification ****************
 *
 * / *
 * 	 * validation:
 * 	 * 		1-  serviceId.inputType.isAssignableFrom(input.type)																		[√]
 * 	 * 		2-  InterfaceCallExpression can only be a lone expression as a statement or the initialisation of a value declaration		[√]
 * 	 * / // TODO  more validation? e.g. callback and observeSites are "often" illegal
 * ServiceIdentification:
 * 	{NamedServiceReference} service=[backend::NamedService] | {CrudServiceIdentification} crudType=CrudTypes
 * 	structure=[struct::Structure];
 *
 **/

// {NamedServiceReference} service=[backend::NamedService] | {CrudServiceIdentification} crudType=CrudTypes
// structure=[struct::Structure]
protected class ServiceIdentification_Alternatives extends AlternativesToken {

	public ServiceIdentification_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getServiceIdentificationAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ServiceIdentification_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ServiceIdentification_Group_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getServiceIdentificationAccess().getCrudServiceIdentificationAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getServiceIdentificationAccess().getNamedServiceReferenceAction_0_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {NamedServiceReference} service=[backend::NamedService]
protected class ServiceIdentification_Group_0 extends GroupToken {
	
	public ServiceIdentification_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getServiceIdentificationAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ServiceIdentification_ServiceAssignment_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getServiceIdentificationAccess().getNamedServiceReferenceAction_0_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {NamedServiceReference}
protected class ServiceIdentification_NamedServiceReferenceAction_0_0 extends ActionToken  {

	public ServiceIdentification_NamedServiceReferenceAction_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getServiceIdentificationAccess().getNamedServiceReferenceAction_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// service=[backend::NamedService]
protected class ServiceIdentification_ServiceAssignment_0_1 extends AssignmentToken  {
	
	public ServiceIdentification_ServiceAssignment_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getServiceIdentificationAccess().getServiceAssignment_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ServiceIdentification_NamedServiceReferenceAction_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("service",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("service");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getServiceIdentificationAccess().getServiceNamedServiceCrossReference_0_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getServiceIdentificationAccess().getServiceNamedServiceCrossReference_0_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


// {CrudServiceIdentification} crudType=CrudTypes structure=[struct::Structure]
protected class ServiceIdentification_Group_1 extends GroupToken {
	
	public ServiceIdentification_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getServiceIdentificationAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ServiceIdentification_StructureAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getServiceIdentificationAccess().getCrudServiceIdentificationAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {CrudServiceIdentification}
protected class ServiceIdentification_CrudServiceIdentificationAction_1_0 extends ActionToken  {

	public ServiceIdentification_CrudServiceIdentificationAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getServiceIdentificationAccess().getCrudServiceIdentificationAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// crudType=CrudTypes
protected class ServiceIdentification_CrudTypeAssignment_1_1 extends AssignmentToken  {
	
	public ServiceIdentification_CrudTypeAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getServiceIdentificationAccess().getCrudTypeAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ServiceIdentification_CrudServiceIdentificationAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("crudType",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("crudType");
		if(enumLitSerializer.isValid(obj.getEObject(), grammarAccess.getServiceIdentificationAccess().getCrudTypeCrudTypesEnumRuleCall_1_1_0(), value, null)) { 
			type = AssignmentType.ENUM_RULE_CALL;
			element = grammarAccess.getServiceIdentificationAccess().getCrudTypeCrudTypesEnumRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}

// structure=[struct::Structure]
protected class ServiceIdentification_StructureAssignment_1_2 extends AssignmentToken  {
	
	public ServiceIdentification_StructureAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getServiceIdentificationAccess().getStructureAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ServiceIdentification_CrudTypeAssignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("structure",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("structure");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getServiceIdentificationAccess().getStructureStructureCrossReference_1_2_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getServiceIdentificationAccess().getStructureStructureCrossReference_1_2_0(); 
				return obj;
			}
		}
		return null;
	}

}



/************ end Rule ServiceIdentification ****************/


/************ begin Rule FeatureAccessExpression ****************
 *
 * FeatureAccessExpression returns Expression hidden():
 * 	PrimaryExpression ({FeatureAccessExpression.previous=current} "." feature=[struct::Feature])* // left-associative infix binary operator
 * ;
 *
 **/

// PrimaryExpression ({FeatureAccessExpression.previous=current} "." feature=[struct::Feature])* // left-associative infix binary operator
protected class FeatureAccessExpression_Group extends GroupToken {
	
	public FeatureAccessExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFeatureAccessExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureAccessExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new FeatureAccessExpression_PrimaryExpressionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftOperandAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAndExpressionAccess().getAndExpressionLeftOperandAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralExpressionAccess().getBooleanLiteralExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBuiltinFunctionExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCallbackExpressionsAccess().getCallbackErrorResponseExpressionAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCallbackExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCallbackExpressionsAccess().getCallbackResponseExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftOperandAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDateExpressionAccess().getDateNowExpressionAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDateExpressionAccess().getDateTodayExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDecisionExpressionAccess().getDecisionExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEnumerationLiteralExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFeatureAccessExpressionAccess().getFeatureAccessExpressionPreviousAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralExpressionAccess().getIntegerLiteralExpressionAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getInterfaceCallExpressionAccess().getInterfaceCallExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListLiteralExpressionAccess().getListLiteralExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getValueReferenceOrMethodCallExpressionAccess().getMethodCallExpressionMethodRefAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftOperandAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNotExpressionAccess().getNotExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralExpressionAccess().getNumberLiteralExpressionAction_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOrExpressionAccess().getOrExpressionLeftOperandAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getReferenceExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPrimaryExpressionAccess().getSelectionExpressionAction_7_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralExpressionAccess().getStringLiteralExpressionAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStructureCreationExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTernaryExpressionAccess().getTernaryExpressionGuardAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// PrimaryExpression
protected class FeatureAccessExpression_PrimaryExpressionParserRuleCall_0 extends RuleCallToken {
	
	public FeatureAccessExpression_PrimaryExpressionParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFeatureAccessExpressionAccess().getPrimaryExpressionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PrimaryExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(PrimaryExpression_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({FeatureAccessExpression.previous=current} "." feature=[struct::Feature])*
protected class FeatureAccessExpression_Group_1 extends GroupToken {
	
	public FeatureAccessExpression_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFeatureAccessExpressionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureAccessExpression_FeatureAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFeatureAccessExpressionAccess().getFeatureAccessExpressionPreviousAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {FeatureAccessExpression.previous=current}
protected class FeatureAccessExpression_FeatureAccessExpressionPreviousAction_1_0 extends ActionToken  {

	public FeatureAccessExpression_FeatureAccessExpressionPreviousAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getFeatureAccessExpressionAccess().getFeatureAccessExpressionPreviousAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureAccessExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new FeatureAccessExpression_PrimaryExpressionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("previous", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("previous")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "."
protected class FeatureAccessExpression_FullStopKeyword_1_1 extends KeywordToken  {
	
	public FeatureAccessExpression_FullStopKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureAccessExpressionAccess().getFullStopKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureAccessExpression_FeatureAccessExpressionPreviousAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// feature=[struct::Feature]
protected class FeatureAccessExpression_FeatureAssignment_1_2 extends AssignmentToken  {
	
	public FeatureAccessExpression_FeatureAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFeatureAccessExpressionAccess().getFeatureAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureAccessExpression_FullStopKeyword_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("feature",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("feature");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFeatureAccessExpressionAccess().getFeatureFeatureCrossReference_1_2_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getFeatureAccessExpressionAccess().getFeatureFeatureCrossReference_1_2_0(); 
				return obj;
			}
		}
		return null;
	}

}



/************ end Rule FeatureAccessExpression ****************/


/************ begin Rule PrimaryExpression ****************
 *
 * // scoping: feature in previous.type.features												[√]
 * // validation: previous must be a FeatureAccessExpression or a ValueReferenceExpression		[√]
 * // TODO  add invocation of member methods and such
 * // TODO  use an enum BuiltinMemberFunctions to add "member calls" to FeatureAccessExpression (and add a ton of validation)
 * // (undo cascade of FeatureAccessExpression's hidden())
 * PrimaryExpression returns Expression hidden(WS, ML_COMMENT, SL_COMMENT):
 * 	"(" Expression ")" | LiteralExpression | CallbackExpressions | StructureCreationExpression |
 * 	ValueReferenceOrMethodCallExpression | DateExpression | BuiltinFunctionExpression | {SelectionExpression} "selection";
 *
 **/

// "(" Expression ")" | LiteralExpression | CallbackExpressions | StructureCreationExpression |
// ValueReferenceOrMethodCallExpression | DateExpression | BuiltinFunctionExpression | {SelectionExpression} "selection"
protected class PrimaryExpression_Alternatives extends AlternativesToken {

	public PrimaryExpression_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PrimaryExpression_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new PrimaryExpression_LiteralExpressionParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new PrimaryExpression_CallbackExpressionsParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new PrimaryExpression_StructureCreationExpressionParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new PrimaryExpression_ValueReferenceOrMethodCallExpressionParserRuleCall_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new PrimaryExpression_DateExpressionParserRuleCall_5(lastRuleCallOrigin, this, 5, inst);
			case 6: return new PrimaryExpression_BuiltinFunctionExpressionParserRuleCall_6(lastRuleCallOrigin, this, 6, inst);
			case 7: return new PrimaryExpression_Group_7(lastRuleCallOrigin, this, 7, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftOperandAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAndExpressionAccess().getAndExpressionLeftOperandAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralExpressionAccess().getBooleanLiteralExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBuiltinFunctionExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCallbackExpressionsAccess().getCallbackErrorResponseExpressionAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCallbackExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCallbackExpressionsAccess().getCallbackResponseExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftOperandAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDateExpressionAccess().getDateNowExpressionAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDateExpressionAccess().getDateTodayExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDecisionExpressionAccess().getDecisionExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEnumerationLiteralExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFeatureAccessExpressionAccess().getFeatureAccessExpressionPreviousAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralExpressionAccess().getIntegerLiteralExpressionAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getInterfaceCallExpressionAccess().getInterfaceCallExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListLiteralExpressionAccess().getListLiteralExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getValueReferenceOrMethodCallExpressionAccess().getMethodCallExpressionMethodRefAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftOperandAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNotExpressionAccess().getNotExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralExpressionAccess().getNumberLiteralExpressionAction_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOrExpressionAccess().getOrExpressionLeftOperandAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getReferenceExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPrimaryExpressionAccess().getSelectionExpressionAction_7_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralExpressionAccess().getStringLiteralExpressionAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStructureCreationExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTernaryExpressionAccess().getTernaryExpressionGuardAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "(" Expression ")"
protected class PrimaryExpression_Group_0 extends GroupToken {
	
	public PrimaryExpression_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PrimaryExpression_RightParenthesisKeyword_0_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "("
protected class PrimaryExpression_LeftParenthesisKeyword_0_0 extends KeywordToken  {
	
	public PrimaryExpression_LeftParenthesisKeyword_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// Expression
protected class PrimaryExpression_ExpressionParserRuleCall_0_1 extends RuleCallToken {
	
	public PrimaryExpression_ExpressionParserRuleCall_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getExpressionParserRuleCall_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_TernaryExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(Expression_TernaryExpressionParserRuleCall.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PrimaryExpression_LeftParenthesisKeyword_0_0(lastRuleCallOrigin, next, actIndex, inst);
			default: return null;
		}	
	}	
}

// ")"
protected class PrimaryExpression_RightParenthesisKeyword_0_2 extends KeywordToken  {
	
	public PrimaryExpression_RightParenthesisKeyword_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PrimaryExpression_ExpressionParserRuleCall_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// LiteralExpression
protected class PrimaryExpression_LiteralExpressionParserRuleCall_1 extends RuleCallToken {
	
	public PrimaryExpression_LiteralExpressionParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getLiteralExpressionParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LiteralExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLiteralExpressionAccess().getBooleanLiteralExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDecisionExpressionAccess().getDecisionExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEnumerationLiteralExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralExpressionAccess().getIntegerLiteralExpressionAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListLiteralExpressionAccess().getListLiteralExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralExpressionAccess().getNumberLiteralExpressionAction_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralExpressionAccess().getStringLiteralExpressionAction_0_0().getType().getClassifier())
			return null;
		if(checkForRecursion(LiteralExpression_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// CallbackExpressions
protected class PrimaryExpression_CallbackExpressionsParserRuleCall_2 extends RuleCallToken {
	
	public PrimaryExpression_CallbackExpressionsParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getCallbackExpressionsParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CallbackExpressions_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCallbackExpressionsAccess().getCallbackErrorResponseExpressionAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCallbackExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCallbackExpressionsAccess().getCallbackResponseExpressionAction_1_0().getType().getClassifier())
			return null;
		if(checkForRecursion(CallbackExpressions_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// StructureCreationExpression
protected class PrimaryExpression_StructureCreationExpressionParserRuleCall_3 extends RuleCallToken {
	
	public PrimaryExpression_StructureCreationExpressionParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getStructureCreationExpressionParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StructureCreationExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStructureCreationExpressionRule().getType().getClassifier())
			return null;
		if(checkForRecursion(StructureCreationExpression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ValueReferenceOrMethodCallExpression
protected class PrimaryExpression_ValueReferenceOrMethodCallExpressionParserRuleCall_4 extends RuleCallToken {
	
	public PrimaryExpression_ValueReferenceOrMethodCallExpressionParserRuleCall_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getValueReferenceOrMethodCallExpressionParserRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ValueReferenceOrMethodCallExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getValueReferenceOrMethodCallExpressionAccess().getMethodCallExpressionMethodRefAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getReferenceExpressionRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ValueReferenceOrMethodCallExpression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// DateExpression
protected class PrimaryExpression_DateExpressionParserRuleCall_5 extends RuleCallToken {
	
	public PrimaryExpression_DateExpressionParserRuleCall_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getDateExpressionParserRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DateExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDateExpressionAccess().getDateNowExpressionAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDateExpressionAccess().getDateTodayExpressionAction_1_0().getType().getClassifier())
			return null;
		if(checkForRecursion(DateExpression_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// BuiltinFunctionExpression
protected class PrimaryExpression_BuiltinFunctionExpressionParserRuleCall_6 extends RuleCallToken {
	
	public PrimaryExpression_BuiltinFunctionExpressionParserRuleCall_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getBuiltinFunctionExpressionParserRuleCall_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BuiltinFunctionExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBuiltinFunctionExpressionRule().getType().getClassifier())
			return null;
		if(checkForRecursion(BuiltinFunctionExpression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// {SelectionExpression} "selection"
protected class PrimaryExpression_Group_7 extends GroupToken {
	
	public PrimaryExpression_Group_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getGroup_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PrimaryExpression_SelectionKeyword_7_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPrimaryExpressionAccess().getSelectionExpressionAction_7_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {SelectionExpression}
protected class PrimaryExpression_SelectionExpressionAction_7_0 extends ActionToken  {

	public PrimaryExpression_SelectionExpressionAction_7_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getSelectionExpressionAction_7_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "selection"
protected class PrimaryExpression_SelectionKeyword_7_1 extends KeywordToken  {
	
	public PrimaryExpression_SelectionKeyword_7_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getSelectionKeyword_7_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PrimaryExpression_SelectionExpressionAction_7_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule PrimaryExpression ****************/


/************ begin Rule DateExpression ****************
 *
 * // validation: SelectionExpression may only be used within CalendarStatement.onSelect		[?]
 * DateExpression:
 * 	{DateNowExpression} "now" | {DateTodayExpression} "today";
 *
 **/

// {DateNowExpression} "now" | {DateTodayExpression} "today"
protected class DateExpression_Alternatives extends AlternativesToken {

	public DateExpression_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getDateExpressionAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DateExpression_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new DateExpression_Group_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDateExpressionAccess().getDateNowExpressionAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDateExpressionAccess().getDateTodayExpressionAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {DateNowExpression} "now"
protected class DateExpression_Group_0 extends GroupToken {
	
	public DateExpression_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDateExpressionAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DateExpression_NowKeyword_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDateExpressionAccess().getDateNowExpressionAction_0_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {DateNowExpression}
protected class DateExpression_DateNowExpressionAction_0_0 extends ActionToken  {

	public DateExpression_DateNowExpressionAction_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getDateExpressionAccess().getDateNowExpressionAction_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "now"
protected class DateExpression_NowKeyword_0_1 extends KeywordToken  {
	
	public DateExpression_NowKeyword_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDateExpressionAccess().getNowKeyword_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DateExpression_DateNowExpressionAction_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// {DateTodayExpression} "today"
protected class DateExpression_Group_1 extends GroupToken {
	
	public DateExpression_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDateExpressionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DateExpression_TodayKeyword_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDateExpressionAccess().getDateTodayExpressionAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {DateTodayExpression}
protected class DateExpression_DateTodayExpressionAction_1_0 extends ActionToken  {

	public DateExpression_DateTodayExpressionAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getDateExpressionAccess().getDateTodayExpressionAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "today"
protected class DateExpression_TodayKeyword_1_1 extends KeywordToken  {
	
	public DateExpression_TodayKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDateExpressionAccess().getTodayKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DateExpression_DateTodayExpressionAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule DateExpression ****************/


/************ begin Rule BuiltinFunctionExpression ****************
 *
 * BuiltinFunctionExpression:
 * 	function=BuiltinFunctions "(" argument=Expression ("on" sortFeature=[struct::Feature])? ")";
 *
 **/

// function=BuiltinFunctions "(" argument=Expression ("on" sortFeature=[struct::Feature])? ")"
protected class BuiltinFunctionExpression_Group extends GroupToken {
	
	public BuiltinFunctionExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBuiltinFunctionExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BuiltinFunctionExpression_RightParenthesisKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBuiltinFunctionExpressionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// function=BuiltinFunctions
protected class BuiltinFunctionExpression_FunctionAssignment_0 extends AssignmentToken  {
	
	public BuiltinFunctionExpression_FunctionAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBuiltinFunctionExpressionAccess().getFunctionAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("function",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("function");
		if(enumLitSerializer.isValid(obj.getEObject(), grammarAccess.getBuiltinFunctionExpressionAccess().getFunctionBuiltinFunctionsEnumRuleCall_0_0(), value, null)) { 
			type = AssignmentType.ENUM_RULE_CALL;
			element = grammarAccess.getBuiltinFunctionExpressionAccess().getFunctionBuiltinFunctionsEnumRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "("
protected class BuiltinFunctionExpression_LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public BuiltinFunctionExpression_LeftParenthesisKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBuiltinFunctionExpressionAccess().getLeftParenthesisKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BuiltinFunctionExpression_FunctionAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// argument=Expression
protected class BuiltinFunctionExpression_ArgumentAssignment_2 extends AssignmentToken  {
	
	public BuiltinFunctionExpression_ArgumentAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBuiltinFunctionExpressionAccess().getArgumentAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_TernaryExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("argument",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("argument");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getBuiltinFunctionExpressionAccess().getArgumentExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BuiltinFunctionExpression_LeftParenthesisKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("on" sortFeature=[struct::Feature])?
protected class BuiltinFunctionExpression_Group_3 extends GroupToken {
	
	public BuiltinFunctionExpression_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBuiltinFunctionExpressionAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BuiltinFunctionExpression_SortFeatureAssignment_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "on"
protected class BuiltinFunctionExpression_OnKeyword_3_0 extends KeywordToken  {
	
	public BuiltinFunctionExpression_OnKeyword_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBuiltinFunctionExpressionAccess().getOnKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BuiltinFunctionExpression_ArgumentAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// sortFeature=[struct::Feature]
protected class BuiltinFunctionExpression_SortFeatureAssignment_3_1 extends AssignmentToken  {
	
	public BuiltinFunctionExpression_SortFeatureAssignment_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBuiltinFunctionExpressionAccess().getSortFeatureAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BuiltinFunctionExpression_OnKeyword_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("sortFeature",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("sortFeature");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBuiltinFunctionExpressionAccess().getSortFeatureFeatureCrossReference_3_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getBuiltinFunctionExpressionAccess().getSortFeatureFeatureCrossReference_3_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


// ")"
protected class BuiltinFunctionExpression_RightParenthesisKeyword_4 extends KeywordToken  {
	
	public BuiltinFunctionExpression_RightParenthesisKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBuiltinFunctionExpressionAccess().getRightParenthesisKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BuiltinFunctionExpression_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new BuiltinFunctionExpression_ArgumentAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule BuiltinFunctionExpression ****************/


/************ begin Rule LiteralExpression ****************
 *
 * // TODO  consider adding a `bind` function which has the intent of making the value bound...
 * / *
 * 	 * scoping: sortFeature in argument.type.features
 * 	 * validation:
 * 	 * 		1-  value.type.textuallyTyped if function is 'alert' or 'confirm'								[√]
 * 	 * 		2-  argument.type.dateTyped if function is 'toMillis'											[√]
 * 	 * 		3-  argument.type.numberTyped if function is 'round'											[√]
 * 	 * 		4-	!value.type.structureTyped if function is 'isSet' (warning)									[√]
 * 	 * 		5-  argument.type.emailTyped if function is 'isValid'											[√]
 * 	 * 		6-  argument.type.listTyped && argument.type.listItemType.structureTyped if function is 'sort'	[ ]
 * 	 * 		7-  sortFeature != null iff function is 'sort'													[√]
 * 	 * 		8-  value.type.structureTyped if function is 'id'												[√]
 * 	 * / // TODO  replace keyword-style expression(s) with implicitly imported functions
 * LiteralExpression:
 * 	{StringLiteralExpression} value=STRING | {BooleanLiteralExpression} literal=BooleanLiterals |
 * 	{IntegerLiteralExpression} value=INT | {NumberLiteralExpression} value=NumberLiteral | ListLiteralExpression |
 * 	EnumerationLiteralExpression | DecisionExpression;
 *
 **/

// {StringLiteralExpression} value=STRING | {BooleanLiteralExpression} literal=BooleanLiterals | {IntegerLiteralExpression}
// value=INT | {NumberLiteralExpression} value=NumberLiteral | ListLiteralExpression | EnumerationLiteralExpression |
// DecisionExpression
protected class LiteralExpression_Alternatives extends AlternativesToken {

	public LiteralExpression_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getLiteralExpressionAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LiteralExpression_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new LiteralExpression_Group_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new LiteralExpression_Group_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new LiteralExpression_Group_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new LiteralExpression_ListLiteralExpressionParserRuleCall_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new LiteralExpression_EnumerationLiteralExpressionParserRuleCall_5(lastRuleCallOrigin, this, 5, inst);
			case 6: return new LiteralExpression_DecisionExpressionParserRuleCall_6(lastRuleCallOrigin, this, 6, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLiteralExpressionAccess().getBooleanLiteralExpressionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDecisionExpressionAccess().getDecisionExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEnumerationLiteralExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralExpressionAccess().getIntegerLiteralExpressionAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListLiteralExpressionAccess().getListLiteralExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralExpressionAccess().getNumberLiteralExpressionAction_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLiteralExpressionAccess().getStringLiteralExpressionAction_0_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {StringLiteralExpression} value=STRING
protected class LiteralExpression_Group_0 extends GroupToken {
	
	public LiteralExpression_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLiteralExpressionAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LiteralExpression_ValueAssignment_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLiteralExpressionAccess().getStringLiteralExpressionAction_0_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {StringLiteralExpression}
protected class LiteralExpression_StringLiteralExpressionAction_0_0 extends ActionToken  {

	public LiteralExpression_StringLiteralExpressionAction_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getLiteralExpressionAccess().getStringLiteralExpressionAction_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// value=STRING
protected class LiteralExpression_ValueAssignment_0_1 extends AssignmentToken  {
	
	public LiteralExpression_ValueAssignment_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLiteralExpressionAccess().getValueAssignment_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LiteralExpression_StringLiteralExpressionAction_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getLiteralExpressionAccess().getValueSTRINGTerminalRuleCall_0_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getLiteralExpressionAccess().getValueSTRINGTerminalRuleCall_0_1_0();
			return obj;
		}
		return null;
	}

}


// {BooleanLiteralExpression} literal=BooleanLiterals
protected class LiteralExpression_Group_1 extends GroupToken {
	
	public LiteralExpression_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLiteralExpressionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LiteralExpression_LiteralAssignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLiteralExpressionAccess().getBooleanLiteralExpressionAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {BooleanLiteralExpression}
protected class LiteralExpression_BooleanLiteralExpressionAction_1_0 extends ActionToken  {

	public LiteralExpression_BooleanLiteralExpressionAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getLiteralExpressionAccess().getBooleanLiteralExpressionAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// literal=BooleanLiterals
protected class LiteralExpression_LiteralAssignment_1_1 extends AssignmentToken  {
	
	public LiteralExpression_LiteralAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLiteralExpressionAccess().getLiteralAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LiteralExpression_BooleanLiteralExpressionAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("literal",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("literal");
		if(enumLitSerializer.isValid(obj.getEObject(), grammarAccess.getLiteralExpressionAccess().getLiteralBooleanLiteralsEnumRuleCall_1_1_0(), value, null)) { 
			type = AssignmentType.ENUM_RULE_CALL;
			element = grammarAccess.getLiteralExpressionAccess().getLiteralBooleanLiteralsEnumRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}


// {IntegerLiteralExpression} value=INT
protected class LiteralExpression_Group_2 extends GroupToken {
	
	public LiteralExpression_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLiteralExpressionAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LiteralExpression_ValueAssignment_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLiteralExpressionAccess().getIntegerLiteralExpressionAction_2_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {IntegerLiteralExpression}
protected class LiteralExpression_IntegerLiteralExpressionAction_2_0 extends ActionToken  {

	public LiteralExpression_IntegerLiteralExpressionAction_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getLiteralExpressionAccess().getIntegerLiteralExpressionAction_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// value=INT
protected class LiteralExpression_ValueAssignment_2_1 extends AssignmentToken  {
	
	public LiteralExpression_ValueAssignment_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLiteralExpressionAccess().getValueAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LiteralExpression_IntegerLiteralExpressionAction_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getLiteralExpressionAccess().getValueINTTerminalRuleCall_2_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getLiteralExpressionAccess().getValueINTTerminalRuleCall_2_1_0();
			return obj;
		}
		return null;
	}

}


// {NumberLiteralExpression} value=NumberLiteral
protected class LiteralExpression_Group_3 extends GroupToken {
	
	public LiteralExpression_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLiteralExpressionAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LiteralExpression_ValueAssignment_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLiteralExpressionAccess().getNumberLiteralExpressionAction_3_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {NumberLiteralExpression}
protected class LiteralExpression_NumberLiteralExpressionAction_3_0 extends ActionToken  {

	public LiteralExpression_NumberLiteralExpressionAction_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getLiteralExpressionAccess().getNumberLiteralExpressionAction_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// value=NumberLiteral
protected class LiteralExpression_ValueAssignment_3_1 extends AssignmentToken  {
	
	public LiteralExpression_ValueAssignment_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLiteralExpressionAccess().getValueAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LiteralExpression_NumberLiteralExpressionAction_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getLiteralExpressionAccess().getValueNumberLiteralParserRuleCall_3_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getLiteralExpressionAccess().getValueNumberLiteralParserRuleCall_3_1_0();
			return obj;
		}
		return null;
	}

}


// ListLiteralExpression
protected class LiteralExpression_ListLiteralExpressionParserRuleCall_4 extends RuleCallToken {
	
	public LiteralExpression_ListLiteralExpressionParserRuleCall_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getLiteralExpressionAccess().getListLiteralExpressionParserRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListLiteralExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getListLiteralExpressionAccess().getListLiteralExpressionAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(ListLiteralExpression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// EnumerationLiteralExpression
protected class LiteralExpression_EnumerationLiteralExpressionParserRuleCall_5 extends RuleCallToken {
	
	public LiteralExpression_EnumerationLiteralExpressionParserRuleCall_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getLiteralExpressionAccess().getEnumerationLiteralExpressionParserRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EnumerationLiteralExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEnumerationLiteralExpressionRule().getType().getClassifier())
			return null;
		if(checkForRecursion(EnumerationLiteralExpression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// DecisionExpression
protected class LiteralExpression_DecisionExpressionParserRuleCall_6 extends RuleCallToken {
	
	public LiteralExpression_DecisionExpressionParserRuleCall_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getLiteralExpressionAccess().getDecisionExpressionParserRuleCall_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DecisionExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDecisionExpressionAccess().getDecisionExpressionAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(DecisionExpression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule LiteralExpression ****************/


/************ begin Rule ListLiteralExpression ****************
 *
 * // TODO  add a literal expression for strings that require HTML escaping?
 * ListLiteralExpression:
 * 	{ListLiteralExpression} "[" members+=Expression* "]";
 *
 **/

// {ListLiteralExpression} "[" members+=Expression* "]"
protected class ListLiteralExpression_Group extends GroupToken {
	
	public ListLiteralExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getListLiteralExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListLiteralExpression_RightSquareBracketKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getListLiteralExpressionAccess().getListLiteralExpressionAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {ListLiteralExpression}
protected class ListLiteralExpression_ListLiteralExpressionAction_0 extends ActionToken  {

	public ListLiteralExpression_ListLiteralExpressionAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getListLiteralExpressionAccess().getListLiteralExpressionAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "["
protected class ListLiteralExpression_LeftSquareBracketKeyword_1 extends KeywordToken  {
	
	public ListLiteralExpression_LeftSquareBracketKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getListLiteralExpressionAccess().getLeftSquareBracketKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListLiteralExpression_ListLiteralExpressionAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// members+=Expression*
protected class ListLiteralExpression_MembersAssignment_2 extends AssignmentToken  {
	
	public ListLiteralExpression_MembersAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getListLiteralExpressionAccess().getMembersAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_TernaryExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("members",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("members");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getListLiteralExpressionAccess().getMembersExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ListLiteralExpression_MembersAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ListLiteralExpression_LeftSquareBracketKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "]"
protected class ListLiteralExpression_RightSquareBracketKeyword_3 extends KeywordToken  {
	
	public ListLiteralExpression_RightSquareBracketKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getListLiteralExpressionAccess().getRightSquareBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListLiteralExpression_MembersAssignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ListLiteralExpression_LeftSquareBracketKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule ListLiteralExpression ****************/


/************ begin Rule EnumerationLiteralExpression ****************
 *
 * // validation: members (if any) must be compatible with each other - for now this means that everything must be compatible with the first member	[√]
 * EnumerationLiteralExpression hidden():
 * 	enumeration=[struct::Enumeration] "::" literal=[struct::EnumerationLiteral|EnumerationName];
 *
 **/

// enumeration=[struct::Enumeration] "::" literal=[struct::EnumerationLiteral|EnumerationName]
protected class EnumerationLiteralExpression_Group extends GroupToken {
	
	public EnumerationLiteralExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEnumerationLiteralExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EnumerationLiteralExpression_LiteralAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEnumerationLiteralExpressionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// enumeration=[struct::Enumeration]
protected class EnumerationLiteralExpression_EnumerationAssignment_0 extends AssignmentToken  {
	
	public EnumerationLiteralExpression_EnumerationAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEnumerationLiteralExpressionAccess().getEnumerationAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("enumeration",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("enumeration");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEnumerationLiteralExpressionAccess().getEnumerationEnumerationCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getEnumerationLiteralExpressionAccess().getEnumerationEnumerationCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "::"
protected class EnumerationLiteralExpression_ColonColonKeyword_1 extends KeywordToken  {
	
	public EnumerationLiteralExpression_ColonColonKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEnumerationLiteralExpressionAccess().getColonColonKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EnumerationLiteralExpression_EnumerationAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// literal=[struct::EnumerationLiteral|EnumerationName]
protected class EnumerationLiteralExpression_LiteralAssignment_2 extends AssignmentToken  {
	
	public EnumerationLiteralExpression_LiteralAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEnumerationLiteralExpressionAccess().getLiteralAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EnumerationLiteralExpression_ColonColonKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("literal",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("literal");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEnumerationLiteralExpressionAccess().getLiteralEnumerationLiteralCrossReference_2_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getEnumerationLiteralExpressionAccess().getLiteralEnumerationLiteralCrossReference_2_0(); 
				return obj;
			}
		}
		return null;
	}

}


/************ end Rule EnumerationLiteralExpression ****************/



/************ begin Rule DecisionExpression ****************
 *
 * DecisionExpression:
 * 	{DecisionExpression} "decide" "{" cases+=DecisionCase* ("default" ":" defaultValueExpr=Expression)? "}";
 *
 **/

// {DecisionExpression} "decide" "{" cases+=DecisionCase* ("default" ":" defaultValueExpr=Expression)? "}"
protected class DecisionExpression_Group extends GroupToken {
	
	public DecisionExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDecisionExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DecisionExpression_RightCurlyBracketKeyword_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDecisionExpressionAccess().getDecisionExpressionAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {DecisionExpression}
protected class DecisionExpression_DecisionExpressionAction_0 extends ActionToken  {

	public DecisionExpression_DecisionExpressionAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getDecisionExpressionAccess().getDecisionExpressionAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "decide"
protected class DecisionExpression_DecideKeyword_1 extends KeywordToken  {
	
	public DecisionExpression_DecideKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDecisionExpressionAccess().getDecideKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DecisionExpression_DecisionExpressionAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "{"
protected class DecisionExpression_LeftCurlyBracketKeyword_2 extends KeywordToken  {
	
	public DecisionExpression_LeftCurlyBracketKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDecisionExpressionAccess().getLeftCurlyBracketKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DecisionExpression_DecideKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// cases+=DecisionCase*
protected class DecisionExpression_CasesAssignment_3 extends AssignmentToken  {
	
	public DecisionExpression_CasesAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDecisionExpressionAccess().getCasesAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DecisionCase_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("cases",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("cases");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDecisionCaseRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDecisionExpressionAccess().getCasesDecisionCaseParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new DecisionExpression_CasesAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new DecisionExpression_LeftCurlyBracketKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("default" ":" defaultValueExpr=Expression)?
protected class DecisionExpression_Group_4 extends GroupToken {
	
	public DecisionExpression_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDecisionExpressionAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DecisionExpression_DefaultValueExprAssignment_4_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "default"
protected class DecisionExpression_DefaultKeyword_4_0 extends KeywordToken  {
	
	public DecisionExpression_DefaultKeyword_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDecisionExpressionAccess().getDefaultKeyword_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DecisionExpression_CasesAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new DecisionExpression_LeftCurlyBracketKeyword_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// ":"
protected class DecisionExpression_ColonKeyword_4_1 extends KeywordToken  {
	
	public DecisionExpression_ColonKeyword_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDecisionExpressionAccess().getColonKeyword_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DecisionExpression_DefaultKeyword_4_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// defaultValueExpr=Expression
protected class DecisionExpression_DefaultValueExprAssignment_4_2 extends AssignmentToken  {
	
	public DecisionExpression_DefaultValueExprAssignment_4_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDecisionExpressionAccess().getDefaultValueExprAssignment_4_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_TernaryExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("defaultValueExpr",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("defaultValueExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDecisionExpressionAccess().getDefaultValueExprExpressionParserRuleCall_4_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new DecisionExpression_ColonKeyword_4_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "}"
protected class DecisionExpression_RightCurlyBracketKeyword_5 extends KeywordToken  {
	
	public DecisionExpression_RightCurlyBracketKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDecisionExpressionAccess().getRightCurlyBracketKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DecisionExpression_Group_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new DecisionExpression_CasesAssignment_3(lastRuleCallOrigin, this, 1, inst);
			case 2: return new DecisionExpression_LeftCurlyBracketKeyword_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}


/************ end Rule DecisionExpression ****************/


/************ begin Rule DecisionCase ****************
 *
 * / *
 * 	 * type: cases.head.valueExpr.type or defaultValueExpr.type							[√]
 * 	 * validation:
 * 	 * 		1-  !cases.empty (warning)													[√]
 * 	 * 		2-  type.isAssignableFrom(defaultValueExpr.type)							[√]
 * 	 * / DecisionCase:
 * 	"case" guardExpr=Expression ":" valueExpr=Expression;
 *
 **/

// "case" guardExpr=Expression ":" valueExpr=Expression
protected class DecisionCase_Group extends GroupToken {
	
	public DecisionCase_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDecisionCaseAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DecisionCase_ValueExprAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDecisionCaseRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "case"
protected class DecisionCase_CaseKeyword_0 extends KeywordToken  {
	
	public DecisionCase_CaseKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDecisionCaseAccess().getCaseKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// guardExpr=Expression
protected class DecisionCase_GuardExprAssignment_1 extends AssignmentToken  {
	
	public DecisionCase_GuardExprAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDecisionCaseAccess().getGuardExprAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_TernaryExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("guardExpr",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("guardExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDecisionCaseAccess().getGuardExprExpressionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new DecisionCase_CaseKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ":"
protected class DecisionCase_ColonKeyword_2 extends KeywordToken  {
	
	public DecisionCase_ColonKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDecisionCaseAccess().getColonKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DecisionCase_GuardExprAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// valueExpr=Expression
protected class DecisionCase_ValueExprAssignment_3 extends AssignmentToken  {
	
	public DecisionCase_ValueExprAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDecisionCaseAccess().getValueExprAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_TernaryExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("valueExpr",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("valueExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDecisionCaseAccess().getValueExprExpressionParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new DecisionCase_ColonKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule DecisionCase ****************/


/************ begin Rule CallbackExpressions ****************
 *
 * / *
 * 	 * validation:
 * 	 * 		1-  guardExpr.type.booleanTyped												[√]
 * 	 * 		2-  containing(DecisionExpression).type.isAssignableFrom(guardExpr.type)	[√]
 * 	 * / CallbackExpressions:
 * 	CallbackExpression | {CallbackResponseExpression} // validation: only useable within callbacks	[√]
 * 	"response" | {CallbackErrorResponseExpression} // validation: only useable within callbacks	[√]
 * 	"error";
 *
 **/

// CallbackExpression | {CallbackResponseExpression} // validation: only useable within callbacks	[√]
// "response" | {CallbackErrorResponseExpression} // validation: only useable within callbacks	[√]
// "error"
protected class CallbackExpressions_Alternatives extends AlternativesToken {

	public CallbackExpressions_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getCallbackExpressionsAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CallbackExpressions_CallbackExpressionParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new CallbackExpressions_Group_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new CallbackExpressions_Group_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCallbackExpressionsAccess().getCallbackErrorResponseExpressionAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCallbackExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCallbackExpressionsAccess().getCallbackResponseExpressionAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// CallbackExpression
protected class CallbackExpressions_CallbackExpressionParserRuleCall_0 extends RuleCallToken {
	
	public CallbackExpressions_CallbackExpressionParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getCallbackExpressionsAccess().getCallbackExpressionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CallbackExpression_StatementBlockAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCallbackExpressionRule().getType().getClassifier())
			return null;
		if(checkForRecursion(CallbackExpression_StatementBlockAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// {CallbackResponseExpression} // validation: only useable within callbacks	[√]
// "response"
protected class CallbackExpressions_Group_1 extends GroupToken {
	
	public CallbackExpressions_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCallbackExpressionsAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CallbackExpressions_ResponseKeyword_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCallbackExpressionsAccess().getCallbackResponseExpressionAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {CallbackResponseExpression}
protected class CallbackExpressions_CallbackResponseExpressionAction_1_0 extends ActionToken  {

	public CallbackExpressions_CallbackResponseExpressionAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getCallbackExpressionsAccess().getCallbackResponseExpressionAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// // validation: only useable within callbacks	[√]
// "response"
protected class CallbackExpressions_ResponseKeyword_1_1 extends KeywordToken  {
	
	public CallbackExpressions_ResponseKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCallbackExpressionsAccess().getResponseKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CallbackExpressions_CallbackResponseExpressionAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// {CallbackErrorResponseExpression} // validation: only useable within callbacks	[√]
// "error"
protected class CallbackExpressions_Group_2 extends GroupToken {
	
	public CallbackExpressions_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCallbackExpressionsAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CallbackExpressions_ErrorKeyword_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCallbackExpressionsAccess().getCallbackErrorResponseExpressionAction_2_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {CallbackErrorResponseExpression}
protected class CallbackExpressions_CallbackErrorResponseExpressionAction_2_0 extends ActionToken  {

	public CallbackExpressions_CallbackErrorResponseExpressionAction_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getCallbackExpressionsAccess().getCallbackErrorResponseExpressionAction_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// // validation: only useable within callbacks	[√]
// "error"
protected class CallbackExpressions_ErrorKeyword_2_1 extends KeywordToken  {
	
	public CallbackExpressions_ErrorKeyword_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCallbackExpressionsAccess().getErrorKeyword_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CallbackExpressions_CallbackErrorResponseExpressionAction_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule CallbackExpressions ****************/


/************ begin Rule CallbackExpression ****************
 *
 * CallbackExpression:
 * 	statementBlock=StatementBlock;
 *
 **/

// statementBlock=StatementBlock
protected class CallbackExpression_StatementBlockAssignment extends AssignmentToken  {
	
	public CallbackExpression_StatementBlockAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCallbackExpressionAccess().getStatementBlockAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StatementBlock_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCallbackExpressionRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("statementBlock",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("statementBlock");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementBlockRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getCallbackExpressionAccess().getStatementBlockStatementBlockParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

/************ end Rule CallbackExpression ****************/


/************ begin Rule StructureCreationExpression ****************
 *
 * StructureCreationExpression:
 * 	"new" structure=[struct::Structure] "(" assignments+=FeatureAssignment* ")";
 *
 **/

// "new" structure=[struct::Structure] "(" assignments+=FeatureAssignment* ")"
protected class StructureCreationExpression_Group extends GroupToken {
	
	public StructureCreationExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStructureCreationExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StructureCreationExpression_RightParenthesisKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStructureCreationExpressionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "new"
protected class StructureCreationExpression_NewKeyword_0 extends KeywordToken  {
	
	public StructureCreationExpression_NewKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStructureCreationExpressionAccess().getNewKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// structure=[struct::Structure]
protected class StructureCreationExpression_StructureAssignment_1 extends AssignmentToken  {
	
	public StructureCreationExpression_StructureAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStructureCreationExpressionAccess().getStructureAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StructureCreationExpression_NewKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("structure",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("structure");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStructureCreationExpressionAccess().getStructureStructureCrossReference_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getStructureCreationExpressionAccess().getStructureStructureCrossReference_1_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "("
protected class StructureCreationExpression_LeftParenthesisKeyword_2 extends KeywordToken  {
	
	public StructureCreationExpression_LeftParenthesisKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStructureCreationExpressionAccess().getLeftParenthesisKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StructureCreationExpression_StructureAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// assignments+=FeatureAssignment*
protected class StructureCreationExpression_AssignmentsAssignment_3 extends AssignmentToken  {
	
	public StructureCreationExpression_AssignmentsAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStructureCreationExpressionAccess().getAssignmentsAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureAssignment_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("assignments",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("assignments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFeatureAssignmentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStructureCreationExpressionAccess().getAssignmentsFeatureAssignmentParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new StructureCreationExpression_AssignmentsAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new StructureCreationExpression_LeftParenthesisKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class StructureCreationExpression_RightParenthesisKeyword_4 extends KeywordToken  {
	
	public StructureCreationExpression_RightParenthesisKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStructureCreationExpressionAccess().getRightParenthesisKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StructureCreationExpression_AssignmentsAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new StructureCreationExpression_LeftParenthesisKeyword_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule StructureCreationExpression ****************/


/************ begin Rule FeatureAssignment ****************
 *
 * // validation: features may not be duplicately assigned						[√]
 * FeatureAssignment:
 * 	feature=[struct::Feature] "=" valueExpr=Expression;
 *
 **/

// feature=[struct::Feature] "=" valueExpr=Expression
protected class FeatureAssignment_Group extends GroupToken {
	
	public FeatureAssignment_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFeatureAssignmentAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureAssignment_ValueExprAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFeatureAssignmentRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// feature=[struct::Feature]
protected class FeatureAssignment_FeatureAssignment_0 extends AssignmentToken  {
	
	public FeatureAssignment_FeatureAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFeatureAssignmentAccess().getFeatureAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("feature",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("feature");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFeatureAssignmentAccess().getFeatureFeatureCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getFeatureAssignmentAccess().getFeatureFeatureCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "="
protected class FeatureAssignment_EqualsSignKeyword_1 extends KeywordToken  {
	
	public FeatureAssignment_EqualsSignKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureAssignmentAccess().getEqualsSignKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureAssignment_FeatureAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// valueExpr=Expression
protected class FeatureAssignment_ValueExprAssignment_2 extends AssignmentToken  {
	
	public FeatureAssignment_ValueExprAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFeatureAssignmentAccess().getValueExprAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_TernaryExpressionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("valueExpr",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("valueExpr");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFeatureAssignmentAccess().getValueExprExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FeatureAssignment_EqualsSignKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule FeatureAssignment ****************/


/************ begin Rule ValueReferenceOrMethodCallExpression ****************
 *
 * // scoping: feature in containing(StructureCreationExpression).features		[√]
 * // validation: feature.type.isAssignableFrom(valueExpr.type)				[√]
 * ValueReferenceOrMethodCallExpression:
 * 	ReferenceExpression ({MethodCallExpression.methodRef=current} => argumentList=ArgumentList)?;
 *
 **/

// ReferenceExpression ({MethodCallExpression.methodRef=current} => argumentList=ArgumentList)?
protected class ValueReferenceOrMethodCallExpression_Group extends GroupToken {
	
	public ValueReferenceOrMethodCallExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getValueReferenceOrMethodCallExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ValueReferenceOrMethodCallExpression_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ValueReferenceOrMethodCallExpression_ReferenceExpressionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getValueReferenceOrMethodCallExpressionAccess().getMethodCallExpressionMethodRefAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getReferenceExpressionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ReferenceExpression
protected class ValueReferenceOrMethodCallExpression_ReferenceExpressionParserRuleCall_0 extends RuleCallToken {
	
	public ValueReferenceOrMethodCallExpression_ReferenceExpressionParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getValueReferenceOrMethodCallExpressionAccess().getReferenceExpressionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReferenceExpression_RefAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getReferenceExpressionRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ReferenceExpression_RefAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({MethodCallExpression.methodRef=current} => argumentList=ArgumentList)?
protected class ValueReferenceOrMethodCallExpression_Group_1 extends GroupToken {
	
	public ValueReferenceOrMethodCallExpression_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getValueReferenceOrMethodCallExpressionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ValueReferenceOrMethodCallExpression_ArgumentListAssignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getValueReferenceOrMethodCallExpressionAccess().getMethodCallExpressionMethodRefAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {MethodCallExpression.methodRef=current}
protected class ValueReferenceOrMethodCallExpression_MethodCallExpressionMethodRefAction_1_0 extends ActionToken  {

	public ValueReferenceOrMethodCallExpression_MethodCallExpressionMethodRefAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getValueReferenceOrMethodCallExpressionAccess().getMethodCallExpressionMethodRefAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ValueReferenceOrMethodCallExpression_ReferenceExpressionParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("methodRef", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("methodRef")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// => argumentList=ArgumentList
protected class ValueReferenceOrMethodCallExpression_ArgumentListAssignment_1_1 extends AssignmentToken  {
	
	public ValueReferenceOrMethodCallExpression_ArgumentListAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getValueReferenceOrMethodCallExpressionAccess().getArgumentListAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ArgumentList_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("argumentList",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("argumentList");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getArgumentListRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getValueReferenceOrMethodCallExpressionAccess().getArgumentListArgumentListParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ValueReferenceOrMethodCallExpression_MethodCallExpressionMethodRefAction_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule ValueReferenceOrMethodCallExpression ****************/


/************ begin Rule ReferenceExpression ****************
 *
 * / *
 * 	 * validation (on MethodCallExpression):
 * 	 * 		1-  methodRef.ref must be a Method										[√]
 * 	 * 		2-  all parameters of methodRef.ref are covered and no more than once	[√]
 * 	 * / // TODO  harden type calculation to deal with recursive call chains (+ validation?)
 * ReferenceExpression:
 * 	ref=[Referable];
 *
 **/

// ref=[Referable]
protected class ReferenceExpression_RefAssignment extends AssignmentToken  {
	
	public ReferenceExpression_RefAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getReferenceExpressionAccess().getRefAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getReferenceExpressionRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("ref",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ref");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getReferenceExpressionAccess().getRefReferableCrossReference_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getReferenceExpressionAccess().getRefReferableCrossReference_0(); 
				return obj;
			}
		}
		return null;
	}

}

/************ end Rule ReferenceExpression ****************/


/************ begin Rule Referable ****************
 *
 * // validation: ref cannot be a method if eContainer is not a MethodCallExpression	[√]
 * / *
 *  * TODO  consider adding a ValidID datatype rule and use that everywhere (including in cross-references: |ValidID)
 *  * 			instead of ID to allow certain keywords (such as password, email and when) as valid identifiers.
 *  * / // (synthetic type)
 * / *
 * 	 * scoping: referables must come from local context
 * 	 * 
 * 	 * locality:
 * 	 * 		- within ListElement: 			index-variables + (outer:) values + parameters + top-level methods	[√]
 * 	 * 		- within DefinedViewable:		values + parameters + top-level methods								[√]
 * 	 * 		- within Method(Definition):	parameters + top-level methods										[√]
 * 	 * 		- within Statement:				preceding local values + scope from Method(Definition)				[√]		TODO  fix bug w.r.t. nested statement blocks? (not due to async block...)
 * 	 * 		- within CallbackExpression:	preceding local values + scope from Element							[ ]		TODO  implement
 * 	 * / Referable:
 * 	Value | Parameter | ListVariable | Method;
 *
 **/

// Value | Parameter | ListVariable | Method
protected class Referable_Alternatives extends AlternativesToken {

	public Referable_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getReferableAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Referable_ValueParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Referable_ParameterParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Referable_ListVariableParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Referable_MethodParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getListVariableRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMethodRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getParameterRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getValueRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Value
protected class Referable_ValueParserRuleCall_0 extends RuleCallToken {
	
	public Referable_ValueParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getReferableAccess().getValueParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Value_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getValueRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Value_NameAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Parameter
protected class Referable_ParameterParserRuleCall_1 extends RuleCallToken {
	
	public Referable_ParameterParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getReferableAccess().getParameterParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Parameter_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getParameterRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Parameter_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ListVariable
protected class Referable_ListVariableParserRuleCall_2 extends RuleCallToken {
	
	public Referable_ListVariableParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getReferableAccess().getListVariableParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListVariable_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getListVariableRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ListVariable_NameAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Method
protected class Referable_MethodParserRuleCall_3 extends RuleCallToken {
	
	public Referable_MethodParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getReferableAccess().getMethodParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Method_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMethodRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Method_NameAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Referable ****************/


/************ begin Rule StructureModel ****************
 *
 * StructureModel:
 * 	typeDefinitions+=DefinedType*;
 *
 **/

// typeDefinitions+=DefinedType*
protected class StructureModel_TypeDefinitionsAssignment extends AssignmentToken  {
	
	public StructureModel_TypeDefinitionsAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStructureModelAccess().getTypeDefinitionsAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DefinedType_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("typeDefinitions",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("typeDefinitions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDefinedTypeRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStructureModelAccess().getTypeDefinitionsDefinedTypeParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new StructureModel_TypeDefinitionsAssignment(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}

/************ end Rule StructureModel ****************/


/************ begin Rule DefinedType ****************
 *
 * DefinedType:
 * 	StructureDefinition | EnumerationDefinition;
 *
 **/

// StructureDefinition | EnumerationDefinition
protected class DefinedType_Alternatives extends AlternativesToken {

	public DefinedType_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getDefinedTypeAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DefinedType_StructureDefinitionParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new DefinedType_EnumerationDefinitionParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEnumerationDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStructureDefinitionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// StructureDefinition
protected class DefinedType_StructureDefinitionParserRuleCall_0 extends RuleCallToken {
	
	public DefinedType_StructureDefinitionParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDefinedTypeAccess().getStructureDefinitionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StructureDefinition_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStructureDefinitionRule().getType().getClassifier())
			return null;
		if(checkForRecursion(StructureDefinition_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// EnumerationDefinition
protected class DefinedType_EnumerationDefinitionParserRuleCall_1 extends RuleCallToken {
	
	public DefinedType_EnumerationDefinitionParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDefinedTypeAccess().getEnumerationDefinitionParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EnumerationDefinition_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEnumerationDefinitionRule().getType().getClassifier())
			return null;
		if(checkForRecursion(EnumerationDefinition_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule DefinedType ****************/


/************ begin Rule StructureDefinition ****************
 *
 * StructureDefinition returns Structure:
 * 	"structure" name=ID persistent?="persistent"? "{" features+=Feature* "}";
 *
 **/

// "structure" name=ID persistent?="persistent"? "{" features+=Feature* "}"
protected class StructureDefinition_Group extends GroupToken {
	
	public StructureDefinition_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStructureDefinitionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StructureDefinition_RightCurlyBracketKeyword_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStructureDefinitionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "structure"
protected class StructureDefinition_StructureKeyword_0 extends KeywordToken  {
	
	public StructureDefinition_StructureKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStructureDefinitionAccess().getStructureKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name=ID
protected class StructureDefinition_NameAssignment_1 extends AssignmentToken  {
	
	public StructureDefinition_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStructureDefinitionAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StructureDefinition_StructureKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getStructureDefinitionAccess().getNameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getStructureDefinitionAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// persistent?="persistent"?
protected class StructureDefinition_PersistentAssignment_2 extends AssignmentToken  {
	
	public StructureDefinition_PersistentAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStructureDefinitionAccess().getPersistentAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StructureDefinition_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("persistent",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("persistent");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getStructureDefinitionAccess().getPersistentPersistentKeyword_2_0();
			return obj;
		}
		return null;
	}

}

// "{"
protected class StructureDefinition_LeftCurlyBracketKeyword_3 extends KeywordToken  {
	
	public StructureDefinition_LeftCurlyBracketKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStructureDefinitionAccess().getLeftCurlyBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StructureDefinition_PersistentAssignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new StructureDefinition_NameAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// features+=Feature*
protected class StructureDefinition_FeaturesAssignment_4 extends AssignmentToken  {
	
	public StructureDefinition_FeaturesAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStructureDefinitionAccess().getFeaturesAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Feature_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("features",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("features");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFeatureRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStructureDefinitionAccess().getFeaturesFeatureParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new StructureDefinition_FeaturesAssignment_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new StructureDefinition_LeftCurlyBracketKeyword_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class StructureDefinition_RightCurlyBracketKeyword_5 extends KeywordToken  {
	
	public StructureDefinition_RightCurlyBracketKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStructureDefinitionAccess().getRightCurlyBracketKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StructureDefinition_FeaturesAssignment_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new StructureDefinition_LeftCurlyBracketKeyword_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule StructureDefinition ****************/


/************ begin Rule Feature ****************
 *
 * / *
 * 	 * validation:
 * 	 * 		1-  #features > 0														[√]
 * 	 * 		2-  !persistent || structure-typed-features.forAll[type.persistent] 	[√]
 * 	 * / / *
 * 	 * semantics: corresponds to a JSON structure (+ all associated semantics, no references)
 * 	 * 		as well as POJOs, controllers and CRUD servlets on the backend in case of the `persistent` marking
 * 	 * / Feature:
 * 	name=ID optional?="optional"? ":" type=TypeLiteral;
 *
 **/

// name=ID optional?="optional"? ":" type=TypeLiteral
protected class Feature_Group extends GroupToken {
	
	public Feature_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFeatureAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Feature_TypeAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFeatureRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name=ID
protected class Feature_NameAssignment_0 extends AssignmentToken  {
	
	public Feature_NameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFeatureAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getFeatureAccess().getNameIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getFeatureAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// optional?="optional"?
protected class Feature_OptionalAssignment_1 extends AssignmentToken  {
	
	public Feature_OptionalAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFeatureAccess().getOptionalAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Feature_NameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("optional",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("optional");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getFeatureAccess().getOptionalOptionalKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// ":"
protected class Feature_ColonKeyword_2 extends KeywordToken  {
	
	public Feature_ColonKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureAccess().getColonKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Feature_OptionalAssignment_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Feature_NameAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// type=TypeLiteral
protected class Feature_TypeAssignment_3 extends AssignmentToken  {
	
	public Feature_TypeAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFeatureAccess().getTypeAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TypeLiteral_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("type",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeLiteralRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFeatureAccess().getTypeTypeLiteralParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Feature_ColonKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Feature ****************/


/************ begin Rule EnumerationDefinition ****************
 *
 * EnumerationDefinition returns Enumeration:
 * 	"enumeration" name=ID "{" literals+=EnumerationLiteral* "}";
 *
 **/

// "enumeration" name=ID "{" literals+=EnumerationLiteral* "}"
protected class EnumerationDefinition_Group extends GroupToken {
	
	public EnumerationDefinition_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEnumerationDefinitionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EnumerationDefinition_RightCurlyBracketKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEnumerationDefinitionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "enumeration"
protected class EnumerationDefinition_EnumerationKeyword_0 extends KeywordToken  {
	
	public EnumerationDefinition_EnumerationKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEnumerationDefinitionAccess().getEnumerationKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name=ID
protected class EnumerationDefinition_NameAssignment_1 extends AssignmentToken  {
	
	public EnumerationDefinition_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEnumerationDefinitionAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EnumerationDefinition_EnumerationKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getEnumerationDefinitionAccess().getNameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getEnumerationDefinitionAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "{"
protected class EnumerationDefinition_LeftCurlyBracketKeyword_2 extends KeywordToken  {
	
	public EnumerationDefinition_LeftCurlyBracketKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEnumerationDefinitionAccess().getLeftCurlyBracketKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EnumerationDefinition_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// literals+=EnumerationLiteral*
protected class EnumerationDefinition_LiteralsAssignment_3 extends AssignmentToken  {
	
	public EnumerationDefinition_LiteralsAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEnumerationDefinitionAccess().getLiteralsAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EnumerationLiteral_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("literals",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("literals");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEnumerationLiteralRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getEnumerationDefinitionAccess().getLiteralsEnumerationLiteralParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EnumerationDefinition_LiteralsAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new EnumerationDefinition_LeftCurlyBracketKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class EnumerationDefinition_RightCurlyBracketKeyword_4 extends KeywordToken  {
	
	public EnumerationDefinition_RightCurlyBracketKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEnumerationDefinitionAccess().getRightCurlyBracketKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EnumerationDefinition_LiteralsAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new EnumerationDefinition_LeftCurlyBracketKeyword_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule EnumerationDefinition ****************/


/************ begin Rule EnumerationLiteral ****************
 *
 * / *
 * 	 * validation:
 * 	 * 		1-  #literals > 0					[√]
 * 	 * 		2-  literals are uniquely-named		[ ]
 * 	 * / EnumerationLiteral:
 * 	name=EnumerationName "->" displayName=STRING;
 *
 **/

// name=EnumerationName "->" displayName=STRING
protected class EnumerationLiteral_Group extends GroupToken {
	
	public EnumerationLiteral_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEnumerationLiteralAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EnumerationLiteral_DisplayNameAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEnumerationLiteralRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name=EnumerationName
protected class EnumerationLiteral_NameAssignment_0 extends AssignmentToken  {
	
	public EnumerationLiteral_NameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEnumerationLiteralAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getEnumerationLiteralAccess().getNameEnumerationNameParserRuleCall_0_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getEnumerationLiteralAccess().getNameEnumerationNameParserRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "->"
protected class EnumerationLiteral_HyphenMinusGreaterThanSignKeyword_1 extends KeywordToken  {
	
	public EnumerationLiteral_HyphenMinusGreaterThanSignKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEnumerationLiteralAccess().getHyphenMinusGreaterThanSignKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EnumerationLiteral_NameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// displayName=STRING
protected class EnumerationLiteral_DisplayNameAssignment_2 extends AssignmentToken  {
	
	public EnumerationLiteral_DisplayNameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEnumerationLiteralAccess().getDisplayNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EnumerationLiteral_HyphenMinusGreaterThanSignKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("displayName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("displayName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getEnumerationLiteralAccess().getDisplayNameSTRINGTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getEnumerationLiteralAccess().getDisplayNameSTRINGTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule EnumerationLiteral ****************/



/************ begin Rule TypeLiteral ****************
 *
 * / *
 *  * +-------------+
 *  * | type system |
 *  * +-------------+
 *  * / TypeLiteral:
 * 	BuiltinTypeLiteral | DefinedTypeLiteral | ListTypeLiteral | SyntheticTypeLiteral;
 *
 **/

// BuiltinTypeLiteral | DefinedTypeLiteral | ListTypeLiteral | SyntheticTypeLiteral
protected class TypeLiteral_Alternatives extends AlternativesToken {

	public TypeLiteral_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTypeLiteralAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TypeLiteral_BuiltinTypeLiteralParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TypeLiteral_DefinedTypeLiteralParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new TypeLiteral_ListTypeLiteralParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new TypeLiteral_SyntheticTypeLiteralParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBuiltinTypeLiteralRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSyntheticTypeLiteralAccess().getCallbackErrorResponseLiteralAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSyntheticTypeLiteralAccess().getCallbackLiteralAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDefinedTypeLiteralRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListTypeLiteralRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSyntheticTypeLiteralAccess().getVoidLiteralAction_2_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// BuiltinTypeLiteral
protected class TypeLiteral_BuiltinTypeLiteralParserRuleCall_0 extends RuleCallToken {
	
	public TypeLiteral_BuiltinTypeLiteralParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeLiteralAccess().getBuiltinTypeLiteralParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BuiltinTypeLiteral_BuiltinAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBuiltinTypeLiteralRule().getType().getClassifier())
			return null;
		if(checkForRecursion(BuiltinTypeLiteral_BuiltinAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// DefinedTypeLiteral
protected class TypeLiteral_DefinedTypeLiteralParserRuleCall_1 extends RuleCallToken {
	
	public TypeLiteral_DefinedTypeLiteralParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeLiteralAccess().getDefinedTypeLiteralParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DefinedTypeLiteral_TypeAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDefinedTypeLiteralRule().getType().getClassifier())
			return null;
		if(checkForRecursion(DefinedTypeLiteral_TypeAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ListTypeLiteral
protected class TypeLiteral_ListTypeLiteralParserRuleCall_2 extends RuleCallToken {
	
	public TypeLiteral_ListTypeLiteralParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeLiteralAccess().getListTypeLiteralParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListTypeLiteral_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getListTypeLiteralRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ListTypeLiteral_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// SyntheticTypeLiteral
protected class TypeLiteral_SyntheticTypeLiteralParserRuleCall_3 extends RuleCallToken {
	
	public TypeLiteral_SyntheticTypeLiteralParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeLiteralAccess().getSyntheticTypeLiteralParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SyntheticTypeLiteral_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSyntheticTypeLiteralAccess().getCallbackErrorResponseLiteralAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSyntheticTypeLiteralAccess().getCallbackLiteralAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSyntheticTypeLiteralAccess().getVoidLiteralAction_2_0().getType().getClassifier())
			return null;
		if(checkForRecursion(SyntheticTypeLiteral_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule TypeLiteral ****************/


/************ begin Rule BuiltinTypeLiteral ****************
 *
 * BuiltinTypeLiteral:
 * 	builtin=BuiltinTypes;
 *
 **/

// builtin=BuiltinTypes
protected class BuiltinTypeLiteral_BuiltinAssignment extends AssignmentToken  {
	
	public BuiltinTypeLiteral_BuiltinAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBuiltinTypeLiteralAccess().getBuiltinAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBuiltinTypeLiteralRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("builtin",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("builtin");
		if(enumLitSerializer.isValid(obj.getEObject(), grammarAccess.getBuiltinTypeLiteralAccess().getBuiltinBuiltinTypesEnumRuleCall_0(), value, null)) { 
			type = AssignmentType.ENUM_RULE_CALL;
			element = grammarAccess.getBuiltinTypeLiteralAccess().getBuiltinBuiltinTypesEnumRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule BuiltinTypeLiteral ****************/


/************ begin Rule DefinedTypeLiteral ****************
 *
 * // highlighting: just colored, not bold (=fugly)	[ ]
 * DefinedTypeLiteral:
 * 	type=[DefinedType];
 *
 **/

// type=[DefinedType]
protected class DefinedTypeLiteral_TypeAssignment extends AssignmentToken  {
	
	public DefinedTypeLiteral_TypeAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDefinedTypeLiteralAccess().getTypeAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDefinedTypeLiteralRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("type",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDefinedTypeLiteralAccess().getTypeDefinedTypeCrossReference_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getDefinedTypeLiteralAccess().getTypeDefinedTypeCrossReference_0(); 
				return obj;
			}
		}
		return null;
	}

}

/************ end Rule DefinedTypeLiteral ****************/


/************ begin Rule ListTypeLiteral ****************
 *
 * // highlighting: render in italics					[ ]
 * ListTypeLiteral:
 * 	"[" itemType=TypeLiteral "]";
 *
 **/

// "[" itemType=TypeLiteral "]"
protected class ListTypeLiteral_Group extends GroupToken {
	
	public ListTypeLiteral_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getListTypeLiteralAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListTypeLiteral_RightSquareBracketKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getListTypeLiteralRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "["
protected class ListTypeLiteral_LeftSquareBracketKeyword_0 extends KeywordToken  {
	
	public ListTypeLiteral_LeftSquareBracketKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getListTypeLiteralAccess().getLeftSquareBracketKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// itemType=TypeLiteral
protected class ListTypeLiteral_ItemTypeAssignment_1 extends AssignmentToken  {
	
	public ListTypeLiteral_ItemTypeAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getListTypeLiteralAccess().getItemTypeAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TypeLiteral_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("itemType",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("itemType");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeLiteralRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getListTypeLiteralAccess().getItemTypeTypeLiteralParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ListTypeLiteral_LeftSquareBracketKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "]"
protected class ListTypeLiteral_RightSquareBracketKeyword_2 extends KeywordToken  {
	
	public ListTypeLiteral_RightSquareBracketKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getListTypeLiteralAccess().getRightSquareBracketKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListTypeLiteral_ItemTypeAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule ListTypeLiteral ****************/


/************ begin Rule SyntheticTypeLiteral ****************
 *
 * // validation: synthetic types can't be used in SimScript-Structure		[√]
 * // TODO  move expressions to here
 * / *
 *  * Challenge: the expressions sub language refers to some concepts which are not intrinsic to the SimScript-Structure DSL,
 *  * such as interfaces (or NamedService-s) from SimScript-Backend. It should be able to "inject" those things in SimScript-UI
 *  * even though they are not defined in SimScript-Structure.
 *  * / SyntheticTypeLiteral:
 * 	{CallbackLiteral} // semantics: the (type literal of) a [ui::StatementBlock] in a `callback` feature
 * 	"Callback" | {CallbackErrorResponseLiteral} // semantics: the (type literal of) the response returned when an interface (AJAX) call fails
 * 	"Error" | {VoidLiteral} // semantics: the (type literal of) void type
 * 	"$Void";
 *
 **/

// {CallbackLiteral} // semantics: the (type literal of) a [ui::StatementBlock] in a `callback` feature
// "Callback" | {CallbackErrorResponseLiteral} // semantics: the (type literal of) the response returned when an interface (AJAX) call fails
// "Error" | {VoidLiteral} // semantics: the (type literal of) void type
// "$Void"
protected class SyntheticTypeLiteral_Alternatives extends AlternativesToken {

	public SyntheticTypeLiteral_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSyntheticTypeLiteralAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SyntheticTypeLiteral_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SyntheticTypeLiteral_Group_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new SyntheticTypeLiteral_Group_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSyntheticTypeLiteralAccess().getCallbackErrorResponseLiteralAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSyntheticTypeLiteralAccess().getCallbackLiteralAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSyntheticTypeLiteralAccess().getVoidLiteralAction_2_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {CallbackLiteral} // semantics: the (type literal of) a [ui::StatementBlock] in a `callback` feature
// "Callback"
protected class SyntheticTypeLiteral_Group_0 extends GroupToken {
	
	public SyntheticTypeLiteral_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSyntheticTypeLiteralAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SyntheticTypeLiteral_CallbackKeyword_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSyntheticTypeLiteralAccess().getCallbackLiteralAction_0_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {CallbackLiteral}
protected class SyntheticTypeLiteral_CallbackLiteralAction_0_0 extends ActionToken  {

	public SyntheticTypeLiteral_CallbackLiteralAction_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getSyntheticTypeLiteralAccess().getCallbackLiteralAction_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// // semantics: the (type literal of) a [ui::StatementBlock] in a `callback` feature
// "Callback"
protected class SyntheticTypeLiteral_CallbackKeyword_0_1 extends KeywordToken  {
	
	public SyntheticTypeLiteral_CallbackKeyword_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSyntheticTypeLiteralAccess().getCallbackKeyword_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SyntheticTypeLiteral_CallbackLiteralAction_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// {CallbackErrorResponseLiteral} // semantics: the (type literal of) the response returned when an interface (AJAX) call fails
// "Error"
protected class SyntheticTypeLiteral_Group_1 extends GroupToken {
	
	public SyntheticTypeLiteral_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSyntheticTypeLiteralAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SyntheticTypeLiteral_ErrorKeyword_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSyntheticTypeLiteralAccess().getCallbackErrorResponseLiteralAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {CallbackErrorResponseLiteral}
protected class SyntheticTypeLiteral_CallbackErrorResponseLiteralAction_1_0 extends ActionToken  {

	public SyntheticTypeLiteral_CallbackErrorResponseLiteralAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getSyntheticTypeLiteralAccess().getCallbackErrorResponseLiteralAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// // semantics: the (type literal of) the response returned when an interface (AJAX) call fails
// "Error"
protected class SyntheticTypeLiteral_ErrorKeyword_1_1 extends KeywordToken  {
	
	public SyntheticTypeLiteral_ErrorKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSyntheticTypeLiteralAccess().getErrorKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SyntheticTypeLiteral_CallbackErrorResponseLiteralAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// {VoidLiteral} // semantics: the (type literal of) void type
// "$Void"
protected class SyntheticTypeLiteral_Group_2 extends GroupToken {
	
	public SyntheticTypeLiteral_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSyntheticTypeLiteralAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SyntheticTypeLiteral_VoidKeyword_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSyntheticTypeLiteralAccess().getVoidLiteralAction_2_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {VoidLiteral}
protected class SyntheticTypeLiteral_VoidLiteralAction_2_0 extends ActionToken  {

	public SyntheticTypeLiteral_VoidLiteralAction_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getSyntheticTypeLiteralAccess().getVoidLiteralAction_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// // semantics: the (type literal of) void type
// "$Void"
protected class SyntheticTypeLiteral_VoidKeyword_2_1 extends KeywordToken  {
	
	public SyntheticTypeLiteral_VoidKeyword_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSyntheticTypeLiteralAccess().getVoidKeyword_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SyntheticTypeLiteral_VoidLiteralAction_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule SyntheticTypeLiteral ****************/

}
