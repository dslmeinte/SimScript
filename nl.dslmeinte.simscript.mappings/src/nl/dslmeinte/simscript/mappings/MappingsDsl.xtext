/*
 * A language to bridge queries and structures by defining mappings between them.
 * (Could even be used to define complete services implementations.)
 */

grammar nl.dslmeinte.simscript.mappings.MappingsDsl with nl.dslmeinte.simscript.structure.SimStructureDsl

import "http://www.dslconsultancy.com/simscript/types" as types
import "http://www.dslconsultancy.com/simscript/simpleDb/SimpleDbDsl" as db

import "http://www.dslconsultancy.com/simscript/mappings/MappingsDsl" as map


MappingsModel returns map::MappingsModel:
	('backend' '=' backendTarget=BackendTargets)?	// default: PHP
	definitions+=NamedQueryDefinition*
	;

enum BackendTargets returns map::BackendTargets:
	php='PHP' /* default */ | java='Java'
	;


/*
 * +---------+
 * | queries |
 * +---------+
 */

NamedQueryDefinition returns map::NamedQueryDefinition:
	'query' name=ID ':'
		queryExpr=Query
	;

Query returns map::Query:
	FromDbQuery | ToDbQuery
	;
	/*
	 * pulled-up features:
	 * 		name	: ID
	 * 		table	: db::Table
	 */

FromDbQuery returns map::FromDbQuery:
	QueryHavingResult | DeleteQuery
	;
	/*
	 * pulled-up features:
	 * 		parameters	: UntypedParameters*
	 * 		whereClause	: MatchingClause
	 */

ToDbQuery returns map::ToDbQuery:
	InsertQuery | UpdateQuery
	;

QueryHavingResult returns map::QueryHavingResult:
	SelectQuery | CountQuery 
	;

SelectQuery returns map::SelectQuery:
	('with' '(' parameters+=UntypedParameter* ')')?		// (also in CountQuery and DeleteQuery)
	'select' nonEmpty?='non-empty'?
	'from' table=[db::Table]							// (also in CountQuery and DeleteQuery)
	whereClause=MatchingClause?							// (also in CountQuery and DeleteQuery)
	orderClause=OrderClause?
	atMost1?='at-most-1'?
	// mapping part:
	'map-to' structure=[types::Structure] '{'
		( 'same-named' '[' sameNamedColumns+=[db::Column]* ']' )?
		mappingSpecifications+=FromDbMappingSpecification*
	'}'
	;
	/*
	 * scoping:
	 * 		1-  sameNamedColumns in table.columns s.t. a same-named feature of structure exists	[√]
	 * validation:
	 * 		1-  warning if resultExpr yields (at most) single row && atMost1					[√]
	 * 		2-  warning for unmapped-/-deferred features										[√]
	 * 		3-	error for duplicately-named columns under same-named							[ ]
	 * 
	 * semantics:
	 * 		nonEmpty expresses that the #result-rows is checked to be > 0
	 * 		atMost1 expresses that at most 1 result row is returned/used
	 */

FromDbMappingSpecification returns map::FromDbMappingSpecification:
	(
		  {map::SimpleColumnMappingSpecification}		column=[db::Column] '->'
		| {map::NestedMappingSpecification}				query=[map::NamedQueryDefinition] '(' arguments+=Argument* ')' '->'
		| {map::DeferedMappingSpecification}			'defer'
		| {map::TimestampColumnMappingSpecification}	'timestamp' '->'
	)
		feature=[types::Feature]
	;
	/*
	 * scoping:
	 * 		1-  feature in containing(SelectQuery).structure.features												[√]
	 * 		2-  <SimpleColumnMappingSpecification> column in containing(SelectQuery).table.columns					[?]		FIXME
	 * 
	 * validation:
	 * 		1-  <NestedMappingSpecification> query.queryExpr is-a QueryHavingResult									[√]
	 * 		2-  <NestedMappingSpecification> warning if query not in containing(MappingsModel)						[√]
	 * 		3-  <TimestampColumnMappingSpecification> only valid if containing(QueryHavingResult).table.timestamped	[√]
	 * 
	 * derived function:
	 * 		nestedQuery(NestedMappingSpecification) := it.query.queryExpr as QueryHavingResult						[√]
	 */

Argument returns map::Argument:
	parameter=[map::UntypedParameter] '=' column=[db::Column]
	;
	/*
	 * scoping:
	 * 		1-  parameter in containing(NestedMappingSpecification).selectQuery.parameters	[√]
	 * 		2-  column in containing(SelectQuery).table.columns								[√]
	 */


CountQuery returns map::CountQuery:
	('with' '(' parameters+=UntypedParameter* ')')?
	'count'
		resultExpr=ResultExpression
	'from' table=[db::Table]
	whereClause=MatchingClause?
	;
	// validation: warning if resultExpr yields (at most) single row	[√]

ResultExpression returns map::ResultExpression:
	ColumnsSpecification | AllColumnsExpression
	;

ColumnsSpecification returns map::ColumnsSpecification:
	'[' columns+=[db::Column]+ ']'
	;
	/*
	 * scoping:		columns in containing(FromDbQuery).table.columns	[√]
	 * validation:	!columns.empty (warning)							[√]
	 */

AllColumnsExpression returns map::AllColumnsExpression:
	{map::AllColumnsExpression} '*'
	;

MatchingClause returns map::MatchingClause:
	{map::MatchingClause}
	'matching' '(' subClauses+=MatchingSubClause* ')'
	;
	// validation: !subClauses.empty 								[√]
	// TODO  consider adding an "auto-matcher" based on column and parameter names

MatchingSubClause returns map::MatchingSubClause:
	SimpleSubClause | OrSubClause
	;

SimpleSubClause returns map::SimpleSubClause:
	SimpleEqualitySubClause | SimpleRangeSubClause
	;
	/*
	 * scoping: column in containing(FromDbQuery).table.columns		[√]
	 * pulled-up feature: column : db::Column
	 */

SimpleEqualitySubClause returns map::SimpleEqualitySubClause:
	column=[db::Column] '=' ( parameter=[map::UntypedParameter] | literal=LiteralExpression )
	;
	// scoping: parameter in containing(FromDbQuery).parameters		[√]
	// TODO  use a proper expression sub language for the rhs

SimpleRangeSubClause returns map::SimpleRangeSubClause:
	column=[db::Column] 'in' leftDelimiter=LeftRangeDelimiters leftParameter=[map::UntypedParameter] ',' rightParameter=[map::UntypedParameter] rightDelimiter=RightRangeDelimiters
	;
	// scoping: leftParameter, rightParameter in containing(FromDbQuery).parameters		[√]
	// TODO  use a proper expression sub language for the rhs parameters

OrSubClause returns map::OrSubClause:
	'(' subClauses+=SimpleSubClause ( '||' subClauses+=SimpleSubClause )+ ')'
	;

enum LeftRangeDelimiters returns map::LeftRangeDelimiters:
	closed='[' | open='<'
	;

enum RightRangeDelimiters returns map::RightRangeDelimiters:
	closed=']' | open='>'
	;


OrderClause returns map::OrderClause:
	{map::OrderClause}
	'order-by'
		(
			  columnSpecifications+=ColumnOrderSpecification
			| '[' columnSpecifications+=ColumnOrderSpecification* ']'
		)
	;
	// validation: !columnSpecifications.empty (warning)			[√]

ColumnOrderSpecification returns map::ColumnOrderSpecification:
	( column=[db::Column] | timestamp?='timestamp' ) direction=OrderDirections?
	;
	/*
	 * scoping:		column in containing(SelectQuery).table									[√]
	 * validation:	timestamp can only be used in a query whose table is timestamped		[√]
	 */

enum OrderDirections returns map::OrderDirections:
	asc='ascending' /* default */ | desc='descending'
	;


InsertQuery returns map::InsertQuery:
	'insert' '(' parameters+=TypedParameter (',' parameters+=TypedParameter )* ')' 'into' table=[db::Table] '{'
		mappingSpecifications+=ToDbMappingSpecification*
	'}' ( '=>' returnAutoIncrementColumn=[db::Column] )?
	;
	// scoping: returnAutoIncrementColumn in table.columns.filter[it.autoIncrement]		[√]

ToDbMappingSpecification returns map::ToDbMappingSpecification:
	column=[db::Column] '<-' expr=ToDbExpression
	;
	/*
	 * scoping: column in containing(ToDbQuery).table.columns					[√]
	 * validation: passwords have to be encrypted								[√]
	 * 		(TODO  this type of stuff should be part of a static type system (checker))
	 */


UpdateQuery returns map::UpdateQuery:
	'with' '(' parameters+=TypedParameter (',' parameters+=TypedParameter )* ')'
	'update' table=[db::Table]
	whereClause=UpdateMatchingClause
	'{' mappingSpecifications+=ToDbMappingSpecification* '}'
	;

UpdateMatchingClause returns map::UpdateMatchingClause:
	{map::UpdateMatchingClause}
	'matching' '(' subClauses+=ExpressionEqualitySubClause* ')'
	;
	// validation: !subClauses.empty 											[√]

ExpressionEqualitySubClause returns map::ExpressionEqualitySubClause:
	column=[db::Column] '=' expr=ToDbExpression
	;
	// scoping: columns in containing(UpdateQuery).table.columns				[√]
	// validation: !column.primary (warning)									[√]


DeleteQuery returns map::DeleteQuery:
	('with' '(' parameters+=UntypedParameter* ')')?
	'delete' 'from' table=[db::Table]
	whereClause=MatchingClause
	;


/*
 * +-------------+
 * | expressions |
 * +-------------+
 */

ToDbExpression returns map::ToDbExpression:
	  FeatureExpressionHead
	| MonthRoundExpression
	| EncryptExpression
	| LiteralExpression
	// TODO  add other expressions (literals and such)
	;

MonthRoundExpression returns map::MonthRoundExpression:
	'round-to-month' '(' operand=FeatureExpressionHead ')'
	;
	// validation: operand must be date-typed									[√]

EncryptExpression returns map::EncryptExpression:
	'encrypt' '(' operand=FeatureExpressionHead ')'
	;
	// validation: operand must be password-typed								[√]


// TODO  turn into combination of FeatureExpression + ReferenceExpression, as in SimScript (requires proper scoping)

FeatureExpressionHead returns map::FeatureExpressionHead:
	parameter=[map::TypedParameter] tail=FeatureExpressionTail?
	;
	// scoping: parameter in containing(ToDbQuery).parameters					[√]

FeatureExpressionTail returns map::FeatureExpressionTail:
	'.' feature=[types::Feature] tail=FeatureExpressionTail?
	;
	// scoping: feature in (eContainer as FeatureExpressionElement).features	[√]

FeatureExpressionElement returns map::FeatureExpressionElement:	// convenience type with 'tail' features
	FeatureExpressionHead | FeatureExpressionTail
	;
	/*
	 * pulled-up feature:
	 * 		tail	: FeatureExpressionTail
	 */

LiteralExpression returns map::LiteralExpression:
	{map::BooleanLiteralExpression} literal=BooleanLiterals
	;

enum BooleanLiterals returns map::BooleanLiterals:
	false /* == ord(0) */ | true /* == order(1) */
	;


/*
 * +------------+
 * | referables |
 * +------------+
 */

TypedParameter returns map::TypedParameter:
	name=ID ':' type=TypeLiteral
	;

UntypedParameter returns map::UntypedParameter:
	name=ID		// (no type info yet, as this isn't currently really relevant for the PHP code...)
	;

